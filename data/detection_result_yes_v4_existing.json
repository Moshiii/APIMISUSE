[
    {
        "number": "C:\\@code\\APIMISUSE\\data\\repo_tensorflow_test\\caffe-tensorflow\\examples\\mnist\\finetune_mnist.py:37",
        "code_before": [
            "labels = tf.placeholder(tf.float32, [batch_size, 10])",
            "net = MyNet({'data': images})",
            "",
            "ip2 = net.layers['ip2']",
            "pred = tf.nn.softmax(ip2)",
            "",
            "loss = tf.reduce_mean(tf.nn.softmax_cross_entropy_with_logits(ip2, labels), 0)",
            "opt = tf.train.RMSPropOptimizer(0.001)",
            ""
        ],
        "example": [
            "Fix pattern 1 :",
            "in the condition of using cross entropy formula, if .softmax() detected, replace it tf.nn.softmax_cross_entropy_with_logits()",
            ""
        ],
        "detection_result": "Yes",
        "result": "yes",
        "label": ""
    },
    {
        "number": "C:\\@code\\APIMISUSE\\data\\repo_pytorch_test\\3D-ResNets-PyTorch\\main.py:314",
        "code_before": [
            "        'state_dict': model_state_dict,",
            "        'optimizer': optimizer.state_dict(),",
            "        'scheduler': scheduler.state_dict()",
            "    }",
            "    torch.save(save_states, save_file_path)",
            "",
            "",
            "def main_worker(index, opt):",
            ""
        ],
        "example": [
            "Fix pattern 1 :",
            "in the condition of using a png file, if .decode_jpeg() detected, replace .decode_jpeg() with .decode_image()",
            "Fix pattern 2 :",
            "in the condition of using a png file, if .decode_jpeg() and .resize( detected, replace .decode_jpeg() with .decode_image() and replace .resize() with .resize_image_with_crop_or_pad(",
            "Fix pattern 3 :",
            "no precondition required, if tf.merge_summary( detected, replace it with tf.summary.merge(",
            "Fix pattern 4 :",
            "no precondition required, if tf.merge_all_summaries( detected, replace it with tf.summary.merge_all(",
            "Fix pattern 5 :",
            "no precondition required, if tf.train.SummaryWriter(detected, replace it with tf.summary.FileWriter(",
            "Fix pattern 6 :",
            "if the model is using binary class mode, if Dense(3, activation=`softmax`) detected, replace it with Dense(2, activation=`softmax`)",
            "Fix pattern 7 :",
            "in the condition of using cross entropy formula, if .softmax() detected, replace it tf.nn.softmax_cross_entropy_with_logits()",
            "Fix pattern 8 :",
            "in the condition of using @tf.function, add tf.range( and tf.cast() to API parameters",
            "Fix pattern 9 :",
            "no precondition required, if tf.histogram_summary( is detected, replace it with tf.summary.histogram(",
            "Fix pattern 10 :",
            "no precondition required, if tf.scalar_summary( is detected, replace it with tf.summary.scalar(",
            "Fix pattern 11 :",
            "in the condition of using eval() before calling tf.train.start_queue_runners(x), if tf.start_queue_runners( is detected, Insert a call to tf.train start_queue_runners(x) before eval() and after the most recent assignment of variable x",
            ""
        ],
        "detection_result": "Yes",
        "result": "yes",
        "label": ""
    },
    {
        "number": "C:\\@code\\APIMISUSE\\data\\repo_pytorch_test\\3D-ResNets-PyTorch\\utils.py:57",
        "code_before": [
            "",
            "        _, pred = outputs.topk(1, 1, largest=True, sorted=True)",
            "        pred = pred.t()",
            "        correct = pred.eq(targets.view(1, -1))",
            "        n_correct_elems = correct.float().sum().item()",
            "",
            "        return n_correct_elems / batch_size",
            "",
            ""
        ],
        "example": [
            "Fix pattern 1 :",
            "in the condition of using a png file, if .decode_jpeg() detected, replace .decode_jpeg() with .decode_image()",
            "Fix pattern 2 :",
            "in the condition of using a png file, if .decode_jpeg() and .resize( detected, replace .decode_jpeg() with .decode_image() and replace .resize() with .resize_image_with_crop_or_pad(",
            "Fix pattern 3 :",
            "no precondition required, if tf.merge_summary( detected, replace it with tf.summary.merge(",
            "Fix pattern 4 :",
            "no precondition required, if tf.merge_all_summaries( detected, replace it with tf.summary.merge_all(",
            "Fix pattern 5 :",
            "no precondition required, if tf.train.SummaryWriter(detected, replace it with tf.summary.FileWriter(",
            "Fix pattern 6 :",
            "if the model is using binary class mode, if Dense(3, activation=`softmax`) detected, replace it with Dense(2, activation=`softmax`)",
            "Fix pattern 7 :",
            "in the condition of using cross entropy formula, if .softmax() detected, replace it tf.nn.softmax_cross_entropy_with_logits()",
            "Fix pattern 8 :",
            "in the condition of using @tf.function, add tf.range( and tf.cast() to API parameters",
            "Fix pattern 9 :",
            "no precondition required, if tf.histogram_summary( is detected, replace it with tf.summary.histogram(",
            "Fix pattern 10 :",
            "no precondition required, if tf.scalar_summary( is detected, replace it with tf.summary.scalar(",
            "Fix pattern 11 :",
            "in the condition of using eval() before calling tf.train.start_queue_runners(x), if tf.start_queue_runners( is detected, Insert a call to tf.train start_queue_runners(x) before eval() and after the most recent assignment of variable x",
            ""
        ],
        "detection_result": "Yes",
        "result": "yes",
        "label": ""
    },
    {
        "number": "C:\\@code\\APIMISUSE\\data\\repo_pytorch_test\\3D-ResNets-PyTorch\\validation.py:76",
        "code_before": [
            "        dist.all_reduce(loss_count, op=dist.ReduceOp.SUM)",
            "        dist.all_reduce(acc_sum, op=dist.ReduceOp.SUM)",
            "        dist.all_reduce(acc_count, op=dist.ReduceOp.SUM)",
            "",
            "        losses.avg = loss_sum.item() / loss_count.item()",
            "        accuracies.avg = acc_sum.item() / acc_count.item()",
            "",
            "    if logger is not None:",
            ""
        ],
        "example": [
            "Fix pattern 1 :",
            "in the condition of using a png file, if .decode_jpeg() detected, replace .decode_jpeg() with .decode_image()",
            "Fix pattern 2 :",
            "in the condition of using a png file, if .decode_jpeg() and .resize( detected, replace .decode_jpeg() with .decode_image() and replace .resize() with .resize_image_with_crop_or_pad(",
            "Fix pattern 3 :",
            "no precondition required, if tf.merge_summary( detected, replace it with tf.summary.merge(",
            "Fix pattern 4 :",
            "no precondition required, if tf.merge_all_summaries( detected, replace it with tf.summary.merge_all(",
            "Fix pattern 5 :",
            "no precondition required, if tf.train.SummaryWriter(detected, replace it with tf.summary.FileWriter(",
            "Fix pattern 6 :",
            "if the model is using binary class mode, if Dense(3, activation=`softmax`) detected, replace it with Dense(2, activation=`softmax`)",
            "Fix pattern 7 :",
            "in the condition of using cross entropy formula, if .softmax() detected, replace it tf.nn.softmax_cross_entropy_with_logits()",
            "Fix pattern 8 :",
            "in the condition of using @tf.function, add tf.range( and tf.cast() to API parameters",
            "Fix pattern 9 :",
            "no precondition required, if tf.histogram_summary( is detected, replace it with tf.summary.histogram(",
            "Fix pattern 10 :",
            "no precondition required, if tf.scalar_summary( is detected, replace it with tf.summary.scalar(",
            "Fix pattern 11 :",
            "in the condition of using eval() before calling tf.train.start_queue_runners(x), if tf.start_queue_runners( is detected, Insert a call to tf.train start_queue_runners(x) before eval() and after the most recent assignment of variable x",
            ""
        ],
        "detection_result": "Yes",
        "result": "yes",
        "label": ""
    },
    {
        "number": "C:\\@code\\APIMISUSE\\data\\repo_pytorch_test\\3D-ResNets-PyTorch\\datasets\\loader.py:77",
        "code_before": [
            "                        Image.open(io.BytesIO(video_data[i]))",
            "                        for video_data in flow_data",
            "                    ]",
            "                    frame.append(frame[-1])  # add dummy data into third channel",
            "                    video.append(Image.merge('RGB', frame))",
            "",
            "        return video"
        ],
        "example": [
            "Fix pattern 1 :",
            "in the condition of using a png file, if .decode_jpeg() detected, replace .decode_jpeg() with .decode_image()",
            "Fix pattern 2 :",
            "in the condition of using a png file, if .decode_jpeg() and .resize( detected, replace .decode_jpeg() with .decode_image() and replace .resize() with .resize_image_with_crop_or_pad(",
            "Fix pattern 3 :",
            "no precondition required, if tf.merge_summary( detected, replace it with tf.summary.merge(",
            "Fix pattern 4 :",
            "no precondition required, if tf.merge_all_summaries( detected, replace it with tf.summary.merge_all(",
            "Fix pattern 5 :",
            "no precondition required, if tf.train.SummaryWriter(detected, replace it with tf.summary.FileWriter(",
            "Fix pattern 6 :",
            "if the model is using binary class mode, if Dense(3, activation=`softmax`) detected, replace it with Dense(2, activation=`softmax`)",
            "Fix pattern 7 :",
            "in the condition of using cross entropy formula, if .softmax() detected, replace it tf.nn.softmax_cross_entropy_with_logits()",
            "Fix pattern 8 :",
            "in the condition of using @tf.function, add tf.range( and tf.cast() to API parameters",
            "Fix pattern 9 :",
            "no precondition required, if tf.histogram_summary( is detected, replace it with tf.summary.histogram(",
            "Fix pattern 10 :",
            "no precondition required, if tf.scalar_summary( is detected, replace it with tf.summary.scalar(",
            "Fix pattern 11 :",
            "in the condition of using eval() before calling tf.train.start_queue_runners(x), if tf.start_queue_runners( is detected, Insert a call to tf.train start_queue_runners(x) before eval() and after the most recent assignment of variable x",
            ""
        ],
        "detection_result": "Yes",
        "result": "yes",
        "label": ""
    },
    {
        "number": "C:\\@code\\APIMISUSE\\data\\repo_pytorch_test\\3D-ResNets-PyTorch\\util_scripts\\mit_json.py:22",
        "code_before": [
            "",
            "            keys.append(basename)",
            "    else:",
            "        for i in range(data.shape[0]):",
            "            basename = data.iloc[i, 0].split('/')",
            "            assert len(basename) == 2",
            "            basename = Path(basename[1]).stem",
            "",
            ""
        ],
        "example": [
            "Fix pattern 1 :",
            "in the condition of using a png file, if .decode_jpeg() detected, replace .decode_jpeg() with .decode_image()",
            "Fix pattern 2 :",
            "in the condition of using a png file, if .decode_jpeg() and .resize( detected, replace .decode_jpeg() with .decode_image() and replace .resize() with .resize_image_with_crop_or_pad(",
            "Fix pattern 3 :",
            "no precondition required, if tf.merge_summary( detected, replace it with tf.summary.merge(",
            "Fix pattern 4 :",
            "no precondition required, if tf.merge_all_summaries( detected, replace it with tf.summary.merge_all(",
            "Fix pattern 5 :",
            "no precondition required, if tf.train.SummaryWriter(detected, replace it with tf.summary.FileWriter(",
            "Fix pattern 6 :",
            "if the model is using binary class mode, if Dense(3, activation=`softmax`) detected, replace it with Dense(2, activation=`softmax`)",
            "Fix pattern 7 :",
            "in the condition of using cross entropy formula, if .softmax() detected, replace it tf.nn.softmax_cross_entropy_with_logits()",
            "Fix pattern 8 :",
            "in the condition of using @tf.function, add tf.range( and tf.cast() to API parameters",
            "Fix pattern 9 :",
            "no precondition required, if tf.histogram_summary( is detected, replace it with tf.summary.histogram(",
            "Fix pattern 10 :",
            "no precondition required, if tf.scalar_summary( is detected, replace it with tf.summary.scalar(",
            "Fix pattern 11 :",
            "in the condition of using eval() before calling tf.train.start_queue_runners(x), if tf.start_queue_runners( is detected, Insert a call to tf.train start_queue_runners(x) before eval() and after the most recent assignment of variable x",
            ""
        ],
        "detection_result": "Yes",
        "result": "yes",
        "label": ""
    },
    {
        "number": "C:\\@code\\APIMISUSE\\data\\repo_pytorch_test\\3D-ResNets-PyTorch\\util_scripts\\remove_dataparallel.py:18",
        "code_before": [
            "state_dict = x['state_dict']",
            "new_state_dict = OrderedDict()",
            "",
            "for k, v in state_dict.items():",
            "    new_k = '.'.join(k.split('.')[1:])",
            "    new_state_dict[new_k] = v",
            "",
            "x['state_dict'] = new_state_dict",
            ""
        ],
        "example": [
            "Fix pattern 1 :",
            "in the condition of using a png file, if .decode_jpeg() detected, replace .decode_jpeg() with .decode_image()",
            "Fix pattern 2 :",
            "in the condition of using a png file, if .decode_jpeg() and .resize( detected, replace .decode_jpeg() with .decode_image() and replace .resize() with .resize_image_with_crop_or_pad(",
            "Fix pattern 3 :",
            "no precondition required, if tf.merge_summary( detected, replace it with tf.summary.merge(",
            "Fix pattern 4 :",
            "no precondition required, if tf.merge_all_summaries( detected, replace it with tf.summary.merge_all(",
            "Fix pattern 5 :",
            "no precondition required, if tf.train.SummaryWriter(detected, replace it with tf.summary.FileWriter(",
            "Fix pattern 6 :",
            "if the model is using binary class mode, if Dense(3, activation=`softmax`) detected, replace it with Dense(2, activation=`softmax`)",
            "Fix pattern 7 :",
            "in the condition of using cross entropy formula, if .softmax() detected, replace it tf.nn.softmax_cross_entropy_with_logits()",
            "Fix pattern 8 :",
            "in the condition of using @tf.function, add tf.range( and tf.cast() to API parameters",
            "Fix pattern 9 :",
            "no precondition required, if tf.histogram_summary( is detected, replace it with tf.summary.histogram(",
            "Fix pattern 10 :",
            "no precondition required, if tf.scalar_summary( is detected, replace it with tf.summary.scalar(",
            "Fix pattern 11 :",
            "in the condition of using eval() before calling tf.train.start_queue_runners(x), if tf.start_queue_runners( is detected, Insert a call to tf.train start_queue_runners(x) before eval() and after the most recent assignment of variable x",
            ""
        ],
        "detection_result": "Yes",
        "result": "yes",
        "label": ""
    },
    {
        "number": "C:\\@code\\APIMISUSE\\data\\repo_pytorch_test\\accelerate\\benchmarks\\measures_util.py:71",
        "code_before": [
            "",
            "    # GPU mem",
            "    for i in range(torch.cuda.device_count()):",
            "        measures[str(i)] = (torch.cuda.memory_allocated(i) - start_measures[str(i)]) / 2**20",
            "        measures[f\"{i}-peak\"] = (torch.cuda.max_memory_allocated(i) - start_measures[str(i)]) / 2**20",
            "",
            "    return measures",
            "",
            ""
        ],
        "example": [
            "Fix pattern 1 :",
            "in the condition of using a png file, if .decode_jpeg() detected, replace .decode_jpeg() with .decode_image()",
            "Fix pattern 2 :",
            "in the condition of using a png file, if .decode_jpeg() and .resize( detected, replace .decode_jpeg() with .decode_image() and replace .resize() with .resize_image_with_crop_or_pad(",
            "Fix pattern 3 :",
            "no precondition required, if tf.merge_summary( detected, replace it with tf.summary.merge(",
            "Fix pattern 4 :",
            "no precondition required, if tf.merge_all_summaries( detected, replace it with tf.summary.merge_all(",
            "Fix pattern 5 :",
            "no precondition required, if tf.train.SummaryWriter(detected, replace it with tf.summary.FileWriter(",
            "Fix pattern 6 :",
            "if the model is using binary class mode, if Dense(3, activation=`softmax`) detected, replace it with Dense(2, activation=`softmax`)",
            "Fix pattern 7 :",
            "in the condition of using cross entropy formula, if .softmax() detected, replace it tf.nn.softmax_cross_entropy_with_logits()",
            "Fix pattern 8 :",
            "in the condition of using @tf.function, add tf.range( and tf.cast() to API parameters",
            "Fix pattern 9 :",
            "no precondition required, if tf.histogram_summary( is detected, replace it with tf.summary.histogram(",
            "Fix pattern 10 :",
            "no precondition required, if tf.scalar_summary( is detected, replace it with tf.summary.scalar(",
            "Fix pattern 11 :",
            "in the condition of using eval() before calling tf.train.start_queue_runners(x), if tf.start_queue_runners( is detected, Insert a call to tf.train start_queue_runners(x) before eval() and after the most recent assignment of variable x",
            ""
        ],
        "detection_result": "Yes",
        "result": "yes",
        "label": ""
    },
    {
        "number": "C:\\@code\\APIMISUSE\\data\\repo_pytorch_test\\accelerate\\src\\accelerate\\accelerator.py:1033",
        "code_before": [
            "                    dl_even_batches_values.append((dl_idx, dl.batch_sampler.even_batches))",
            "                    dl.batch_sampler.even_batches = even_batches",
            "",
            "                if iterable_dl_seen:",
            "                    warnings.warn(",
            "                        \"Overridding even_batches is only supported for map-style datasets, yet some dataloaders given were iterable\"",
            "                    )",
            "            else:",
            ""
        ],
        "example": [
            "Fix pattern 1 :",
            "in the condition of using a png file, if .decode_jpeg() detected, replace .decode_jpeg() with .decode_image()",
            "Fix pattern 2 :",
            "in the condition of using a png file, if .decode_jpeg() and .resize( detected, replace .decode_jpeg() with .decode_image() and replace .resize() with .resize_image_with_crop_or_pad(",
            "Fix pattern 3 :",
            "no precondition required, if tf.merge_summary( detected, replace it with tf.summary.merge(",
            "Fix pattern 4 :",
            "no precondition required, if tf.merge_all_summaries( detected, replace it with tf.summary.merge_all(",
            "Fix pattern 5 :",
            "no precondition required, if tf.train.SummaryWriter(detected, replace it with tf.summary.FileWriter(",
            "Fix pattern 6 :",
            "if the model is using binary class mode, if Dense(3, activation=`softmax`) detected, replace it with Dense(2, activation=`softmax`)",
            "Fix pattern 7 :",
            "in the condition of using cross entropy formula, if .softmax() detected, replace it tf.nn.softmax_cross_entropy_with_logits()",
            "Fix pattern 8 :",
            "in the condition of using @tf.function, add tf.range( and tf.cast() to API parameters",
            "Fix pattern 9 :",
            "no precondition required, if tf.histogram_summary( is detected, replace it with tf.summary.histogram(",
            "Fix pattern 10 :",
            "no precondition required, if tf.scalar_summary( is detected, replace it with tf.summary.scalar(",
            "Fix pattern 11 :",
            "in the condition of using eval() before calling tf.train.start_queue_runners(x), if tf.start_queue_runners( is detected, Insert a call to tf.train start_queue_runners(x) before eval() and after the most recent assignment of variable x",
            ""
        ],
        "detection_result": "Yes",
        "result": "yes",
        "label": ""
    },
    {
        "number": "C:\\@code\\APIMISUSE\\data\\repo_pytorch_test\\accelerate\\src\\accelerate\\accelerator.py:1331",
        "code_before": [
            "                # if on the first device (GPU 0) we don't care",
            "                if (self.device.index is not None) or (current_device_index != 0):",
            "                    raise ValueError(",
            "                        \"You can't train a model that has been loaded in 8-bit precision on a different device than the one \"",
            "                        \"you're training on. Make sure you loaded the model on the correct device using for example `device_map={'':torch.cuda.current_device()}\"",
            "                        \"you're training on. Make sure you loaded the model on the correct device using for example `device_map={'':torch.cuda.current_device() or device_map={'':torch.xpu.current_device()}\"",
            "                    )",
            "",
            ""
        ],
        "example": [
            "Fix pattern 1 :",
            "in the condition of using a png file, if .decode_jpeg() detected, replace .decode_jpeg() with .decode_image()",
            "Fix pattern 2 :",
            "in the condition of using a png file, if .decode_jpeg() and .resize( detected, replace .decode_jpeg() with .decode_image() and replace .resize() with .resize_image_with_crop_or_pad(",
            "Fix pattern 3 :",
            "no precondition required, if tf.merge_summary( detected, replace it with tf.summary.merge(",
            "Fix pattern 4 :",
            "no precondition required, if tf.merge_all_summaries( detected, replace it with tf.summary.merge_all(",
            "Fix pattern 5 :",
            "no precondition required, if tf.train.SummaryWriter(detected, replace it with tf.summary.FileWriter(",
            "Fix pattern 6 :",
            "if the model is using binary class mode, if Dense(3, activation=`softmax`) detected, replace it with Dense(2, activation=`softmax`)",
            "Fix pattern 7 :",
            "in the condition of using cross entropy formula, if .softmax() detected, replace it tf.nn.softmax_cross_entropy_with_logits()",
            "Fix pattern 8 :",
            "in the condition of using @tf.function, add tf.range( and tf.cast() to API parameters",
            "Fix pattern 9 :",
            "no precondition required, if tf.histogram_summary( is detected, replace it with tf.summary.histogram(",
            "Fix pattern 10 :",
            "no precondition required, if tf.scalar_summary( is detected, replace it with tf.summary.scalar(",
            "Fix pattern 11 :",
            "in the condition of using eval() before calling tf.train.start_queue_runners(x), if tf.start_queue_runners( is detected, Insert a call to tf.train start_queue_runners(x) before eval() and after the most recent assignment of variable x",
            ""
        ],
        "detection_result": "Yes",
        "result": "yes",
        "label": ""
    },
    {
        "number": "C:\\@code\\APIMISUSE\\data\\repo_pytorch_test\\accelerate\\src\\accelerate\\accelerator.py:1878",
        "code_before": [
            "        \"\"\"",
            "        Scales the gradients in accordance to the `GradientAccumulationPlugin` and calls the correct `backward()` based",
            "        on the configuration.",
            "",
            "        Should be used in lieu of `loss.backward()`.",
            "",
            "        Example:",
            "",
            ""
        ],
        "example": [
            "Fix pattern 1 :",
            "in the condition of using a png file, if .decode_jpeg() detected, replace .decode_jpeg() with .decode_image()",
            "Fix pattern 2 :",
            "in the condition of using a png file, if .decode_jpeg() and .resize( detected, replace .decode_jpeg() with .decode_image() and replace .resize() with .resize_image_with_crop_or_pad(",
            "Fix pattern 3 :",
            "no precondition required, if tf.merge_summary( detected, replace it with tf.summary.merge(",
            "Fix pattern 4 :",
            "no precondition required, if tf.merge_all_summaries( detected, replace it with tf.summary.merge_all(",
            "Fix pattern 5 :",
            "no precondition required, if tf.train.SummaryWriter(detected, replace it with tf.summary.FileWriter(",
            "Fix pattern 6 :",
            "if the model is using binary class mode, if Dense(3, activation=`softmax`) detected, replace it with Dense(2, activation=`softmax`)",
            "Fix pattern 7 :",
            "in the condition of using cross entropy formula, if .softmax() detected, replace it tf.nn.softmax_cross_entropy_with_logits()",
            "Fix pattern 8 :",
            "in the condition of using @tf.function, add tf.range( and tf.cast() to API parameters",
            "Fix pattern 9 :",
            "no precondition required, if tf.histogram_summary( is detected, replace it with tf.summary.histogram(",
            "Fix pattern 10 :",
            "no precondition required, if tf.scalar_summary( is detected, replace it with tf.summary.scalar(",
            "Fix pattern 11 :",
            "in the condition of using eval() before calling tf.train.start_queue_runners(x), if tf.start_queue_runners( is detected, Insert a call to tf.train start_queue_runners(x) before eval() and after the most recent assignment of variable x",
            ""
        ],
        "detection_result": "Yes",
        "result": "yes",
        "label": ""
    },
    {
        "number": "C:\\@code\\APIMISUSE\\data\\repo_pytorch_test\\accelerate\\src\\accelerate\\accelerator.py:1957",
        "code_before": [
            "        >>> for input, target in dataloader:",
            "        ...     optimizer.zero_grad()",
            "        ...     output = model(input)",
            "        ...     loss = loss_func(output, target)",
            "        ...     accelerator.backward(loss)",
            "        ...     if accelerator.sync_gradients:",
            "        ...         accelerator.clip_grad_norm_(model.parameters(), max_grad_norm)",
            "        ...     optimizer.step()",
            ""
        ],
        "example": [
            "Fix pattern 1 :",
            "in the condition of using a png file, if .decode_jpeg() detected, replace .decode_jpeg() with .decode_image()",
            "Fix pattern 2 :",
            "in the condition of using a png file, if .decode_jpeg() and .resize( detected, replace .decode_jpeg() with .decode_image() and replace .resize() with .resize_image_with_crop_or_pad(",
            "Fix pattern 3 :",
            "no precondition required, if tf.merge_summary( detected, replace it with tf.summary.merge(",
            "Fix pattern 4 :",
            "no precondition required, if tf.merge_all_summaries( detected, replace it with tf.summary.merge_all(",
            "Fix pattern 5 :",
            "no precondition required, if tf.train.SummaryWriter(detected, replace it with tf.summary.FileWriter(",
            "Fix pattern 6 :",
            "if the model is using binary class mode, if Dense(3, activation=`softmax`) detected, replace it with Dense(2, activation=`softmax`)",
            "Fix pattern 7 :",
            "in the condition of using cross entropy formula, if .softmax() detected, replace it tf.nn.softmax_cross_entropy_with_logits()",
            "Fix pattern 8 :",
            "in the condition of using @tf.function, add tf.range( and tf.cast() to API parameters",
            "Fix pattern 9 :",
            "no precondition required, if tf.histogram_summary( is detected, replace it with tf.summary.histogram(",
            "Fix pattern 10 :",
            "no precondition required, if tf.scalar_summary( is detected, replace it with tf.summary.scalar(",
            "Fix pattern 11 :",
            "in the condition of using eval() before calling tf.train.start_queue_runners(x), if tf.start_queue_runners( is detected, Insert a call to tf.train start_queue_runners(x) before eval() and after the most recent assignment of variable x",
            ""
        ],
        "detection_result": "Yes",
        "result": "yes",
        "label": ""
    },
    {
        "number": "C:\\@code\\APIMISUSE\\data\\repo_pytorch_test\\accelerate\\src\\accelerate\\tracking.py:189",
        "code_before": [
            "    @on_main_process",
            "    def __init__(self, run_name: str, logging_dir: Union[str, os.PathLike], **kwargs):",
            "        super().__init__()",
            "        self.run_name = run_name",
            "        self.logging_dir = os.path.join(logging_dir, run_name)",
            "        self.writer = tensorboard.SummaryWriter(self.logging_dir, **kwargs)",
            "        logger.debug(f\"Initialized TensorBoard project {self.run_name} logging to {self.logging_dir}\")",
            "        logger.debug(",
            ""
        ],
        "example": [
            "Fix pattern 1 :",
            "in the condition of using a png file, if .decode_jpeg() detected, replace .decode_jpeg() with .decode_image()",
            "Fix pattern 2 :",
            "in the condition of using a png file, if .decode_jpeg() and .resize( detected, replace .decode_jpeg() with .decode_image() and replace .resize() with .resize_image_with_crop_or_pad(",
            "Fix pattern 3 :",
            "no precondition required, if tf.merge_summary( detected, replace it with tf.summary.merge(",
            "Fix pattern 4 :",
            "no precondition required, if tf.merge_all_summaries( detected, replace it with tf.summary.merge_all(",
            "Fix pattern 5 :",
            "no precondition required, if tf.train.SummaryWriter(detected, replace it with tf.summary.FileWriter(",
            "Fix pattern 6 :",
            "if the model is using binary class mode, if Dense(3, activation=`softmax`) detected, replace it with Dense(2, activation=`softmax`)",
            "Fix pattern 7 :",
            "in the condition of using cross entropy formula, if .softmax() detected, replace it tf.nn.softmax_cross_entropy_with_logits()",
            "Fix pattern 8 :",
            "in the condition of using @tf.function, add tf.range( and tf.cast() to API parameters",
            "Fix pattern 9 :",
            "no precondition required, if tf.histogram_summary( is detected, replace it with tf.summary.histogram(",
            "Fix pattern 10 :",
            "no precondition required, if tf.scalar_summary( is detected, replace it with tf.summary.scalar(",
            "Fix pattern 11 :",
            "in the condition of using eval() before calling tf.train.start_queue_runners(x), if tf.start_queue_runners( is detected, Insert a call to tf.train start_queue_runners(x) before eval() and after the most recent assignment of variable x",
            ""
        ],
        "detection_result": "Yes",
        "result": "yes",
        "label": ""
    },
    {
        "number": "C:\\@code\\APIMISUSE\\data\\repo_pytorch_test\\accelerate\\src\\accelerate\\tracking.py:247",
        "code_before": [
            "            elif isinstance(v, str):",
            "                self.writer.add_text(k, v, global_step=step, **kwargs)",
            "            elif isinstance(v, dict):",
            "                self.writer.add_scalars(k, v, global_step=step, **kwargs)",
            "        self.writer.flush()",
            "        logger.debug(\"Successfully logged to TensorBoard\")",
            "",
            "    @on_main_process",
            ""
        ],
        "example": [
            "Fix pattern 1 :",
            "in the condition of using a png file, if .decode_jpeg() detected, replace .decode_jpeg() with .decode_image()",
            "Fix pattern 2 :",
            "in the condition of using a png file, if .decode_jpeg() and .resize( detected, replace .decode_jpeg() with .decode_image() and replace .resize() with .resize_image_with_crop_or_pad(",
            "Fix pattern 3 :",
            "no precondition required, if tf.merge_summary( detected, replace it with tf.summary.merge(",
            "Fix pattern 4 :",
            "no precondition required, if tf.merge_all_summaries( detected, replace it with tf.summary.merge_all(",
            "Fix pattern 5 :",
            "no precondition required, if tf.train.SummaryWriter(detected, replace it with tf.summary.FileWriter(",
            "Fix pattern 6 :",
            "if the model is using binary class mode, if Dense(3, activation=`softmax`) detected, replace it with Dense(2, activation=`softmax`)",
            "Fix pattern 7 :",
            "in the condition of using cross entropy formula, if .softmax() detected, replace it tf.nn.softmax_cross_entropy_with_logits()",
            "Fix pattern 8 :",
            "in the condition of using @tf.function, add tf.range( and tf.cast() to API parameters",
            "Fix pattern 9 :",
            "no precondition required, if tf.histogram_summary( is detected, replace it with tf.summary.histogram(",
            "Fix pattern 10 :",
            "no precondition required, if tf.scalar_summary( is detected, replace it with tf.summary.scalar(",
            "Fix pattern 11 :",
            "in the condition of using eval() before calling tf.train.start_queue_runners(x), if tf.start_queue_runners( is detected, Insert a call to tf.train start_queue_runners(x) before eval() and after the most recent assignment of variable x",
            ""
        ],
        "detection_result": "Yes",
        "result": "yes",
        "label": ""
    },
    {
        "number": "C:\\@code\\APIMISUSE\\data\\repo_pytorch_test\\accelerate\\src\\accelerate\\tracking.py:349",
        "code_before": [
            "            kwargs:",
            "                Additional key word arguments passed along to the `wandb.log` method.",
            "        \"\"\"",
            "        for k, v in values.items():",
            "            self.log({k: [wandb.Image(image) for image in v]}, step=step, **kwargs)",
            "        logger.debug(\"Successfully logged images to WandB\")",
            "",
            "    @on_main_process",
            ""
        ],
        "example": [
            "Fix pattern 1 :",
            "in the condition of using a png file, if .decode_jpeg() detected, replace .decode_jpeg() with .decode_image()",
            "Fix pattern 2 :",
            "in the condition of using a png file, if .decode_jpeg() and .resize( detected, replace .decode_jpeg() with .decode_image() and replace .resize() with .resize_image_with_crop_or_pad(",
            "Fix pattern 3 :",
            "no precondition required, if tf.merge_summary( detected, replace it with tf.summary.merge(",
            "Fix pattern 4 :",
            "no precondition required, if tf.merge_all_summaries( detected, replace it with tf.summary.merge_all(",
            "Fix pattern 5 :",
            "no precondition required, if tf.train.SummaryWriter(detected, replace it with tf.summary.FileWriter(",
            "Fix pattern 6 :",
            "if the model is using binary class mode, if Dense(3, activation=`softmax`) detected, replace it with Dense(2, activation=`softmax`)",
            "Fix pattern 7 :",
            "in the condition of using cross entropy formula, if .softmax() detected, replace it tf.nn.softmax_cross_entropy_with_logits()",
            "Fix pattern 8 :",
            "in the condition of using @tf.function, add tf.range( and tf.cast() to API parameters",
            "Fix pattern 9 :",
            "no precondition required, if tf.histogram_summary( is detected, replace it with tf.summary.histogram(",
            "Fix pattern 10 :",
            "no precondition required, if tf.scalar_summary( is detected, replace it with tf.summary.scalar(",
            "Fix pattern 11 :",
            "in the condition of using eval() before calling tf.train.start_queue_runners(x), if tf.start_queue_runners( is detected, Insert a call to tf.train start_queue_runners(x) before eval() and after the most recent assignment of variable x",
            ""
        ],
        "detection_result": "Yes",
        "result": "yes",
        "label": ""
    },
    {
        "number": "C:\\@code\\APIMISUSE\\data\\repo_pytorch_test\\accelerate\\src\\accelerate\\commands\\tpu.py:146",
        "code_before": [
            "        \"--worker\",",
            "        \"all\",",
            "    ]",
            "    if args.debug:",
            "        print(f\"Running {' '.join(cmd)}\")",
            "        return",
            "    subprocess.run(cmd)",
            "    print(\"Successfully setup pod.\")",
            ""
        ],
        "example": [
            "Fix pattern 1 :",
            "in the condition of using a png file, if .decode_jpeg() detected, replace .decode_jpeg() with .decode_image()",
            "Fix pattern 2 :",
            "in the condition of using a png file, if .decode_jpeg() and .resize( detected, replace .decode_jpeg() with .decode_image() and replace .resize() with .resize_image_with_crop_or_pad(",
            "Fix pattern 3 :",
            "no precondition required, if tf.merge_summary( detected, replace it with tf.summary.merge(",
            "Fix pattern 4 :",
            "no precondition required, if tf.merge_all_summaries( detected, replace it with tf.summary.merge_all(",
            "Fix pattern 5 :",
            "no precondition required, if tf.train.SummaryWriter(detected, replace it with tf.summary.FileWriter(",
            "Fix pattern 6 :",
            "if the model is using binary class mode, if Dense(3, activation=`softmax`) detected, replace it with Dense(2, activation=`softmax`)",
            "Fix pattern 7 :",
            "in the condition of using cross entropy formula, if .softmax() detected, replace it tf.nn.softmax_cross_entropy_with_logits()",
            "Fix pattern 8 :",
            "in the condition of using @tf.function, add tf.range( and tf.cast() to API parameters",
            "Fix pattern 9 :",
            "no precondition required, if tf.histogram_summary( is detected, replace it with tf.summary.histogram(",
            "Fix pattern 10 :",
            "no precondition required, if tf.scalar_summary( is detected, replace it with tf.summary.scalar(",
            "Fix pattern 11 :",
            "in the condition of using eval() before calling tf.train.start_queue_runners(x), if tf.start_queue_runners( is detected, Insert a call to tf.train start_queue_runners(x) before eval() and after the most recent assignment of variable x",
            ""
        ],
        "detection_result": "Yes",
        "result": "yes",
        "label": ""
    },
    {
        "number": "C:\\@code\\APIMISUSE\\data\\repo_pytorch_test\\accelerate\\src\\accelerate\\commands\\menu\\selection_menu.py:131",
        "code_before": [
            "        with cursor.hide():",
            "            while True:",
            "                if in_colab:",
            "                    try:",
            "                        choice = int(builtins.input())",
            "                    except ValueError:",
            "                        choice = default_choice",
            "                else:",
            ""
        ],
        "example": [
            "Fix pattern 1 :",
            "in the condition of using a png file, if .decode_jpeg() detected, replace .decode_jpeg() with .decode_image()",
            "Fix pattern 2 :",
            "in the condition of using a png file, if .decode_jpeg() and .resize( detected, replace .decode_jpeg() with .decode_image() and replace .resize() with .resize_image_with_crop_or_pad(",
            "Fix pattern 3 :",
            "no precondition required, if tf.merge_summary( detected, replace it with tf.summary.merge(",
            "Fix pattern 4 :",
            "no precondition required, if tf.merge_all_summaries( detected, replace it with tf.summary.merge_all(",
            "Fix pattern 5 :",
            "no precondition required, if tf.train.SummaryWriter(detected, replace it with tf.summary.FileWriter(",
            "Fix pattern 6 :",
            "if the model is using binary class mode, if Dense(3, activation=`softmax`) detected, replace it with Dense(2, activation=`softmax`)",
            "Fix pattern 7 :",
            "in the condition of using cross entropy formula, if .softmax() detected, replace it tf.nn.softmax_cross_entropy_with_logits()",
            "Fix pattern 8 :",
            "in the condition of using @tf.function, add tf.range( and tf.cast() to API parameters",
            "Fix pattern 9 :",
            "no precondition required, if tf.histogram_summary( is detected, replace it with tf.summary.histogram(",
            "Fix pattern 10 :",
            "no precondition required, if tf.scalar_summary( is detected, replace it with tf.summary.scalar(",
            "Fix pattern 11 :",
            "in the condition of using eval() before calling tf.train.start_queue_runners(x), if tf.start_queue_runners( is detected, Insert a call to tf.train start_queue_runners(x) before eval() and after the most recent assignment of variable x",
            ""
        ],
        "detection_result": "Yes",
        "result": "yes",
        "label": ""
    },
    {
        "number": "C:\\@code\\APIMISUSE\\data\\repo_pytorch_test\\accelerate\\src\\accelerate\\utils\\modeling.py:661",
        "code_before": [
            "        device_map[module_name] = values[0]",
            "",
            "    # Recurse over the children",
            "    children_modules = [k for k in device_map.keys() if k.startswith(prefix) and len(k) > len(module_name)]",
            "    idx = len(module_name.split(\".\")) + 1 if len(module_name) > 0 else 1",
            "    children_modules = set(\".\".join(k.split(\".\")[:idx]) for k in children_modules)",
            "    for child in children_modules:",
            "        clean_device_map(device_map, module_name=child)",
            ""
        ],
        "example": [
            "Fix pattern 1 :",
            "in the condition of using a png file, if .decode_jpeg() detected, replace .decode_jpeg() with .decode_image()",
            "Fix pattern 2 :",
            "in the condition of using a png file, if .decode_jpeg() and .resize( detected, replace .decode_jpeg() with .decode_image() and replace .resize() with .resize_image_with_crop_or_pad(",
            "Fix pattern 3 :",
            "no precondition required, if tf.merge_summary( detected, replace it with tf.summary.merge(",
            "Fix pattern 4 :",
            "no precondition required, if tf.merge_all_summaries( detected, replace it with tf.summary.merge_all(",
            "Fix pattern 5 :",
            "no precondition required, if tf.train.SummaryWriter(detected, replace it with tf.summary.FileWriter(",
            "Fix pattern 6 :",
            "if the model is using binary class mode, if Dense(3, activation=`softmax`) detected, replace it with Dense(2, activation=`softmax`)",
            "Fix pattern 7 :",
            "in the condition of using cross entropy formula, if .softmax() detected, replace it tf.nn.softmax_cross_entropy_with_logits()",
            "Fix pattern 8 :",
            "in the condition of using @tf.function, add tf.range( and tf.cast() to API parameters",
            "Fix pattern 9 :",
            "no precondition required, if tf.histogram_summary( is detected, replace it with tf.summary.histogram(",
            "Fix pattern 10 :",
            "no precondition required, if tf.scalar_summary( is detected, replace it with tf.summary.scalar(",
            "Fix pattern 11 :",
            "in the condition of using eval() before calling tf.train.start_queue_runners(x), if tf.start_queue_runners( is detected, Insert a call to tf.train start_queue_runners(x) before eval() and after the most recent assignment of variable x",
            ""
        ],
        "detection_result": "Yes",
        "result": "yes",
        "label": ""
    },
    {
        "number": "C:\\@code\\APIMISUSE\\data\\repo_pytorch_test\\accelerate\\src\\accelerate\\utils\\other.py:104",
        "code_before": [
            "",
            "",
            "def save(obj, f):",
            "    \"\"\"",
            "    Save the data to disk. Use in place of `torch.save()`.",
            "",
            "    Args:",
            "        obj: The data to save",
            ""
        ],
        "example": [
            "Fix pattern 1 :",
            "in the condition of using a png file, if .decode_jpeg() detected, replace .decode_jpeg() with .decode_image()",
            "Fix pattern 2 :",
            "in the condition of using a png file, if .decode_jpeg() and .resize( detected, replace .decode_jpeg() with .decode_image() and replace .resize() with .resize_image_with_crop_or_pad(",
            "Fix pattern 3 :",
            "no precondition required, if tf.merge_summary( detected, replace it with tf.summary.merge(",
            "Fix pattern 4 :",
            "no precondition required, if tf.merge_all_summaries( detected, replace it with tf.summary.merge_all(",
            "Fix pattern 5 :",
            "no precondition required, if tf.train.SummaryWriter(detected, replace it with tf.summary.FileWriter(",
            "Fix pattern 6 :",
            "if the model is using binary class mode, if Dense(3, activation=`softmax`) detected, replace it with Dense(2, activation=`softmax`)",
            "Fix pattern 7 :",
            "in the condition of using cross entropy formula, if .softmax() detected, replace it tf.nn.softmax_cross_entropy_with_logits()",
            "Fix pattern 8 :",
            "in the condition of using @tf.function, add tf.range( and tf.cast() to API parameters",
            "Fix pattern 9 :",
            "no precondition required, if tf.histogram_summary( is detected, replace it with tf.summary.histogram(",
            "Fix pattern 10 :",
            "no precondition required, if tf.scalar_summary( is detected, replace it with tf.summary.scalar(",
            "Fix pattern 11 :",
            "in the condition of using eval() before calling tf.train.start_queue_runners(x), if tf.start_queue_runners( is detected, Insert a call to tf.train start_queue_runners(x) before eval() and after the most recent assignment of variable x",
            ""
        ],
        "detection_result": "Yes",
        "result": "yes",
        "label": ""
    },
    {
        "number": "C:\\@code\\APIMISUSE\\data\\repo_pytorch_test\\accelerate\\utils\\log_reports.py:48",
        "code_before": [
            "                if line.get(\"duration\", None) is not None:",
            "                    duration = f'{line[\"duration\"]:.4f}'",
            "                    if line.get(\"outcome\", \"\") == \"failed\":",
            "                        section_num_failed += 1",
            "                        failed.append([test, duration, log.name.split(\"_\")[0]])",
            "                        total_num_failed += 1",
            "    group_info.append([str(log), section_num_failed, failed])",
            "    failed = []",
            ""
        ],
        "example": [
            "Fix pattern 1 :",
            "in the condition of using a png file, if .decode_jpeg() detected, replace .decode_jpeg() with .decode_image()",
            "Fix pattern 2 :",
            "in the condition of using a png file, if .decode_jpeg() and .resize( detected, replace .decode_jpeg() with .decode_image() and replace .resize() with .resize_image_with_crop_or_pad(",
            "Fix pattern 3 :",
            "no precondition required, if tf.merge_summary( detected, replace it with tf.summary.merge(",
            "Fix pattern 4 :",
            "no precondition required, if tf.merge_all_summaries( detected, replace it with tf.summary.merge_all(",
            "Fix pattern 5 :",
            "no precondition required, if tf.train.SummaryWriter(detected, replace it with tf.summary.FileWriter(",
            "Fix pattern 6 :",
            "if the model is using binary class mode, if Dense(3, activation=`softmax`) detected, replace it with Dense(2, activation=`softmax`)",
            "Fix pattern 7 :",
            "in the condition of using cross entropy formula, if .softmax() detected, replace it tf.nn.softmax_cross_entropy_with_logits()",
            "Fix pattern 8 :",
            "in the condition of using @tf.function, add tf.range( and tf.cast() to API parameters",
            "Fix pattern 9 :",
            "no precondition required, if tf.histogram_summary( is detected, replace it with tf.summary.histogram(",
            "Fix pattern 10 :",
            "no precondition required, if tf.scalar_summary( is detected, replace it with tf.summary.scalar(",
            "Fix pattern 11 :",
            "in the condition of using eval() before calling tf.train.start_queue_runners(x), if tf.start_queue_runners( is detected, Insert a call to tf.train start_queue_runners(x) before eval() and after the most recent assignment of variable x",
            ""
        ],
        "detection_result": "Yes",
        "result": "yes",
        "label": ""
    },
    {
        "number": "C:\\@code\\APIMISUSE\\data\\repo_pytorch_test\\ALAE\\net.py:28",
        "code_before": [
            "from registry import *",
            "",
            "",
            "def pixel_norm(x, epsilon=1e-8):",
            "    return x * torch.rsqrt(torch.mean(x.pow(2.0), dim=1, keepdim=True) + epsilon)",
            "",
            "",
            "def style_mod(x, style):",
            ""
        ],
        "example": [
            "Fix pattern 1 :",
            "in the condition of using a png file, if .decode_jpeg() detected, replace .decode_jpeg() with .decode_image()",
            "Fix pattern 2 :",
            "in the condition of using a png file, if .decode_jpeg() and .resize( detected, replace .decode_jpeg() with .decode_image() and replace .resize() with .resize_image_with_crop_or_pad(",
            "Fix pattern 3 :",
            "no precondition required, if tf.merge_summary( detected, replace it with tf.summary.merge(",
            "Fix pattern 4 :",
            "no precondition required, if tf.merge_all_summaries( detected, replace it with tf.summary.merge_all(",
            "Fix pattern 5 :",
            "no precondition required, if tf.train.SummaryWriter(detected, replace it with tf.summary.FileWriter(",
            "Fix pattern 6 :",
            "if the model is using binary class mode, if Dense(3, activation=`softmax`) detected, replace it with Dense(2, activation=`softmax`)",
            "Fix pattern 7 :",
            "in the condition of using cross entropy formula, if .softmax() detected, replace it tf.nn.softmax_cross_entropy_with_logits()",
            "Fix pattern 8 :",
            "in the condition of using @tf.function, add tf.range( and tf.cast() to API parameters",
            "Fix pattern 9 :",
            "no precondition required, if tf.histogram_summary( is detected, replace it with tf.summary.histogram(",
            "Fix pattern 10 :",
            "no precondition required, if tf.scalar_summary( is detected, replace it with tf.summary.scalar(",
            "Fix pattern 11 :",
            "in the condition of using eval() before calling tf.train.start_queue_runners(x), if tf.start_queue_runners( is detected, Insert a call to tf.train start_queue_runners(x) before eval() and after the most recent assignment of variable x",
            ""
        ],
        "detection_result": "Yes",
        "result": "yes",
        "label": ""
    },
    {
        "number": "C:\\@code\\APIMISUSE\\data\\repo_pytorch_test\\ALAE\\dataset_preparation\\prepare_celeba_tfrecords.py:40",
        "code_before": [
            "        directory = os.path.dirname(cfg.DATASET.PATH_TEST)",
            "",
            "    with open(\"/data/datasets/CelebA/Eval/list_eval_partition.txt\") as f:",
            "        lineList = f.readlines()",
            "    lineList = [x[:-1].split(' ') for x in lineList]",
            "",
            "    split_map = {}",
            "    for x in lineList:",
            ""
        ],
        "example": [
            "Fix pattern 1 :",
            "in the condition of using a png file, if .decode_jpeg() detected, replace .decode_jpeg() with .decode_image()",
            "Fix pattern 2 :",
            "in the condition of using a png file, if .decode_jpeg() and .resize( detected, replace .decode_jpeg() with .decode_image() and replace .resize() with .resize_image_with_crop_or_pad(",
            "Fix pattern 3 :",
            "no precondition required, if tf.merge_summary( detected, replace it with tf.summary.merge(",
            "Fix pattern 4 :",
            "no precondition required, if tf.merge_all_summaries( detected, replace it with tf.summary.merge_all(",
            "Fix pattern 5 :",
            "no precondition required, if tf.train.SummaryWriter(detected, replace it with tf.summary.FileWriter(",
            "Fix pattern 6 :",
            "if the model is using binary class mode, if Dense(3, activation=`softmax`) detected, replace it with Dense(2, activation=`softmax`)",
            "Fix pattern 7 :",
            "in the condition of using cross entropy formula, if .softmax() detected, replace it tf.nn.softmax_cross_entropy_with_logits()",
            "Fix pattern 8 :",
            "in the condition of using @tf.function, add tf.range( and tf.cast() to API parameters",
            "Fix pattern 9 :",
            "no precondition required, if tf.histogram_summary( is detected, replace it with tf.summary.histogram(",
            "Fix pattern 10 :",
            "no precondition required, if tf.scalar_summary( is detected, replace it with tf.summary.scalar(",
            "Fix pattern 11 :",
            "in the condition of using eval() before calling tf.train.start_queue_runners(x), if tf.start_queue_runners( is detected, Insert a call to tf.train start_queue_runners(x) before eval() and after the most recent assignment of variable x",
            ""
        ],
        "detection_result": "Yes",
        "result": "yes",
        "label": ""
    },
    {
        "number": "C:\\@code\\APIMISUSE\\data\\repo_pytorch_test\\ALAE\\dataset_preparation\\prepare_imagenet.py:123",
        "code_before": [
            "        print(\"%d - %s\" % (i, c))",
            "",
            "    wnid_to_indx = dict([(v, k - 1) for k, v in idx_to_wnid.items()])",
            "",
            "    torch.save((wnid_to_classes, val_wnids), os.path.join(\"\", \"meta\"))",
            "",
            "    train_root = \"/data/datasets/ImageNet_bak/raw-data/train\"",
            "    validation_root = \"/data/datasets/ImageNet_bak/raw-data/validation\"",
            ""
        ],
        "example": [
            "Fix pattern 1 :",
            "in the condition of using a png file, if .decode_jpeg() detected, replace .decode_jpeg() with .decode_image()",
            "Fix pattern 2 :",
            "in the condition of using a png file, if .decode_jpeg() and .resize( detected, replace .decode_jpeg() with .decode_image() and replace .resize() with .resize_image_with_crop_or_pad(",
            "Fix pattern 3 :",
            "no precondition required, if tf.merge_summary( detected, replace it with tf.summary.merge(",
            "Fix pattern 4 :",
            "no precondition required, if tf.merge_all_summaries( detected, replace it with tf.summary.merge_all(",
            "Fix pattern 5 :",
            "no precondition required, if tf.train.SummaryWriter(detected, replace it with tf.summary.FileWriter(",
            "Fix pattern 6 :",
            "if the model is using binary class mode, if Dense(3, activation=`softmax`) detected, replace it with Dense(2, activation=`softmax`)",
            "Fix pattern 7 :",
            "in the condition of using cross entropy formula, if .softmax() detected, replace it tf.nn.softmax_cross_entropy_with_logits()",
            "Fix pattern 8 :",
            "in the condition of using @tf.function, add tf.range( and tf.cast() to API parameters",
            "Fix pattern 9 :",
            "no precondition required, if tf.histogram_summary( is detected, replace it with tf.summary.histogram(",
            "Fix pattern 10 :",
            "no precondition required, if tf.scalar_summary( is detected, replace it with tf.summary.scalar(",
            "Fix pattern 11 :",
            "in the condition of using eval() before calling tf.train.start_queue_runners(x), if tf.start_queue_runners( is detected, Insert a call to tf.train start_queue_runners(x) before eval() and after the most recent assignment of variable x",
            ""
        ],
        "detection_result": "Yes",
        "result": "yes",
        "label": ""
    },
    {
        "number": "C:\\@code\\APIMISUSE\\data\\repo_pytorch_test\\ALAE\\dataset_preparation\\prepare_imagenet.py:129",
        "code_before": [
            "    train_root = \"/data/datasets/ImageNet_bak/raw-data/train\"",
            "    validation_root = \"/data/datasets/ImageNet_bak/raw-data/validation\"",
            "",
            "    ###",
            "    logger.info(\"Savingexamples\")",
            "",
            "    path = 'dataset_samples/imagenet256x256'",
            "    os.makedirs(path, exist_ok=True)",
            ""
        ],
        "example": [
            "Fix pattern 1 :",
            "in the condition of using a png file, if .decode_jpeg() detected, replace .decode_jpeg() with .decode_image()",
            "Fix pattern 2 :",
            "in the condition of using a png file, if .decode_jpeg() and .resize( detected, replace .decode_jpeg() with .decode_image() and replace .resize() with .resize_image_with_crop_or_pad(",
            "Fix pattern 3 :",
            "no precondition required, if tf.merge_summary( detected, replace it with tf.summary.merge(",
            "Fix pattern 4 :",
            "no precondition required, if tf.merge_all_summaries( detected, replace it with tf.summary.merge_all(",
            "Fix pattern 5 :",
            "no precondition required, if tf.train.SummaryWriter(detected, replace it with tf.summary.FileWriter(",
            "Fix pattern 6 :",
            "if the model is using binary class mode, if Dense(3, activation=`softmax`) detected, replace it with Dense(2, activation=`softmax`)",
            "Fix pattern 7 :",
            "in the condition of using cross entropy formula, if .softmax() detected, replace it tf.nn.softmax_cross_entropy_with_logits()",
            "Fix pattern 8 :",
            "in the condition of using @tf.function, add tf.range( and tf.cast() to API parameters",
            "Fix pattern 9 :",
            "no precondition required, if tf.histogram_summary( is detected, replace it with tf.summary.histogram(",
            "Fix pattern 10 :",
            "no precondition required, if tf.scalar_summary( is detected, replace it with tf.summary.scalar(",
            "Fix pattern 11 :",
            "in the condition of using eval() before calling tf.train.start_queue_runners(x), if tf.start_queue_runners( is detected, Insert a call to tf.train start_queue_runners(x) before eval() and after the most recent assignment of variable x",
            ""
        ],
        "detection_result": "Yes",
        "result": "yes",
        "label": ""
    },
    {
        "number": "C:\\@code\\APIMISUSE\\data\\repo_pytorch_test\\ALAE\\dataset_preparation\\prepare_imagenet.py:176",
        "code_before": [
            "            thread.start()",
            "            threads.append(thread)",
            "",
            "        for i in range(folds):",
            "            threads[i].join()",
            "    if False:",
            "        random.seed(0)",
            "",
            ""
        ],
        "example": [
            "Fix pattern 1 :",
            "in the condition of using a png file, if .decode_jpeg() detected, replace .decode_jpeg() with .decode_image()",
            "Fix pattern 2 :",
            "in the condition of using a png file, if .decode_jpeg() and .resize( detected, replace .decode_jpeg() with .decode_image() and replace .resize() with .resize_image_with_crop_or_pad(",
            "Fix pattern 3 :",
            "no precondition required, if tf.merge_summary( detected, replace it with tf.summary.merge(",
            "Fix pattern 4 :",
            "no precondition required, if tf.merge_all_summaries( detected, replace it with tf.summary.merge_all(",
            "Fix pattern 5 :",
            "no precondition required, if tf.train.SummaryWriter(detected, replace it with tf.summary.FileWriter(",
            "Fix pattern 6 :",
            "if the model is using binary class mode, if Dense(3, activation=`softmax`) detected, replace it with Dense(2, activation=`softmax`)",
            "Fix pattern 7 :",
            "in the condition of using cross entropy formula, if .softmax() detected, replace it tf.nn.softmax_cross_entropy_with_logits()",
            "Fix pattern 8 :",
            "in the condition of using @tf.function, add tf.range( and tf.cast() to API parameters",
            "Fix pattern 9 :",
            "no precondition required, if tf.histogram_summary( is detected, replace it with tf.summary.histogram(",
            "Fix pattern 10 :",
            "no precondition required, if tf.scalar_summary( is detected, replace it with tf.summary.scalar(",
            "Fix pattern 11 :",
            "in the condition of using eval() before calling tf.train.start_queue_runners(x), if tf.start_queue_runners( is detected, Insert a call to tf.train start_queue_runners(x) before eval() and after the most recent assignment of variable x",
            ""
        ],
        "detection_result": "Yes",
        "result": "yes",
        "label": ""
    },
    {
        "number": "C:\\@code\\APIMISUSE\\data\\repo_pytorch_test\\ALAE\\dataset_preparation\\prepare_mnist_tfrecords.py:101",
        "code_before": [
            "                    ex = tf.train.Example(features=tf.train.Features(feature={",
            "                        'shape': tf.train.Feature(int64_list=tf.train.Int64List(value=image.shape)),",
            "                        'label': tf.train.Feature(int64_list=tf.train.Int64List(value=[label])),",
            "                        'data': tf.train.Feature(bytes_list=tf.train.BytesList(value=[image.tostring()]))}))",
            "                    tfr_writer.write(ex.SerializeToString())",
            "                tfr_writer.close()",
            "",
            "                images = images_down",
            ""
        ],
        "example": [
            "Fix pattern 1 :",
            "in the condition of using a png file, if .decode_jpeg() detected, replace .decode_jpeg() with .decode_image()",
            "Fix pattern 2 :",
            "in the condition of using a png file, if .decode_jpeg() and .resize( detected, replace .decode_jpeg() with .decode_image() and replace .resize() with .resize_image_with_crop_or_pad(",
            "Fix pattern 3 :",
            "no precondition required, if tf.merge_summary( detected, replace it with tf.summary.merge(",
            "Fix pattern 4 :",
            "no precondition required, if tf.merge_all_summaries( detected, replace it with tf.summary.merge_all(",
            "Fix pattern 5 :",
            "no precondition required, if tf.train.SummaryWriter(detected, replace it with tf.summary.FileWriter(",
            "Fix pattern 6 :",
            "if the model is using binary class mode, if Dense(3, activation=`softmax`) detected, replace it with Dense(2, activation=`softmax`)",
            "Fix pattern 7 :",
            "in the condition of using cross entropy formula, if .softmax() detected, replace it tf.nn.softmax_cross_entropy_with_logits()",
            "Fix pattern 8 :",
            "in the condition of using @tf.function, add tf.range( and tf.cast() to API parameters",
            "Fix pattern 9 :",
            "no precondition required, if tf.histogram_summary( is detected, replace it with tf.summary.histogram(",
            "Fix pattern 10 :",
            "no precondition required, if tf.scalar_summary( is detected, replace it with tf.summary.scalar(",
            "Fix pattern 11 :",
            "in the condition of using eval() before calling tf.train.start_queue_runners(x), if tf.start_queue_runners( is detected, Insert a call to tf.train start_queue_runners(x) before eval() and after the most recent assignment of variable x",
            ""
        ],
        "detection_result": "Yes",
        "result": "yes",
        "label": ""
    },
    {
        "number": "C:\\@code\\APIMISUSE\\data\\repo_pytorch_test\\ALAE\\dataset_preparation\\prepare_svhn_tfrecords.py:154",
        "code_before": [
            "    svhn_labels = np.stack([x[1] for x in train])",
            "",
            "    prepare_mnist(cfg, logger, svhn_images, svhn_labels, train=True)",
            "",
            "    svhn_images = np.stack([np.transpose(x[0], (2, 0, 1)) for x in test])",
            "    svhn_labels = np.stack([x[1] for x in test])",
            "",
            "    prepare_mnist(cfg, logger, svhn_images, svhn_labels, train=False)",
            ""
        ],
        "example": [
            "Fix pattern 1 :",
            "in the condition of using a png file, if .decode_jpeg() detected, replace .decode_jpeg() with .decode_image()",
            "Fix pattern 2 :",
            "in the condition of using a png file, if .decode_jpeg() and .resize( detected, replace .decode_jpeg() with .decode_image() and replace .resize() with .resize_image_with_crop_or_pad(",
            "Fix pattern 3 :",
            "no precondition required, if tf.merge_summary( detected, replace it with tf.summary.merge(",
            "Fix pattern 4 :",
            "no precondition required, if tf.merge_all_summaries( detected, replace it with tf.summary.merge_all(",
            "Fix pattern 5 :",
            "no precondition required, if tf.train.SummaryWriter(detected, replace it with tf.summary.FileWriter(",
            "Fix pattern 6 :",
            "if the model is using binary class mode, if Dense(3, activation=`softmax`) detected, replace it with Dense(2, activation=`softmax`)",
            "Fix pattern 7 :",
            "in the condition of using cross entropy formula, if .softmax() detected, replace it tf.nn.softmax_cross_entropy_with_logits()",
            "Fix pattern 8 :",
            "in the condition of using @tf.function, add tf.range( and tf.cast() to API parameters",
            "Fix pattern 9 :",
            "no precondition required, if tf.histogram_summary( is detected, replace it with tf.summary.histogram(",
            "Fix pattern 10 :",
            "no precondition required, if tf.scalar_summary( is detected, replace it with tf.summary.scalar(",
            "Fix pattern 11 :",
            "in the condition of using eval() before calling tf.train.start_queue_runners(x), if tf.start_queue_runners( is detected, Insert a call to tf.train start_queue_runners(x) before eval() and after the most recent assignment of variable x",
            ""
        ],
        "detection_result": "Yes",
        "result": "yes",
        "label": ""
    },
    {
        "number": "C:\\@code\\APIMISUSE\\data\\repo_pytorch_test\\ALAE\\dataset_preparation\\split_tfrecords_bedroom.py:66",
        "code_before": [
            "    for i in range(0, cfg.DATASET.MAX_RESOLUTION_LEVEL + 1):",
            "        part_num = 0",
            "        with tf.Graph().as_default(), tf.Session() as sess:",
            "            ds = tf.data.TFRecordDataset(tfrecord_path % i)",
            "            batch = ds.batch(chunk_size).make_one_shot_iterator().get_next()",
            "            while True:",
            "                try:",
            "                    part_path = cfg.DATASET.PATH % (i, part_num)",
            ""
        ],
        "example": [
            "Fix pattern 1 :",
            "in the condition of using a png file, if .decode_jpeg() detected, replace .decode_jpeg() with .decode_image()",
            "Fix pattern 2 :",
            "in the condition of using a png file, if .decode_jpeg() and .resize( detected, replace .decode_jpeg() with .decode_image() and replace .resize() with .resize_image_with_crop_or_pad(",
            "Fix pattern 3 :",
            "no precondition required, if tf.merge_summary( detected, replace it with tf.summary.merge(",
            "Fix pattern 4 :",
            "no precondition required, if tf.merge_all_summaries( detected, replace it with tf.summary.merge_all(",
            "Fix pattern 5 :",
            "no precondition required, if tf.train.SummaryWriter(detected, replace it with tf.summary.FileWriter(",
            "Fix pattern 6 :",
            "if the model is using binary class mode, if Dense(3, activation=`softmax`) detected, replace it with Dense(2, activation=`softmax`)",
            "Fix pattern 7 :",
            "in the condition of using cross entropy formula, if .softmax() detected, replace it tf.nn.softmax_cross_entropy_with_logits()",
            "Fix pattern 8 :",
            "in the condition of using @tf.function, add tf.range( and tf.cast() to API parameters",
            "Fix pattern 9 :",
            "no precondition required, if tf.histogram_summary( is detected, replace it with tf.summary.histogram(",
            "Fix pattern 10 :",
            "no precondition required, if tf.scalar_summary( is detected, replace it with tf.summary.scalar(",
            "Fix pattern 11 :",
            "in the condition of using eval() before calling tf.train.start_queue_runners(x), if tf.start_queue_runners( is detected, Insert a call to tf.train start_queue_runners(x) before eval() and after the most recent assignment of variable x",
            ""
        ],
        "detection_result": "Yes",
        "result": "yes",
        "label": ""
    },
    {
        "number": "C:\\@code\\APIMISUSE\\data\\repo_pytorch_test\\ALAE\\dataset_preparation\\split_tfrecords_bedroom.py:121",
        "code_before": [
            "    fh.setLevel(logging.DEBUG)",
            "    fh.setFormatter(formatter)",
            "    logger.addHandler(fh)",
            "",
            "    logger.info(args)",
            "",
            "    logger.info(\"Loaded configuration file {}\".format(args.config_file))",
            "    with open(args.config_file, \"r\") as cf:",
            ""
        ],
        "example": [
            "Fix pattern 1 :",
            "in the condition of using a png file, if .decode_jpeg() detected, replace .decode_jpeg() with .decode_image()",
            "Fix pattern 2 :",
            "in the condition of using a png file, if .decode_jpeg() and .resize( detected, replace .decode_jpeg() with .decode_image() and replace .resize() with .resize_image_with_crop_or_pad(",
            "Fix pattern 3 :",
            "no precondition required, if tf.merge_summary( detected, replace it with tf.summary.merge(",
            "Fix pattern 4 :",
            "no precondition required, if tf.merge_all_summaries( detected, replace it with tf.summary.merge_all(",
            "Fix pattern 5 :",
            "no precondition required, if tf.train.SummaryWriter(detected, replace it with tf.summary.FileWriter(",
            "Fix pattern 6 :",
            "if the model is using binary class mode, if Dense(3, activation=`softmax`) detected, replace it with Dense(2, activation=`softmax`)",
            "Fix pattern 7 :",
            "in the condition of using cross entropy formula, if .softmax() detected, replace it tf.nn.softmax_cross_entropy_with_logits()",
            "Fix pattern 8 :",
            "in the condition of using @tf.function, add tf.range( and tf.cast() to API parameters",
            "Fix pattern 9 :",
            "no precondition required, if tf.histogram_summary( is detected, replace it with tf.summary.histogram(",
            "Fix pattern 10 :",
            "no precondition required, if tf.scalar_summary( is detected, replace it with tf.summary.scalar(",
            "Fix pattern 11 :",
            "in the condition of using eval() before calling tf.train.start_queue_runners(x), if tf.start_queue_runners( is detected, Insert a call to tf.train start_queue_runners(x) before eval() and after the most recent assignment of variable x",
            ""
        ],
        "detection_result": "Yes",
        "result": "yes",
        "label": ""
    },
    {
        "number": "C:\\@code\\APIMISUSE\\data\\repo_pytorch_test\\ALAE\\dataset_preparation\\split_tfrecords_ffhq.py:35",
        "code_before": [
            "",
            "    for i in range(2, cfg.DATASET.MAX_RESOLUTION_LEVEL + 1):",
            "        with tf.Graph().as_default(), tf.Session() as sess:",
            "            ds = tf.data.TFRecordDataset(tfrecord_path % i)",
            "            ds = ds.batch(part_size)",
            "            batch = ds.make_one_shot_iterator().get_next()",
            "            part_num = 0",
            "            while True:",
            ""
        ],
        "example": [
            "Fix pattern 1 :",
            "in the condition of using a png file, if .decode_jpeg() detected, replace .decode_jpeg() with .decode_image()",
            "Fix pattern 2 :",
            "in the condition of using a png file, if .decode_jpeg() and .resize( detected, replace .decode_jpeg() with .decode_image() and replace .resize() with .resize_image_with_crop_or_pad(",
            "Fix pattern 3 :",
            "no precondition required, if tf.merge_summary( detected, replace it with tf.summary.merge(",
            "Fix pattern 4 :",
            "no precondition required, if tf.merge_all_summaries( detected, replace it with tf.summary.merge_all(",
            "Fix pattern 5 :",
            "no precondition required, if tf.train.SummaryWriter(detected, replace it with tf.summary.FileWriter(",
            "Fix pattern 6 :",
            "if the model is using binary class mode, if Dense(3, activation=`softmax`) detected, replace it with Dense(2, activation=`softmax`)",
            "Fix pattern 7 :",
            "in the condition of using cross entropy formula, if .softmax() detected, replace it tf.nn.softmax_cross_entropy_with_logits()",
            "Fix pattern 8 :",
            "in the condition of using @tf.function, add tf.range( and tf.cast() to API parameters",
            "Fix pattern 9 :",
            "no precondition required, if tf.histogram_summary( is detected, replace it with tf.summary.histogram(",
            "Fix pattern 10 :",
            "no precondition required, if tf.scalar_summary( is detected, replace it with tf.summary.scalar(",
            "Fix pattern 11 :",
            "in the condition of using eval() before calling tf.train.start_queue_runners(x), if tf.start_queue_runners( is detected, Insert a call to tf.train start_queue_runners(x) before eval() and after the most recent assignment of variable x",
            ""
        ],
        "detection_result": "Yes",
        "result": "yes",
        "label": ""
    },
    {
        "number": "C:\\@code\\APIMISUSE\\data\\repo_pytorch_test\\ALAE\\make_figures\\make_generation_figure.py:43",
        "code_before": [
            "            image = PIL.Image.fromarray(np.clip(im * 255, 0, 255).astype(np.uint8), 'RGB')",
            "            image = image.crop((cx, cy, cx + cw, cy + ch))",
            "            image = image.resize((cw // 2**lod, ch // 2**lod), PIL.Image.ANTIALIAS)",
            "            canvas.paste(image, (sum(cw // 2**lod for lod in lods[:col]), row * ch // 2**lod))",
            "    canvas.save(png)",
            "",
            "",
            "def sample(cfg, logger):",
            ""
        ],
        "example": [
            "Fix pattern 1 :",
            "in the condition of using a png file, if .decode_jpeg() detected, replace .decode_jpeg() with .decode_image()",
            "Fix pattern 2 :",
            "in the condition of using a png file, if .decode_jpeg() and .resize( detected, replace .decode_jpeg() with .decode_image() and replace .resize() with .resize_image_with_crop_or_pad(",
            "Fix pattern 3 :",
            "no precondition required, if tf.merge_summary( detected, replace it with tf.summary.merge(",
            "Fix pattern 4 :",
            "no precondition required, if tf.merge_all_summaries( detected, replace it with tf.summary.merge_all(",
            "Fix pattern 5 :",
            "no precondition required, if tf.train.SummaryWriter(detected, replace it with tf.summary.FileWriter(",
            "Fix pattern 6 :",
            "if the model is using binary class mode, if Dense(3, activation=`softmax`) detected, replace it with Dense(2, activation=`softmax`)",
            "Fix pattern 7 :",
            "in the condition of using cross entropy formula, if .softmax() detected, replace it tf.nn.softmax_cross_entropy_with_logits()",
            "Fix pattern 8 :",
            "in the condition of using @tf.function, add tf.range( and tf.cast() to API parameters",
            "Fix pattern 9 :",
            "no precondition required, if tf.histogram_summary( is detected, replace it with tf.summary.histogram(",
            "Fix pattern 10 :",
            "no precondition required, if tf.scalar_summary( is detected, replace it with tf.summary.scalar(",
            "Fix pattern 11 :",
            "in the condition of using eval() before calling tf.train.start_queue_runners(x), if tf.start_queue_runners( is detected, Insert a call to tf.train start_queue_runners(x) before eval() and after the most recent assignment of variable x",
            ""
        ],
        "detection_result": "Yes",
        "result": "yes",
        "label": ""
    },
    {
        "number": "C:\\@code\\APIMISUSE\\data\\repo_pytorch_test\\ALAE\\make_figures\\make_recon_figure_ffhq_real.py:145",
        "code_before": [
            "    save_image(canvas * 0.5 + 0.5, 'make_figures/reconstructions_ffhq_real_1.png', nrow=2, pad_value=1.0)",
            "",
            "    sample = next(b)",
            "    canvas = make(sample)",
            "    canvas = torch.cat(canvas, dim=0)",
            "",
            "    save_image(canvas * 0.5 + 0.5, 'make_figures/reconstructions_ffhq_real_2.png', nrow=2, pad_value=1.0)",
            "",
            ""
        ],
        "example": [
            "Fix pattern 1 :",
            "in the condition of using a png file, if .decode_jpeg() detected, replace .decode_jpeg() with .decode_image()",
            "Fix pattern 2 :",
            "in the condition of using a png file, if .decode_jpeg() and .resize( detected, replace .decode_jpeg() with .decode_image() and replace .resize() with .resize_image_with_crop_or_pad(",
            "Fix pattern 3 :",
            "no precondition required, if tf.merge_summary( detected, replace it with tf.summary.merge(",
            "Fix pattern 4 :",
            "no precondition required, if tf.merge_all_summaries( detected, replace it with tf.summary.merge_all(",
            "Fix pattern 5 :",
            "no precondition required, if tf.train.SummaryWriter(detected, replace it with tf.summary.FileWriter(",
            "Fix pattern 6 :",
            "if the model is using binary class mode, if Dense(3, activation=`softmax`) detected, replace it with Dense(2, activation=`softmax`)",
            "Fix pattern 7 :",
            "in the condition of using cross entropy formula, if .softmax() detected, replace it tf.nn.softmax_cross_entropy_with_logits()",
            "Fix pattern 8 :",
            "in the condition of using @tf.function, add tf.range( and tf.cast() to API parameters",
            "Fix pattern 9 :",
            "no precondition required, if tf.histogram_summary( is detected, replace it with tf.summary.histogram(",
            "Fix pattern 10 :",
            "no precondition required, if tf.scalar_summary( is detected, replace it with tf.summary.scalar(",
            "Fix pattern 11 :",
            "in the condition of using eval() before calling tf.train.start_queue_runners(x), if tf.start_queue_runners( is detected, Insert a call to tf.train start_queue_runners(x) before eval() and after the most recent assignment of variable x",
            ""
        ],
        "detection_result": "Yes",
        "result": "yes",
        "label": ""
    },
    {
        "number": "C:\\@code\\APIMISUSE\\data\\repo_pytorch_test\\ALAE\\make_figures\\make_recon_figure_multires.py:126",
        "code_before": [
            "",
            "    paths = list(os.listdir(path))",
            "",
            "    paths = sorted(paths)",
            "    random.seed(5)",
            "    random.shuffle(paths)",
            "",
            "    def move_to(list, item, new_index):",
            ""
        ],
        "example": [
            "Fix pattern 1 :",
            "in the condition of using a png file, if .decode_jpeg() detected, replace .decode_jpeg() with .decode_image()",
            "Fix pattern 2 :",
            "in the condition of using a png file, if .decode_jpeg() and .resize( detected, replace .decode_jpeg() with .decode_image() and replace .resize() with .resize_image_with_crop_or_pad(",
            "Fix pattern 3 :",
            "no precondition required, if tf.merge_summary( detected, replace it with tf.summary.merge(",
            "Fix pattern 4 :",
            "no precondition required, if tf.merge_all_summaries( detected, replace it with tf.summary.merge_all(",
            "Fix pattern 5 :",
            "no precondition required, if tf.train.SummaryWriter(detected, replace it with tf.summary.FileWriter(",
            "Fix pattern 6 :",
            "if the model is using binary class mode, if Dense(3, activation=`softmax`) detected, replace it with Dense(2, activation=`softmax`)",
            "Fix pattern 7 :",
            "in the condition of using cross entropy formula, if .softmax() detected, replace it tf.nn.softmax_cross_entropy_with_logits()",
            "Fix pattern 8 :",
            "in the condition of using @tf.function, add tf.range( and tf.cast() to API parameters",
            "Fix pattern 9 :",
            "no precondition required, if tf.histogram_summary( is detected, replace it with tf.summary.histogram(",
            "Fix pattern 10 :",
            "no precondition required, if tf.scalar_summary( is detected, replace it with tf.summary.scalar(",
            "Fix pattern 11 :",
            "in the condition of using eval() before calling tf.train.start_queue_runners(x), if tf.start_queue_runners( is detected, Insert a call to tf.train start_queue_runners(x) before eval() and after the most recent assignment of variable x",
            ""
        ],
        "detection_result": "Yes",
        "result": "yes",
        "label": ""
    },
    {
        "number": "C:\\@code\\APIMISUSE\\data\\repo_pytorch_test\\ALAE\\make_figures\\make_recon_figure_multires.py:249",
        "code_before": [
            "    canvas = np.concatenate(canvas, axis=2)",
            "",
            "    print('Saving image')",
            "    save_path = 'make_figures/output/%s/reconstructions_multiresolution.png' % cfg.NAME",
            "    os.makedirs(os.path.dirname(save_path), exist_ok=True)",
            "    save_image(torch.Tensor(canvas), save_path)",
            "",
            "",
            ""
        ],
        "example": [
            "Fix pattern 1 :",
            "in the condition of using a png file, if .decode_jpeg() detected, replace .decode_jpeg() with .decode_image()",
            "Fix pattern 2 :",
            "in the condition of using a png file, if .decode_jpeg() and .resize( detected, replace .decode_jpeg() with .decode_image() and replace .resize() with .resize_image_with_crop_or_pad(",
            "Fix pattern 3 :",
            "no precondition required, if tf.merge_summary( detected, replace it with tf.summary.merge(",
            "Fix pattern 4 :",
            "no precondition required, if tf.merge_all_summaries( detected, replace it with tf.summary.merge_all(",
            "Fix pattern 5 :",
            "no precondition required, if tf.train.SummaryWriter(detected, replace it with tf.summary.FileWriter(",
            "Fix pattern 6 :",
            "if the model is using binary class mode, if Dense(3, activation=`softmax`) detected, replace it with Dense(2, activation=`softmax`)",
            "Fix pattern 7 :",
            "in the condition of using cross entropy formula, if .softmax() detected, replace it tf.nn.softmax_cross_entropy_with_logits()",
            "Fix pattern 8 :",
            "in the condition of using @tf.function, add tf.range( and tf.cast() to API parameters",
            "Fix pattern 9 :",
            "no precondition required, if tf.histogram_summary( is detected, replace it with tf.summary.histogram(",
            "Fix pattern 10 :",
            "no precondition required, if tf.scalar_summary( is detected, replace it with tf.summary.scalar(",
            "Fix pattern 11 :",
            "in the condition of using eval() before calling tf.train.start_queue_runners(x), if tf.start_queue_runners( is detected, Insert a call to tf.train start_queue_runners(x) before eval() and after the most recent assignment of variable x",
            ""
        ],
        "detection_result": "Yes",
        "result": "yes",
        "label": ""
    },
    {
        "number": "C:\\@code\\APIMISUSE\\data\\repo_pytorch_test\\ALAE\\principal_directions\\generate_images.py:40",
        "code_before": [
            "",
            "        rnd = np.random.RandomState(5)",
            "",
            "        for _ in tqdm(range(0, self.num_samples, self.minibatch_size)):",
            "            torch.cuda.set_device(0)",
            "            latents = rnd.randn(self.minibatch_size, self.cfg.MODEL.LATENT_SPACE_SIZE)",
            "            lat = torch.tensor(latents).float().cuda()",
            "",
            ""
        ],
        "example": [
            "Fix pattern 1 :",
            "in the condition of using a png file, if .decode_jpeg() detected, replace .decode_jpeg() with .decode_image()",
            "Fix pattern 2 :",
            "in the condition of using a png file, if .decode_jpeg() and .resize( detected, replace .decode_jpeg() with .decode_image() and replace .resize() with .resize_image_with_crop_or_pad(",
            "Fix pattern 3 :",
            "no precondition required, if tf.merge_summary( detected, replace it with tf.summary.merge(",
            "Fix pattern 4 :",
            "no precondition required, if tf.merge_all_summaries( detected, replace it with tf.summary.merge_all(",
            "Fix pattern 5 :",
            "no precondition required, if tf.train.SummaryWriter(detected, replace it with tf.summary.FileWriter(",
            "Fix pattern 6 :",
            "if the model is using binary class mode, if Dense(3, activation=`softmax`) detected, replace it with Dense(2, activation=`softmax`)",
            "Fix pattern 7 :",
            "in the condition of using cross entropy formula, if .softmax() detected, replace it tf.nn.softmax_cross_entropy_with_logits()",
            "Fix pattern 8 :",
            "in the condition of using @tf.function, add tf.range( and tf.cast() to API parameters",
            "Fix pattern 9 :",
            "no precondition required, if tf.histogram_summary( is detected, replace it with tf.summary.histogram(",
            "Fix pattern 10 :",
            "no precondition required, if tf.scalar_summary( is detected, replace it with tf.summary.scalar(",
            "Fix pattern 11 :",
            "in the condition of using eval() before calling tf.train.start_queue_runners(x), if tf.start_queue_runners( is detected, Insert a call to tf.train start_queue_runners(x) before eval() and after the most recent assignment of variable x",
            ""
        ],
        "detection_result": "Yes",
        "result": "yes",
        "label": ""
    },
    {
        "number": "C:\\@code\\APIMISUSE\\data\\repo_pytorch_test\\ALAE\\style_mixing\\stylemix.py:45",
        "code_before": [
            "        _main(cfg, logger)",
            "",
            "",
            "def _main(cfg, logger):",
            "    torch.cuda.set_device(0)",
            "    model = Model(",
            "        startf=cfg.MODEL.START_CHANNEL_COUNT,",
            "        layer_count=cfg.MODEL.LAYER_COUNT,",
            ""
        ],
        "example": [
            "Fix pattern 1 :",
            "in the condition of using a png file, if .decode_jpeg() detected, replace .decode_jpeg() with .decode_image()",
            "Fix pattern 2 :",
            "in the condition of using a png file, if .decode_jpeg() and .resize( detected, replace .decode_jpeg() with .decode_image() and replace .resize() with .resize_image_with_crop_or_pad(",
            "Fix pattern 3 :",
            "no precondition required, if tf.merge_summary( detected, replace it with tf.summary.merge(",
            "Fix pattern 4 :",
            "no precondition required, if tf.merge_all_summaries( detected, replace it with tf.summary.merge_all(",
            "Fix pattern 5 :",
            "no precondition required, if tf.train.SummaryWriter(detected, replace it with tf.summary.FileWriter(",
            "Fix pattern 6 :",
            "if the model is using binary class mode, if Dense(3, activation=`softmax`) detected, replace it with Dense(2, activation=`softmax`)",
            "Fix pattern 7 :",
            "in the condition of using cross entropy formula, if .softmax() detected, replace it tf.nn.softmax_cross_entropy_with_logits()",
            "Fix pattern 8 :",
            "in the condition of using @tf.function, add tf.range( and tf.cast() to API parameters",
            "Fix pattern 9 :",
            "no precondition required, if tf.histogram_summary( is detected, replace it with tf.summary.histogram(",
            "Fix pattern 10 :",
            "no precondition required, if tf.scalar_summary( is detected, replace it with tf.summary.scalar(",
            "Fix pattern 11 :",
            "in the condition of using eval() before calling tf.train.start_queue_runners(x), if tf.start_queue_runners( is detected, Insert a call to tf.train start_queue_runners(x) before eval() and after the most recent assignment of variable x",
            ""
        ],
        "detection_result": "Yes",
        "result": "yes",
        "label": ""
    },
    {
        "number": "C:\\@code\\APIMISUSE\\data\\repo_pytorch_test\\albert_zh\\create_pretraining_data.py:162",
        "code_before": [
            "        if feature.int64_list.value:",
            "          values = feature.int64_list.value",
            "        elif feature.float_list.value:",
            "          values = feature.float_list.value",
            "        tf.logging.info(",
            "            \"%s: %s\" % (feature_name, \" \".join([str(x) for x in values])))",
            "",
            "  for writer in writers:",
            ""
        ],
        "example": [
            "Fix pattern 1 :",
            "in the condition of using a png file, if .decode_jpeg() detected, replace .decode_jpeg() with .decode_image()",
            "Fix pattern 2 :",
            "in the condition of using a png file, if .decode_jpeg() and .resize( detected, replace .decode_jpeg() with .decode_image() and replace .resize() with .resize_image_with_crop_or_pad(",
            "Fix pattern 3 :",
            "no precondition required, if tf.merge_summary( detected, replace it with tf.summary.merge(",
            "Fix pattern 4 :",
            "no precondition required, if tf.merge_all_summaries( detected, replace it with tf.summary.merge_all(",
            "Fix pattern 5 :",
            "no precondition required, if tf.train.SummaryWriter(detected, replace it with tf.summary.FileWriter(",
            "Fix pattern 6 :",
            "if the model is using binary class mode, if Dense(3, activation=`softmax`) detected, replace it with Dense(2, activation=`softmax`)",
            "Fix pattern 7 :",
            "in the condition of using cross entropy formula, if .softmax() detected, replace it tf.nn.softmax_cross_entropy_with_logits()",
            "Fix pattern 8 :",
            "in the condition of using @tf.function, add tf.range( and tf.cast() to API parameters",
            "Fix pattern 9 :",
            "no precondition required, if tf.histogram_summary( is detected, replace it with tf.summary.histogram(",
            "Fix pattern 10 :",
            "no precondition required, if tf.scalar_summary( is detected, replace it with tf.summary.scalar(",
            "Fix pattern 11 :",
            "in the condition of using eval() before calling tf.train.start_queue_runners(x), if tf.start_queue_runners( is detected, Insert a call to tf.train start_queue_runners(x) before eval() and after the most recent assignment of variable x",
            ""
        ],
        "detection_result": "Yes",
        "result": "yes",
        "label": ""
    },
    {
        "number": "C:\\@code\\APIMISUSE\\data\\repo_pytorch_test\\albert_zh\\create_pretraining_data.py:201",
        "code_before": [
            "        strings=strings.replace(\"   \",\" \").replace(\"  \",\" \") # \u5982\u679c\u6709\u4e24\u4e2a\u6216\u4e09\u4e2a\u7a7a\u683c\uff0c\u66ff\u6362\u4e3a\u4e00\u4e2a\u7a7a\u683c",
            "        line = tokenization.convert_to_unicode(strings)",
            "        if not line:",
            "          break",
            "        line = line.strip()",
            "",
            "        # Empty lines are used as document delimiters",
            "        if not line:",
            ""
        ],
        "example": [
            "Fix pattern 1 :",
            "in the condition of using a png file, if .decode_jpeg() detected, replace .decode_jpeg() with .decode_image()",
            "Fix pattern 2 :",
            "in the condition of using a png file, if .decode_jpeg() and .resize( detected, replace .decode_jpeg() with .decode_image() and replace .resize() with .resize_image_with_crop_or_pad(",
            "Fix pattern 3 :",
            "no precondition required, if tf.merge_summary( detected, replace it with tf.summary.merge(",
            "Fix pattern 4 :",
            "no precondition required, if tf.merge_all_summaries( detected, replace it with tf.summary.merge_all(",
            "Fix pattern 5 :",
            "no precondition required, if tf.train.SummaryWriter(detected, replace it with tf.summary.FileWriter(",
            "Fix pattern 6 :",
            "if the model is using binary class mode, if Dense(3, activation=`softmax`) detected, replace it with Dense(2, activation=`softmax`)",
            "Fix pattern 7 :",
            "in the condition of using cross entropy formula, if .softmax() detected, replace it tf.nn.softmax_cross_entropy_with_logits()",
            "Fix pattern 8 :",
            "in the condition of using @tf.function, add tf.range( and tf.cast() to API parameters",
            "Fix pattern 9 :",
            "no precondition required, if tf.histogram_summary( is detected, replace it with tf.summary.histogram(",
            "Fix pattern 10 :",
            "no precondition required, if tf.scalar_summary( is detected, replace it with tf.summary.scalar(",
            "Fix pattern 11 :",
            "in the condition of using eval() before calling tf.train.start_queue_runners(x), if tf.start_queue_runners( is detected, Insert a call to tf.train start_queue_runners(x) before eval() and after the most recent assignment of variable x",
            ""
        ],
        "detection_result": "Yes",
        "result": "yes",
        "label": ""
    },
    {
        "number": "C:\\@code\\APIMISUSE\\data\\repo_pytorch_test\\albert_zh\\create_pretraining_data.py:686",
        "code_before": [
            "    input_files.extend(tf.gfile.Glob(input_pattern))",
            "",
            "  tf.logging.info(\"*** Reading from input files ***\")",
            "  for input_file in input_files:",
            "    tf.logging.info(\"  %s\", input_file)",
            "",
            "  rng = random.Random(FLAGS.random_seed)",
            "  instances = create_training_instances(",
            ""
        ],
        "example": [
            "Fix pattern 1 :",
            "in the condition of using a png file, if .decode_jpeg() detected, replace .decode_jpeg() with .decode_image()",
            "Fix pattern 2 :",
            "in the condition of using a png file, if .decode_jpeg() and .resize( detected, replace .decode_jpeg() with .decode_image() and replace .resize() with .resize_image_with_crop_or_pad(",
            "Fix pattern 3 :",
            "no precondition required, if tf.merge_summary( detected, replace it with tf.summary.merge(",
            "Fix pattern 4 :",
            "no precondition required, if tf.merge_all_summaries( detected, replace it with tf.summary.merge_all(",
            "Fix pattern 5 :",
            "no precondition required, if tf.train.SummaryWriter(detected, replace it with tf.summary.FileWriter(",
            "Fix pattern 6 :",
            "if the model is using binary class mode, if Dense(3, activation=`softmax`) detected, replace it with Dense(2, activation=`softmax`)",
            "Fix pattern 7 :",
            "in the condition of using cross entropy formula, if .softmax() detected, replace it tf.nn.softmax_cross_entropy_with_logits()",
            "Fix pattern 8 :",
            "in the condition of using @tf.function, add tf.range( and tf.cast() to API parameters",
            "Fix pattern 9 :",
            "no precondition required, if tf.histogram_summary( is detected, replace it with tf.summary.histogram(",
            "Fix pattern 10 :",
            "no precondition required, if tf.scalar_summary( is detected, replace it with tf.summary.scalar(",
            "Fix pattern 11 :",
            "in the condition of using eval() before calling tf.train.start_queue_runners(x), if tf.start_queue_runners( is detected, Insert a call to tf.train start_queue_runners(x) before eval() and after the most recent assignment of variable x",
            ""
        ],
        "detection_result": "Yes",
        "result": "yes",
        "label": ""
    },
    {
        "number": "C:\\@code\\APIMISUSE\\data\\repo_pytorch_test\\albert_zh\\create_pretraining_data_google.py:110",
        "code_before": [
            "    self.masked_lm_labels = masked_lm_labels",
            "",
            "  def __str__(self):",
            "    s = \"\"",
            "    s += \"tokens: %s\\n\" % (\" \".join(",
            "        [tokenization.printable_text(x) for x in self.tokens]))",
            "    s += \"segment_ids: %s\\n\" % (\" \".join([str(x) for x in self.segment_ids]))",
            "    s += \"token_boundary: %s\\n\" % (\" \".join(",
            ""
        ],
        "example": [
            "Fix pattern 1 :",
            "in the condition of using a png file, if .decode_jpeg() detected, replace .decode_jpeg() with .decode_image()",
            "Fix pattern 2 :",
            "in the condition of using a png file, if .decode_jpeg() and .resize( detected, replace .decode_jpeg() with .decode_image() and replace .resize() with .resize_image_with_crop_or_pad(",
            "Fix pattern 3 :",
            "no precondition required, if tf.merge_summary( detected, replace it with tf.summary.merge(",
            "Fix pattern 4 :",
            "no precondition required, if tf.merge_all_summaries( detected, replace it with tf.summary.merge_all(",
            "Fix pattern 5 :",
            "no precondition required, if tf.train.SummaryWriter(detected, replace it with tf.summary.FileWriter(",
            "Fix pattern 6 :",
            "if the model is using binary class mode, if Dense(3, activation=`softmax`) detected, replace it with Dense(2, activation=`softmax`)",
            "Fix pattern 7 :",
            "in the condition of using cross entropy formula, if .softmax() detected, replace it tf.nn.softmax_cross_entropy_with_logits()",
            "Fix pattern 8 :",
            "in the condition of using @tf.function, add tf.range( and tf.cast() to API parameters",
            "Fix pattern 9 :",
            "no precondition required, if tf.histogram_summary( is detected, replace it with tf.summary.histogram(",
            "Fix pattern 10 :",
            "no precondition required, if tf.scalar_summary( is detected, replace it with tf.summary.scalar(",
            "Fix pattern 11 :",
            "in the condition of using eval() before calling tf.train.start_queue_runners(x), if tf.start_queue_runners( is detected, Insert a call to tf.train start_queue_runners(x) before eval() and after the most recent assignment of variable x",
            ""
        ],
        "detection_result": "Yes",
        "result": "yes",
        "label": ""
    },
    {
        "number": "C:\\@code\\APIMISUSE\\data\\repo_pytorch_test\\albert_zh\\resources\\create_pretraining_data_roberta.py:151",
        "code_before": [
            "",
            "        total_written += 1",
            "",
            "        if inst_index < 20:",
            "            tf.logging.info(\"*** Example ***\")",
            "            tf.logging.info(\"tokens: %s\" % \" \".join(",
            "                [tokenization.printable_text(x) for x in instance.tokens]))",
            "",
            ""
        ],
        "example": [
            "Fix pattern 1 :",
            "in the condition of using a png file, if .decode_jpeg() detected, replace .decode_jpeg() with .decode_image()",
            "Fix pattern 2 :",
            "in the condition of using a png file, if .decode_jpeg() and .resize( detected, replace .decode_jpeg() with .decode_image() and replace .resize() with .resize_image_with_crop_or_pad(",
            "Fix pattern 3 :",
            "no precondition required, if tf.merge_summary( detected, replace it with tf.summary.merge(",
            "Fix pattern 4 :",
            "no precondition required, if tf.merge_all_summaries( detected, replace it with tf.summary.merge_all(",
            "Fix pattern 5 :",
            "no precondition required, if tf.train.SummaryWriter(detected, replace it with tf.summary.FileWriter(",
            "Fix pattern 6 :",
            "if the model is using binary class mode, if Dense(3, activation=`softmax`) detected, replace it with Dense(2, activation=`softmax`)",
            "Fix pattern 7 :",
            "in the condition of using cross entropy formula, if .softmax() detected, replace it tf.nn.softmax_cross_entropy_with_logits()",
            "Fix pattern 8 :",
            "in the condition of using @tf.function, add tf.range( and tf.cast() to API parameters",
            "Fix pattern 9 :",
            "no precondition required, if tf.histogram_summary( is detected, replace it with tf.summary.histogram(",
            "Fix pattern 10 :",
            "no precondition required, if tf.scalar_summary( is detected, replace it with tf.summary.scalar(",
            "Fix pattern 11 :",
            "in the condition of using eval() before calling tf.train.start_queue_runners(x), if tf.start_queue_runners( is detected, Insert a call to tf.train start_queue_runners(x) before eval() and after the most recent assignment of variable x",
            ""
        ],
        "detection_result": "Yes",
        "result": "yes",
        "label": ""
    },
    {
        "number": "C:\\@code\\APIMISUSE\\data\\repo_tensorflow_test\\agents\\tf_agents\\agents\\data_converter.py:420",
        "code_before": [
            "          sequence_length=required_sequence_length)",
            "      value = trajectory.to_transition(value)",
            "      # Remove the now-singleton time dim.",
            "      if self._squeeze_time_dim:",
            "        value = tf.nest.map_structure(",
            "            lambda x: composite.squeeze(x, axis=1), value)",
            "    else:",
            "      raise TypeError('Input type not supported: {}'.format(value))",
            ""
        ],
        "example": [
            "Fix pattern 1 :",
            "in the condition of using a png file, if .decode_jpeg() detected, replace .decode_jpeg() with .decode_image()",
            "Fix pattern 2 :",
            "in the condition of using a png file, if .decode_jpeg() and .resize( detected, replace .decode_jpeg() with .decode_image() and replace .resize() with .resize_image_with_crop_or_pad(",
            "Fix pattern 3 :",
            "no precondition required, if tf.merge_summary( detected, replace it with tf.summary.merge(",
            "Fix pattern 4 :",
            "no precondition required, if tf.merge_all_summaries( detected, replace it with tf.summary.merge_all(",
            "Fix pattern 5 :",
            "no precondition required, if tf.train.SummaryWriter(detected, replace it with tf.summary.FileWriter(",
            "Fix pattern 6 :",
            "if the model is using binary class mode, if Dense(3, activation=`softmax`) detected, replace it with Dense(2, activation=`softmax`)",
            "Fix pattern 7 :",
            "in the condition of using cross entropy formula, if .softmax() detected, replace it tf.nn.softmax_cross_entropy_with_logits()",
            "Fix pattern 8 :",
            "in the condition of using @tf.function, add tf.range( and tf.cast() to API parameters",
            "Fix pattern 9 :",
            "no precondition required, if tf.histogram_summary( is detected, replace it with tf.summary.histogram(",
            "Fix pattern 10 :",
            "no precondition required, if tf.scalar_summary( is detected, replace it with tf.summary.scalar(",
            "Fix pattern 11 :",
            "in the condition of using eval() before calling tf.train.start_queue_runners(x), if tf.start_queue_runners( is detected, Insert a call to tf.train start_queue_runners(x) before eval() and after the most recent assignment of variable x",
            ""
        ],
        "detection_result": "Yes",
        "result": "yes",
        "label": ""
    },
    {
        "number": "C:\\@code\\APIMISUSE\\data\\repo_tensorflow_test\\agents\\tf_agents\\agents\\ddpg\\actor_rnn_network.py:156",
        "code_before": [
            "        reset_mask=reset_mask,",
            "        initial_state=network_state,",
            "        training=training)",
            "",
            "    states = batch_squash.flatten(states)  # [B, T, ...] -> [B x T, ...]",
            "",
            "    for layer in self._output_layers:",
            "      states = layer(states, training=training)",
            ""
        ],
        "example": [
            "Fix pattern 1 :",
            "in the condition of using a png file, if .decode_jpeg() detected, replace .decode_jpeg() with .decode_image()",
            "Fix pattern 2 :",
            "in the condition of using a png file, if .decode_jpeg() and .resize( detected, replace .decode_jpeg() with .decode_image() and replace .resize() with .resize_image_with_crop_or_pad(",
            "Fix pattern 3 :",
            "no precondition required, if tf.merge_summary( detected, replace it with tf.summary.merge(",
            "Fix pattern 4 :",
            "no precondition required, if tf.merge_all_summaries( detected, replace it with tf.summary.merge_all(",
            "Fix pattern 5 :",
            "no precondition required, if tf.train.SummaryWriter(detected, replace it with tf.summary.FileWriter(",
            "Fix pattern 6 :",
            "if the model is using binary class mode, if Dense(3, activation=`softmax`) detected, replace it with Dense(2, activation=`softmax`)",
            "Fix pattern 7 :",
            "in the condition of using cross entropy formula, if .softmax() detected, replace it tf.nn.softmax_cross_entropy_with_logits()",
            "Fix pattern 8 :",
            "in the condition of using @tf.function, add tf.range( and tf.cast() to API parameters",
            "Fix pattern 9 :",
            "no precondition required, if tf.histogram_summary( is detected, replace it with tf.summary.histogram(",
            "Fix pattern 10 :",
            "no precondition required, if tf.scalar_summary( is detected, replace it with tf.summary.scalar(",
            "Fix pattern 11 :",
            "in the condition of using eval() before calling tf.train.start_queue_runners(x), if tf.start_queue_runners( is detected, Insert a call to tf.train start_queue_runners(x) before eval() and after the most recent assignment of variable x",
            ""
        ],
        "detection_result": "Yes",
        "result": "yes",
        "label": ""
    },
    {
        "number": "C:\\@code\\APIMISUSE\\data\\repo_tensorflow_test\\agents\\tf_agents\\agents\\ddpg\\examples\\v2\\train_eval.py:238",
        "code_before": [
            "      experience, _ = next(iterator)",
            "      return tf_agent.train(experience)",
            "",
            "    if use_tf_functions:",
            "      train_step = common.function(train_step)",
            "",
            "    for _ in range(num_iterations):",
            "      start_time = time.time()",
            ""
        ],
        "example": [
            "Fix pattern 1 :",
            "in the condition of using a png file, if .decode_jpeg() detected, replace .decode_jpeg() with .decode_image()",
            "Fix pattern 2 :",
            "in the condition of using a png file, if .decode_jpeg() and .resize( detected, replace .decode_jpeg() with .decode_image() and replace .resize() with .resize_image_with_crop_or_pad(",
            "Fix pattern 3 :",
            "no precondition required, if tf.merge_summary( detected, replace it with tf.summary.merge(",
            "Fix pattern 4 :",
            "no precondition required, if tf.merge_all_summaries( detected, replace it with tf.summary.merge_all(",
            "Fix pattern 5 :",
            "no precondition required, if tf.train.SummaryWriter(detected, replace it with tf.summary.FileWriter(",
            "Fix pattern 6 :",
            "if the model is using binary class mode, if Dense(3, activation=`softmax`) detected, replace it with Dense(2, activation=`softmax`)",
            "Fix pattern 7 :",
            "in the condition of using cross entropy formula, if .softmax() detected, replace it tf.nn.softmax_cross_entropy_with_logits()",
            "Fix pattern 8 :",
            "in the condition of using @tf.function, add tf.range( and tf.cast() to API parameters",
            "Fix pattern 9 :",
            "no precondition required, if tf.histogram_summary( is detected, replace it with tf.summary.histogram(",
            "Fix pattern 10 :",
            "no precondition required, if tf.scalar_summary( is detected, replace it with tf.summary.scalar(",
            "Fix pattern 11 :",
            "in the condition of using eval() before calling tf.train.start_queue_runners(x), if tf.start_queue_runners( is detected, Insert a call to tf.train start_queue_runners(x) before eval() and after the most recent assignment of variable x",
            ""
        ],
        "detection_result": "Yes",
        "result": "yes",
        "label": ""
    },
    {
        "number": "C:\\@code\\APIMISUSE\\data\\repo_tensorflow_test\\agents\\tf_agents\\agents\\dqn\\dqn_agent.py:76",
        "code_before": [
            "",
            "def compute_td_targets(next_q_values: types.Tensor,",
            "                       rewards: types.Tensor,",
            "                       discounts: types.Tensor) -> types.Tensor:",
            "  return tf.stop_gradient(rewards + discounts * next_q_values)",
            "",
            "",
            "@gin.configurable",
            ""
        ],
        "example": [
            "Fix pattern 1 :",
            "in the condition of using a png file, if .decode_jpeg() detected, replace .decode_jpeg() with .decode_image()",
            "Fix pattern 2 :",
            "in the condition of using a png file, if .decode_jpeg() and .resize( detected, replace .decode_jpeg() with .decode_image() and replace .resize() with .resize_image_with_crop_or_pad(",
            "Fix pattern 3 :",
            "no precondition required, if tf.merge_summary( detected, replace it with tf.summary.merge(",
            "Fix pattern 4 :",
            "no precondition required, if tf.merge_all_summaries( detected, replace it with tf.summary.merge_all(",
            "Fix pattern 5 :",
            "no precondition required, if tf.train.SummaryWriter(detected, replace it with tf.summary.FileWriter(",
            "Fix pattern 6 :",
            "if the model is using binary class mode, if Dense(3, activation=`softmax`) detected, replace it with Dense(2, activation=`softmax`)",
            "Fix pattern 7 :",
            "in the condition of using cross entropy formula, if .softmax() detected, replace it tf.nn.softmax_cross_entropy_with_logits()",
            "Fix pattern 8 :",
            "in the condition of using @tf.function, add tf.range( and tf.cast() to API parameters",
            "Fix pattern 9 :",
            "no precondition required, if tf.histogram_summary( is detected, replace it with tf.summary.histogram(",
            "Fix pattern 10 :",
            "no precondition required, if tf.scalar_summary( is detected, replace it with tf.summary.scalar(",
            "Fix pattern 11 :",
            "in the condition of using eval() before calling tf.train.start_queue_runners(x), if tf.start_queue_runners( is detected, Insert a call to tf.train start_queue_runners(x) before eval() and after the most recent assignment of variable x",
            ""
        ],
        "detection_result": "Yes",
        "result": "yes",
        "label": ""
    },
    {
        "number": "C:\\@code\\APIMISUSE\\data\\repo_tensorflow_test\\agents\\tf_agents\\agents\\ppo\\ppo_agent.py:628",
        "code_before": [
            "      if self._debug_summaries:",
            "        # TODO(b/171573175): remove the condition once histograms are",
            "        # supported on TPUs.",
            "        if not tf.config.list_logical_devices('TPU'):",
            "          tf.compat.v2.summary.histogram(",
            "              name='rewards_normalized',",
            "              data=rewards,",
            "              step=self.train_step_counter)",
            ""
        ],
        "example": [
            "Fix pattern 1 :",
            "in the condition of using a png file, if .decode_jpeg() detected, replace .decode_jpeg() with .decode_image()",
            "Fix pattern 2 :",
            "in the condition of using a png file, if .decode_jpeg() and .resize( detected, replace .decode_jpeg() with .decode_image() and replace .resize() with .resize_image_with_crop_or_pad(",
            "Fix pattern 3 :",
            "no precondition required, if tf.merge_summary( detected, replace it with tf.summary.merge(",
            "Fix pattern 4 :",
            "no precondition required, if tf.merge_all_summaries( detected, replace it with tf.summary.merge_all(",
            "Fix pattern 5 :",
            "no precondition required, if tf.train.SummaryWriter(detected, replace it with tf.summary.FileWriter(",
            "Fix pattern 6 :",
            "if the model is using binary class mode, if Dense(3, activation=`softmax`) detected, replace it with Dense(2, activation=`softmax`)",
            "Fix pattern 7 :",
            "in the condition of using cross entropy formula, if .softmax() detected, replace it tf.nn.softmax_cross_entropy_with_logits()",
            "Fix pattern 8 :",
            "in the condition of using @tf.function, add tf.range( and tf.cast() to API parameters",
            "Fix pattern 9 :",
            "no precondition required, if tf.histogram_summary( is detected, replace it with tf.summary.histogram(",
            "Fix pattern 10 :",
            "no precondition required, if tf.scalar_summary( is detected, replace it with tf.summary.scalar(",
            "Fix pattern 11 :",
            "in the condition of using eval() before calling tf.train.start_queue_runners(x), if tf.start_queue_runners( is detected, Insert a call to tf.train start_queue_runners(x) before eval() and after the most recent assignment of variable x",
            ""
        ],
        "detection_result": "Yes",
        "result": "yes",
        "label": ""
    },
    {
        "number": "C:\\@code\\APIMISUSE\\data\\repo_tensorflow_test\\agents\\tf_agents\\agents\\ppo\\ppo_agent.py:657",
        "code_before": [
            "        final_value=final_value_bootstrapped)",
            "    # TODO(b/171573175): remove the condition once histograms are",
            "    # supported on TPUs.",
            "    if self._debug_summaries and not tf.config.list_logical_devices('TPU'):",
            "      tf.compat.v2.summary.histogram(",
            "          name='returns', data=returns, step=self.train_step_counter)",
            "",
            "    # Compute advantages.",
            ""
        ],
        "example": [
            "Fix pattern 1 :",
            "in the condition of using a png file, if .decode_jpeg() detected, replace .decode_jpeg() with .decode_image()",
            "Fix pattern 2 :",
            "in the condition of using a png file, if .decode_jpeg() and .resize( detected, replace .decode_jpeg() with .decode_image() and replace .resize() with .resize_image_with_crop_or_pad(",
            "Fix pattern 3 :",
            "no precondition required, if tf.merge_summary( detected, replace it with tf.summary.merge(",
            "Fix pattern 4 :",
            "no precondition required, if tf.merge_all_summaries( detected, replace it with tf.summary.merge_all(",
            "Fix pattern 5 :",
            "no precondition required, if tf.train.SummaryWriter(detected, replace it with tf.summary.FileWriter(",
            "Fix pattern 6 :",
            "if the model is using binary class mode, if Dense(3, activation=`softmax`) detected, replace it with Dense(2, activation=`softmax`)",
            "Fix pattern 7 :",
            "in the condition of using cross entropy formula, if .softmax() detected, replace it tf.nn.softmax_cross_entropy_with_logits()",
            "Fix pattern 8 :",
            "in the condition of using @tf.function, add tf.range( and tf.cast() to API parameters",
            "Fix pattern 9 :",
            "no precondition required, if tf.histogram_summary( is detected, replace it with tf.summary.histogram(",
            "Fix pattern 10 :",
            "no precondition required, if tf.scalar_summary( is detected, replace it with tf.summary.scalar(",
            "Fix pattern 11 :",
            "in the condition of using eval() before calling tf.train.start_queue_runners(x), if tf.start_queue_runners( is detected, Insert a call to tf.train start_queue_runners(x) before eval() and after the most recent assignment of variable x",
            ""
        ],
        "detection_result": "Yes",
        "result": "yes",
        "label": ""
    },
    {
        "number": "C:\\@code\\APIMISUSE\\data\\repo_tensorflow_test\\agents\\tf_agents\\agents\\ppo\\ppo_agent.py:1319",
        "code_before": [
            "        tf.compat.v2.summary.histogram(",
            "            name='importance_ratio_clipped',",
            "            data=importance_ratio_clipped,",
            "            step=self.train_step_counter)",
            "        tf.compat.v2.summary.histogram(",
            "            name='per_timestep_objective',",
            "            data=per_timestep_objective,",
            "            step=self.train_step_counter)",
            ""
        ],
        "example": [
            "Fix pattern 1 :",
            "in the condition of using a png file, if .decode_jpeg() detected, replace .decode_jpeg() with .decode_image()",
            "Fix pattern 2 :",
            "in the condition of using a png file, if .decode_jpeg() and .resize( detected, replace .decode_jpeg() with .decode_image() and replace .resize() with .resize_image_with_crop_or_pad(",
            "Fix pattern 3 :",
            "no precondition required, if tf.merge_summary( detected, replace it with tf.summary.merge(",
            "Fix pattern 4 :",
            "no precondition required, if tf.merge_all_summaries( detected, replace it with tf.summary.merge_all(",
            "Fix pattern 5 :",
            "no precondition required, if tf.train.SummaryWriter(detected, replace it with tf.summary.FileWriter(",
            "Fix pattern 6 :",
            "if the model is using binary class mode, if Dense(3, activation=`softmax`) detected, replace it with Dense(2, activation=`softmax`)",
            "Fix pattern 7 :",
            "in the condition of using cross entropy formula, if .softmax() detected, replace it tf.nn.softmax_cross_entropy_with_logits()",
            "Fix pattern 8 :",
            "in the condition of using @tf.function, add tf.range( and tf.cast() to API parameters",
            "Fix pattern 9 :",
            "no precondition required, if tf.histogram_summary( is detected, replace it with tf.summary.histogram(",
            "Fix pattern 10 :",
            "no precondition required, if tf.scalar_summary( is detected, replace it with tf.summary.scalar(",
            "Fix pattern 11 :",
            "in the condition of using eval() before calling tf.train.start_queue_runners(x), if tf.start_queue_runners( is detected, Insert a call to tf.train start_queue_runners(x) before eval() and after the most recent assignment of variable x",
            ""
        ],
        "detection_result": "Yes",
        "result": "yes",
        "label": ""
    },
    {
        "number": "C:\\@code\\APIMISUSE\\data\\repo_tensorflow_test\\agents\\tf_agents\\agents\\ppo\\ppo_agent.py:1342",
        "code_before": [
            "          # Categorical distribution (used for discrete actions) doesn't have a",
            "          # mean.",
            "          distribution_index = '_{}'.format(i) if i > 0 else ''",
            "          if not tensor_spec.is_discrete(single_action):",
            "            tf.compat.v2.summary.histogram(",
            "                name='actions_distribution_mean' + distribution_index,",
            "                data=single_distribution.mean(),",
            "                step=self.train_step_counter)",
            ""
        ],
        "example": [
            "Fix pattern 1 :",
            "in the condition of using a png file, if .decode_jpeg() detected, replace .decode_jpeg() with .decode_image()",
            "Fix pattern 2 :",
            "in the condition of using a png file, if .decode_jpeg() and .resize( detected, replace .decode_jpeg() with .decode_image() and replace .resize() with .resize_image_with_crop_or_pad(",
            "Fix pattern 3 :",
            "no precondition required, if tf.merge_summary( detected, replace it with tf.summary.merge(",
            "Fix pattern 4 :",
            "no precondition required, if tf.merge_all_summaries( detected, replace it with tf.summary.merge_all(",
            "Fix pattern 5 :",
            "no precondition required, if tf.train.SummaryWriter(detected, replace it with tf.summary.FileWriter(",
            "Fix pattern 6 :",
            "if the model is using binary class mode, if Dense(3, activation=`softmax`) detected, replace it with Dense(2, activation=`softmax`)",
            "Fix pattern 7 :",
            "in the condition of using cross entropy formula, if .softmax() detected, replace it tf.nn.softmax_cross_entropy_with_logits()",
            "Fix pattern 8 :",
            "in the condition of using @tf.function, add tf.range( and tf.cast() to API parameters",
            "Fix pattern 9 :",
            "no precondition required, if tf.histogram_summary( is detected, replace it with tf.summary.histogram(",
            "Fix pattern 10 :",
            "no precondition required, if tf.scalar_summary( is detected, replace it with tf.summary.scalar(",
            "Fix pattern 11 :",
            "in the condition of using eval() before calling tf.train.start_queue_runners(x), if tf.start_queue_runners( is detected, Insert a call to tf.train start_queue_runners(x) before eval() and after the most recent assignment of variable x",
            ""
        ],
        "detection_result": "Yes",
        "result": "yes",
        "label": ""
    },
    {
        "number": "C:\\@code\\APIMISUSE\\data\\repo_tensorflow_test\\agents\\tf_agents\\agents\\sac\\examples\\v2\\train_eval.py:334",
        "code_before": [
            "",
            "",
            "def main(_):",
            "  tf.compat.v1.enable_v2_behavior()",
            "  logging.set_verbosity(logging.INFO)",
            "  gin.parse_config_files_and_bindings(FLAGS.gin_file, FLAGS.gin_param)",
            "  train_eval(FLAGS.root_dir)",
            "",
            ""
        ],
        "example": [
            "Fix pattern 1 :",
            "in the condition of using a png file, if .decode_jpeg() detected, replace .decode_jpeg() with .decode_image()",
            "Fix pattern 2 :",
            "in the condition of using a png file, if .decode_jpeg() and .resize( detected, replace .decode_jpeg() with .decode_image() and replace .resize() with .resize_image_with_crop_or_pad(",
            "Fix pattern 3 :",
            "no precondition required, if tf.merge_summary( detected, replace it with tf.summary.merge(",
            "Fix pattern 4 :",
            "no precondition required, if tf.merge_all_summaries( detected, replace it with tf.summary.merge_all(",
            "Fix pattern 5 :",
            "no precondition required, if tf.train.SummaryWriter(detected, replace it with tf.summary.FileWriter(",
            "Fix pattern 6 :",
            "if the model is using binary class mode, if Dense(3, activation=`softmax`) detected, replace it with Dense(2, activation=`softmax`)",
            "Fix pattern 7 :",
            "in the condition of using cross entropy formula, if .softmax() detected, replace it tf.nn.softmax_cross_entropy_with_logits()",
            "Fix pattern 8 :",
            "in the condition of using @tf.function, add tf.range( and tf.cast() to API parameters",
            "Fix pattern 9 :",
            "no precondition required, if tf.histogram_summary( is detected, replace it with tf.summary.histogram(",
            "Fix pattern 10 :",
            "no precondition required, if tf.scalar_summary( is detected, replace it with tf.summary.scalar(",
            "Fix pattern 11 :",
            "in the condition of using eval() before calling tf.train.start_queue_runners(x), if tf.start_queue_runners( is detected, Insert a call to tf.train start_queue_runners(x) before eval() and after the most recent assignment of variable x",
            ""
        ],
        "detection_result": "Yes",
        "result": "yes",
        "label": ""
    },
    {
        "number": "C:\\@code\\APIMISUSE\\data\\repo_tensorflow_test\\agents\\tf_agents\\agents\\sac\\examples\\v2\\train_eval_rnn.py:228",
        "code_before": [
            "        tf_env.time_step_spec(), tf_env.action_spec())",
            "    collect_policy = tf_agent.collect_policy",
            "",
            "    train_checkpointer = common.Checkpointer(",
            "        ckpt_dir=os.path.join(root_dir, 'train'),",
            "        agent=tf_agent,",
            "        global_step=global_step,",
            "        metrics=metric_utils.MetricsGroup(train_metrics, 'train_metrics'))",
            ""
        ],
        "example": [
            "Fix pattern 1 :",
            "in the condition of using a png file, if .decode_jpeg() detected, replace .decode_jpeg() with .decode_image()",
            "Fix pattern 2 :",
            "in the condition of using a png file, if .decode_jpeg() and .resize( detected, replace .decode_jpeg() with .decode_image() and replace .resize() with .resize_image_with_crop_or_pad(",
            "Fix pattern 3 :",
            "no precondition required, if tf.merge_summary( detected, replace it with tf.summary.merge(",
            "Fix pattern 4 :",
            "no precondition required, if tf.merge_all_summaries( detected, replace it with tf.summary.merge_all(",
            "Fix pattern 5 :",
            "no precondition required, if tf.train.SummaryWriter(detected, replace it with tf.summary.FileWriter(",
            "Fix pattern 6 :",
            "if the model is using binary class mode, if Dense(3, activation=`softmax`) detected, replace it with Dense(2, activation=`softmax`)",
            "Fix pattern 7 :",
            "in the condition of using cross entropy formula, if .softmax() detected, replace it tf.nn.softmax_cross_entropy_with_logits()",
            "Fix pattern 8 :",
            "in the condition of using @tf.function, add tf.range( and tf.cast() to API parameters",
            "Fix pattern 9 :",
            "no precondition required, if tf.histogram_summary( is detected, replace it with tf.summary.histogram(",
            "Fix pattern 10 :",
            "no precondition required, if tf.scalar_summary( is detected, replace it with tf.summary.scalar(",
            "Fix pattern 11 :",
            "in the condition of using eval() before calling tf.train.start_queue_runners(x), if tf.start_queue_runners( is detected, Insert a call to tf.train start_queue_runners(x) before eval() and after the most recent assignment of variable x",
            ""
        ],
        "detection_result": "Yes",
        "result": "yes",
        "label": ""
    },
    {
        "number": "C:\\@code\\APIMISUSE\\data\\repo_tensorflow_test\\agents\\tf_agents\\agents\\td3\\td3_agent.py:405",
        "code_before": [
            "          pred_input_2, time_steps.step_type, training=training)",
            "      pred_td_targets_all = [pred_td_targets_1, pred_td_targets_2]",
            "",
            "      if self._debug_summaries:",
            "        tf.compat.v2.summary.histogram(",
            "            name='td_targets', data=td_targets, step=self.train_step_counter)",
            "        with tf.name_scope('td_targets'):",
            "          tf.compat.v2.summary.scalar(",
            ""
        ],
        "example": [
            "Fix pattern 1 :",
            "in the condition of using a png file, if .decode_jpeg() detected, replace .decode_jpeg() with .decode_image()",
            "Fix pattern 2 :",
            "in the condition of using a png file, if .decode_jpeg() and .resize( detected, replace .decode_jpeg() with .decode_image() and replace .resize() with .resize_image_with_crop_or_pad(",
            "Fix pattern 3 :",
            "no precondition required, if tf.merge_summary( detected, replace it with tf.summary.merge(",
            "Fix pattern 4 :",
            "no precondition required, if tf.merge_all_summaries( detected, replace it with tf.summary.merge_all(",
            "Fix pattern 5 :",
            "no precondition required, if tf.train.SummaryWriter(detected, replace it with tf.summary.FileWriter(",
            "Fix pattern 6 :",
            "if the model is using binary class mode, if Dense(3, activation=`softmax`) detected, replace it with Dense(2, activation=`softmax`)",
            "Fix pattern 7 :",
            "in the condition of using cross entropy formula, if .softmax() detected, replace it tf.nn.softmax_cross_entropy_with_logits()",
            "Fix pattern 8 :",
            "in the condition of using @tf.function, add tf.range( and tf.cast() to API parameters",
            "Fix pattern 9 :",
            "no precondition required, if tf.histogram_summary( is detected, replace it with tf.summary.histogram(",
            "Fix pattern 10 :",
            "no precondition required, if tf.scalar_summary( is detected, replace it with tf.summary.scalar(",
            "Fix pattern 11 :",
            "in the condition of using eval() before calling tf.train.start_queue_runners(x), if tf.start_queue_runners( is detected, Insert a call to tf.train start_queue_runners(x) before eval() and after the most recent assignment of variable x",
            ""
        ],
        "detection_result": "Fix pattern 1 : No\nFix pattern 2 : No\nFix pattern 3 : Yes\nFix pattern 4 : Yes\nFix pattern 5 : Yes\nFix pattern 6 : No\nFix pattern 7 : Yes\nFix pattern 8 : No (Pattern not found in code)\nFix pattern 9 : Yes\nFix pattern 10 : Yes\nFix pattern 11 : No\nDecision: Yes",
        "result": "yes",
        "label": ""
    },
    {
        "number": "C:\\@code\\APIMISUSE\\data\\repo_tensorflow_test\\agents\\tf_agents\\bandits\\agents\\exp3_mixture_agent.py:172",
        "code_before": [
            "    unnormalized_probabilities = tf.exp(self._mixture_weights)",
            "    probabilities = unnormalized_probabilities / tf.norm(",
            "        unnormalized_probabilities, 1)",
            "",
            "    normalizer = tf.reduce_sum(unnormalized_probabilities)",
            "    probabilities = unnormalized_probabilities / normalizer",
            "    self._summarize_probabilities(probabilities)",
            "    repeated_probs = tf.tile(",
            ""
        ],
        "example": [
            "Fix pattern 1 :",
            "in the condition of using a png file, if .decode_jpeg() detected, replace .decode_jpeg() with .decode_image()",
            "Fix pattern 2 :",
            "in the condition of using a png file, if .decode_jpeg() and .resize( detected, replace .decode_jpeg() with .decode_image() and replace .resize() with .resize_image_with_crop_or_pad(",
            "Fix pattern 3 :",
            "no precondition required, if tf.merge_summary( detected, replace it with tf.summary.merge(",
            "Fix pattern 4 :",
            "no precondition required, if tf.merge_all_summaries( detected, replace it with tf.summary.merge_all(",
            "Fix pattern 5 :",
            "no precondition required, if tf.train.SummaryWriter(detected, replace it with tf.summary.FileWriter(",
            "Fix pattern 6 :",
            "if the model is using binary class mode, if Dense(3, activation=`softmax`) detected, replace it with Dense(2, activation=`softmax`)",
            "Fix pattern 7 :",
            "in the condition of using cross entropy formula, if .softmax() detected, replace it tf.nn.softmax_cross_entropy_with_logits()",
            "Fix pattern 8 :",
            "in the condition of using @tf.function, add tf.range( and tf.cast() to API parameters",
            "Fix pattern 9 :",
            "no precondition required, if tf.histogram_summary( is detected, replace it with tf.summary.histogram(",
            "Fix pattern 10 :",
            "no precondition required, if tf.scalar_summary( is detected, replace it with tf.summary.scalar(",
            "Fix pattern 11 :",
            "in the condition of using eval() before calling tf.train.start_queue_runners(x), if tf.start_queue_runners( is detected, Insert a call to tf.train start_queue_runners(x) before eval() and after the most recent assignment of variable x",
            ""
        ],
        "detection_result": "Yes",
        "result": "yes",
        "label": ""
    },
    {
        "number": "C:\\@code\\APIMISUSE\\data\\repo_tensorflow_test\\agents\\tf_agents\\bandits\\agents\\greedy_multi_objective_neural_agent.py:175",
        "code_before": [
            "        raise ValueError('laplacian_smoothing_weights cannot be None when the '",
            "                         'Laplacian matrix is provided.')",
            "      if self._num_objectives != len(self._laplacian_smoothing_weights):",
            "        raise ValueError('The length of laplacian smoothing weights: {} '",
            "                         'does not equal the number of objectives: {}'.format(",
            "                             len(self._laplacian_smoothing_weights),",
            "                             self._num_objectives))",
            "",
            ""
        ],
        "example": [
            "Fix pattern 1 :",
            "in the condition of using a png file, if .decode_jpeg() detected, replace .decode_jpeg() with .decode_image()",
            "Fix pattern 2 :",
            "in the condition of using a png file, if .decode_jpeg() and .resize( detected, replace .decode_jpeg() with .decode_image() and replace .resize() with .resize_image_with_crop_or_pad(",
            "Fix pattern 3 :",
            "no precondition required, if tf.merge_summary( detected, replace it with tf.summary.merge(",
            "Fix pattern 4 :",
            "no precondition required, if tf.merge_all_summaries( detected, replace it with tf.summary.merge_all(",
            "Fix pattern 5 :",
            "no precondition required, if tf.train.SummaryWriter(detected, replace it with tf.summary.FileWriter(",
            "Fix pattern 6 :",
            "if the model is using binary class mode, if Dense(3, activation=`softmax`) detected, replace it with Dense(2, activation=`softmax`)",
            "Fix pattern 7 :",
            "in the condition of using cross entropy formula, if .softmax() detected, replace it tf.nn.softmax_cross_entropy_with_logits()",
            "Fix pattern 8 :",
            "in the condition of using @tf.function, add tf.range( and tf.cast() to API parameters",
            "Fix pattern 9 :",
            "no precondition required, if tf.histogram_summary( is detected, replace it with tf.summary.histogram(",
            "Fix pattern 10 :",
            "no precondition required, if tf.scalar_summary( is detected, replace it with tf.summary.scalar(",
            "Fix pattern 11 :",
            "in the condition of using eval() before calling tf.train.start_queue_runners(x), if tf.start_queue_runners( is detected, Insert a call to tf.train start_queue_runners(x) before eval() and after the most recent assignment of variable x",
            ""
        ],
        "detection_result": "Yes",
        "result": "yes",
        "label": ""
    },
    {
        "number": "C:\\@code\\APIMISUSE\\data\\repo_tensorflow_test\\agents\\tf_agents\\bandits\\agents\\examples\\v2\\train_eval_sparse_features.py:36",
        "code_before": [
            "from tf_agents.bandits.specs import utils as bandit_spec_utils",
            "from tf_agents.environments import tf_py_environment",
            "from tf_agents.policies import utils as policy_utilities",
            "",
            "flags.DEFINE_string('root_dir', os.getenv('TEST_UNDECLARED_OUTPUTS_DIR'),",
            "                    'Root directory for writing logs/summaries/checkpoints.')",
            "",
            "flags.DEFINE_enum(",
            ""
        ],
        "example": [
            "Fix pattern 1 :",
            "in the condition of using a png file, if .decode_jpeg() detected, replace .decode_jpeg() with .decode_image()",
            "Fix pattern 2 :",
            "in the condition of using a png file, if .decode_jpeg() and .resize( detected, replace .decode_jpeg() with .decode_image() and replace .resize() with .resize_image_with_crop_or_pad(",
            "Fix pattern 3 :",
            "no precondition required, if tf.merge_summary( detected, replace it with tf.summary.merge(",
            "Fix pattern 4 :",
            "no precondition required, if tf.merge_all_summaries( detected, replace it with tf.summary.merge_all(",
            "Fix pattern 5 :",
            "no precondition required, if tf.train.SummaryWriter(detected, replace it with tf.summary.FileWriter(",
            "Fix pattern 6 :",
            "if the model is using binary class mode, if Dense(3, activation=`softmax`) detected, replace it with Dense(2, activation=`softmax`)",
            "Fix pattern 7 :",
            "in the condition of using cross entropy formula, if .softmax() detected, replace it tf.nn.softmax_cross_entropy_with_logits()",
            "Fix pattern 8 :",
            "in the condition of using @tf.function, add tf.range( and tf.cast() to API parameters",
            "Fix pattern 9 :",
            "no precondition required, if tf.histogram_summary( is detected, replace it with tf.summary.histogram(",
            "Fix pattern 10 :",
            "no precondition required, if tf.scalar_summary( is detected, replace it with tf.summary.scalar(",
            "Fix pattern 11 :",
            "in the condition of using eval() before calling tf.train.start_queue_runners(x), if tf.start_queue_runners( is detected, Insert a call to tf.train start_queue_runners(x) before eval() and after the most recent assignment of variable x",
            ""
        ],
        "detection_result": "Yes",
        "result": "yes",
        "label": ""
    },
    {
        "number": "C:\\@code\\APIMISUSE\\data\\repo_tensorflow_test\\agents\\tf_agents\\bandits\\environments\\dataset_utilities.py:154",
        "code_before": [
            "",
            "",
            "def load_movielens_data(data_file, delimiter=','):",
            "  \"\"\"Loads the movielens data and returns the ratings matrix.\"\"\"",
            "  ratings_matrix = np.zeros([MOVIELENS_NUM_USERS, MOVIELENS_NUM_MOVIES])",
            "  with tf.io.gfile.GFile(data_file, 'r') as infile:",
            "    # The file is a csv with rows containing:",
            "    # user id | item id | rating | timestamp",
            ""
        ],
        "example": [
            "Fix pattern 1 :",
            "in the condition of using a png file, if .decode_jpeg() detected, replace .decode_jpeg() with .decode_image()",
            "Fix pattern 2 :",
            "in the condition of using a png file, if .decode_jpeg() and .resize( detected, replace .decode_jpeg() with .decode_image() and replace .resize() with .resize_image_with_crop_or_pad(",
            "Fix pattern 3 :",
            "no precondition required, if tf.merge_summary( detected, replace it with tf.summary.merge(",
            "Fix pattern 4 :",
            "no precondition required, if tf.merge_all_summaries( detected, replace it with tf.summary.merge_all(",
            "Fix pattern 5 :",
            "no precondition required, if tf.train.SummaryWriter(detected, replace it with tf.summary.FileWriter(",
            "Fix pattern 6 :",
            "if the model is using binary class mode, if Dense(3, activation=`softmax`) detected, replace it with Dense(2, activation=`softmax`)",
            "Fix pattern 7 :",
            "in the condition of using cross entropy formula, if .softmax() detected, replace it tf.nn.softmax_cross_entropy_with_logits()",
            "Fix pattern 8 :",
            "in the condition of using @tf.function, add tf.range( and tf.cast() to API parameters",
            "Fix pattern 9 :",
            "no precondition required, if tf.histogram_summary( is detected, replace it with tf.summary.histogram(",
            "Fix pattern 10 :",
            "no precondition required, if tf.scalar_summary( is detected, replace it with tf.summary.scalar(",
            "Fix pattern 11 :",
            "in the condition of using eval() before calling tf.train.start_queue_runners(x), if tf.start_queue_runners( is detected, Insert a call to tf.train start_queue_runners(x) before eval() and after the most recent assignment of variable x",
            ""
        ],
        "detection_result": "Yes",
        "result": "yes",
        "label": ""
    },
    {
        "number": "C:\\@code\\APIMISUSE\\data\\repo_tensorflow_test\\agents\\tf_agents\\bandits\\environments\\ranking_environment.py:378",
        "code_before": [
            "      raise ValueError('Number of actions must match batch size.')",
            "    global_obs = self._observation[GLOBAL_KEY]",
            "    item_obs = self._observation[PER_ARM_KEY]",
            "    batch_size_range = range(self.batch_size)",
            "    slotted_items = item_obs[np.expand_dims(batch_size_range, axis=1), action]",
            "    relevances = self._get_relevances(global_obs, slotted_items)",
            "",
            "    # The `relevances` array is of shape `[batch_size, num_slots]`, the",
            ""
        ],
        "example": [
            "Fix pattern 1 :",
            "in the condition of using a png file, if .decode_jpeg() detected, replace .decode_jpeg() with .decode_image()",
            "Fix pattern 2 :",
            "in the condition of using a png file, if .decode_jpeg() and .resize( detected, replace .decode_jpeg() with .decode_image() and replace .resize() with .resize_image_with_crop_or_pad(",
            "Fix pattern 3 :",
            "no precondition required, if tf.merge_summary( detected, replace it with tf.summary.merge(",
            "Fix pattern 4 :",
            "no precondition required, if tf.merge_all_summaries( detected, replace it with tf.summary.merge_all(",
            "Fix pattern 5 :",
            "no precondition required, if tf.train.SummaryWriter(detected, replace it with tf.summary.FileWriter(",
            "Fix pattern 6 :",
            "if the model is using binary class mode, if Dense(3, activation=`softmax`) detected, replace it with Dense(2, activation=`softmax`)",
            "Fix pattern 7 :",
            "in the condition of using cross entropy formula, if .softmax() detected, replace it tf.nn.softmax_cross_entropy_with_logits()",
            "Fix pattern 8 :",
            "in the condition of using @tf.function, add tf.range( and tf.cast() to API parameters",
            "Fix pattern 9 :",
            "no precondition required, if tf.histogram_summary( is detected, replace it with tf.summary.histogram(",
            "Fix pattern 10 :",
            "no precondition required, if tf.scalar_summary( is detected, replace it with tf.summary.scalar(",
            "Fix pattern 11 :",
            "in the condition of using eval() before calling tf.train.start_queue_runners(x), if tf.start_queue_runners( is detected, Insert a call to tf.train start_queue_runners(x) before eval() and after the most recent assignment of variable x",
            ""
        ],
        "detection_result": "Yes",
        "result": "yes",
        "label": ""
    },
    {
        "number": "C:\\@code\\APIMISUSE\\data\\repo_tensorflow_test\\agents\\tf_agents\\bandits\\networks\\global_and_arm_feature_network.py:245",
        "code_before": [
            "",
            "    global_output, global_state = self._global_network(",
            "        global_obs, step_type=step_type, network_state=network_state)",
            "",
            "    num_actions = tf.shape(arm_output)[1]",
            "    global_output = tf.tile(",
            "        tf.expand_dims(global_output, axis=1), [1, num_actions, 1])",
            "",
            ""
        ],
        "example": [
            "Fix pattern 1 :",
            "in the condition of using a png file, if .decode_jpeg() detected, replace .decode_jpeg() with .decode_image()",
            "Fix pattern 2 :",
            "in the condition of using a png file, if .decode_jpeg() and .resize( detected, replace .decode_jpeg() with .decode_image() and replace .resize() with .resize_image_with_crop_or_pad(",
            "Fix pattern 3 :",
            "no precondition required, if tf.merge_summary( detected, replace it with tf.summary.merge(",
            "Fix pattern 4 :",
            "no precondition required, if tf.merge_all_summaries( detected, replace it with tf.summary.merge_all(",
            "Fix pattern 5 :",
            "no precondition required, if tf.train.SummaryWriter(detected, replace it with tf.summary.FileWriter(",
            "Fix pattern 6 :",
            "if the model is using binary class mode, if Dense(3, activation=`softmax`) detected, replace it with Dense(2, activation=`softmax`)",
            "Fix pattern 7 :",
            "in the condition of using cross entropy formula, if .softmax() detected, replace it tf.nn.softmax_cross_entropy_with_logits()",
            "Fix pattern 8 :",
            "in the condition of using @tf.function, add tf.range( and tf.cast() to API parameters",
            "Fix pattern 9 :",
            "no precondition required, if tf.histogram_summary( is detected, replace it with tf.summary.histogram(",
            "Fix pattern 10 :",
            "no precondition required, if tf.scalar_summary( is detected, replace it with tf.summary.scalar(",
            "Fix pattern 11 :",
            "in the condition of using eval() before calling tf.train.start_queue_runners(x), if tf.start_queue_runners( is detected, Insert a call to tf.train start_queue_runners(x) before eval() and after the most recent assignment of variable x",
            ""
        ],
        "detection_result": "Yes",
        "result": "yes",
        "label": ""
    },
    {
        "number": "C:\\@code\\APIMISUSE\\data\\repo_tensorflow_test\\agents\\tf_agents\\bandits\\policies\\falcon_reward_prediction_policy.py:402",
        "code_before": [
            "        )",
            "    )",
            "",
            "    if self._max_exploration_probability_hint is not None:",
            "      max_exploration_prob = tf.clip_by_value(",
            "          self._max_exploration_probability_hint,",
            "          clip_value_min=0.0,",
            "          clip_value_max=1.0,",
            ""
        ],
        "example": [
            "Fix pattern 1 :",
            "in the condition of using a png file, if .decode_jpeg() detected, replace .decode_jpeg() with .decode_image()",
            "Fix pattern 2 :",
            "in the condition of using a png file, if .decode_jpeg() and .resize( detected, replace .decode_jpeg() with .decode_image() and replace .resize() with .resize_image_with_crop_or_pad(",
            "Fix pattern 3 :",
            "no precondition required, if tf.merge_summary( detected, replace it with tf.summary.merge(",
            "Fix pattern 4 :",
            "no precondition required, if tf.merge_all_summaries( detected, replace it with tf.summary.merge_all(",
            "Fix pattern 5 :",
            "no precondition required, if tf.train.SummaryWriter(detected, replace it with tf.summary.FileWriter(",
            "Fix pattern 6 :",
            "if the model is using binary class mode, if Dense(3, activation=`softmax`) detected, replace it with Dense(2, activation=`softmax`)",
            "Fix pattern 7 :",
            "in the condition of using cross entropy formula, if .softmax() detected, replace it tf.nn.softmax_cross_entropy_with_logits()",
            "Fix pattern 8 :",
            "in the condition of using @tf.function, add tf.range( and tf.cast() to API parameters",
            "Fix pattern 9 :",
            "no precondition required, if tf.histogram_summary( is detected, replace it with tf.summary.histogram(",
            "Fix pattern 10 :",
            "no precondition required, if tf.scalar_summary( is detected, replace it with tf.summary.scalar(",
            "Fix pattern 11 :",
            "in the condition of using eval() before calling tf.train.start_queue_runners(x), if tf.start_queue_runners( is detected, Insert a call to tf.train start_queue_runners(x) before eval() and after the most recent assignment of variable x",
            ""
        ],
        "detection_result": "Yes",
        "result": "yes",
        "label": ""
    },
    {
        "number": "C:\\@code\\APIMISUSE\\data\\repo_tensorflow_test\\agents\\tf_agents\\distributions\\utils.py:354",
        "code_before": [
            "  def make_from_params_or_identity(v_):",
            "    return make_from_parameters(v_) if isinstance(v_, Params) else v_",
            "",
            "  params = {",
            "      k: tf.nest.map_structure(make_from_params_or_identity, v)",
            "      for k, v in value.params.items()",
            "  }",
            "  return value.type_(**params)",
            ""
        ],
        "example": [
            "Fix pattern 1 :",
            "in the condition of using a png file, if .decode_jpeg() detected, replace .decode_jpeg() with .decode_image()",
            "Fix pattern 2 :",
            "in the condition of using a png file, if .decode_jpeg() and .resize( detected, replace .decode_jpeg() with .decode_image() and replace .resize() with .resize_image_with_crop_or_pad(",
            "Fix pattern 3 :",
            "no precondition required, if tf.merge_summary( detected, replace it with tf.summary.merge(",
            "Fix pattern 4 :",
            "no precondition required, if tf.merge_all_summaries( detected, replace it with tf.summary.merge_all(",
            "Fix pattern 5 :",
            "no precondition required, if tf.train.SummaryWriter(detected, replace it with tf.summary.FileWriter(",
            "Fix pattern 6 :",
            "if the model is using binary class mode, if Dense(3, activation=`softmax`) detected, replace it with Dense(2, activation=`softmax`)",
            "Fix pattern 7 :",
            "in the condition of using cross entropy formula, if .softmax() detected, replace it tf.nn.softmax_cross_entropy_with_logits()",
            "Fix pattern 8 :",
            "in the condition of using @tf.function, add tf.range( and tf.cast() to API parameters",
            "Fix pattern 9 :",
            "no precondition required, if tf.histogram_summary( is detected, replace it with tf.summary.histogram(",
            "Fix pattern 10 :",
            "no precondition required, if tf.scalar_summary( is detected, replace it with tf.summary.scalar(",
            "Fix pattern 11 :",
            "in the condition of using eval() before calling tf.train.start_queue_runners(x), if tf.start_queue_runners( is detected, Insert a call to tf.train start_queue_runners(x) before eval() and after the most recent assignment of variable x",
            ""
        ],
        "detection_result": "Yes",
        "result": "yes",
        "label": ""
    },
    {
        "number": "C:\\@code\\APIMISUSE\\data\\repo_tensorflow_test\\agents\\tf_agents\\drivers\\dynamic_step_driver.py:112",
        "code_before": [
            "",
            "      Returns:",
            "        tf.bool tensor, shape (), indicating whether while loop should continue.",
            "      \"\"\"",
            "      return tf.less(tf.reduce_sum(input_tensor=counter), self._num_steps)",
            "",
            "    return loop_cond",
            "",
            ""
        ],
        "example": [
            "Fix pattern 1 :",
            "in the condition of using a png file, if .decode_jpeg() detected, replace .decode_jpeg() with .decode_image()",
            "Fix pattern 2 :",
            "in the condition of using a png file, if .decode_jpeg() and .resize( detected, replace .decode_jpeg() with .decode_image() and replace .resize() with .resize_image_with_crop_or_pad(",
            "Fix pattern 3 :",
            "no precondition required, if tf.merge_summary( detected, replace it with tf.summary.merge(",
            "Fix pattern 4 :",
            "no precondition required, if tf.merge_all_summaries( detected, replace it with tf.summary.merge_all(",
            "Fix pattern 5 :",
            "no precondition required, if tf.train.SummaryWriter(detected, replace it with tf.summary.FileWriter(",
            "Fix pattern 6 :",
            "if the model is using binary class mode, if Dense(3, activation=`softmax`) detected, replace it with Dense(2, activation=`softmax`)",
            "Fix pattern 7 :",
            "in the condition of using cross entropy formula, if .softmax() detected, replace it tf.nn.softmax_cross_entropy_with_logits()",
            "Fix pattern 8 :",
            "in the condition of using @tf.function, add tf.range( and tf.cast() to API parameters",
            "Fix pattern 9 :",
            "no precondition required, if tf.histogram_summary( is detected, replace it with tf.summary.histogram(",
            "Fix pattern 10 :",
            "no precondition required, if tf.scalar_summary( is detected, replace it with tf.summary.scalar(",
            "Fix pattern 11 :",
            "in the condition of using eval() before calling tf.train.start_queue_runners(x), if tf.start_queue_runners( is detected, Insert a call to tf.train start_queue_runners(x) before eval() and after the most recent assignment of variable x",
            ""
        ],
        "detection_result": "Yes",
        "result": "yes",
        "label": ""
    },
    {
        "number": "C:\\@code\\APIMISUSE\\data\\repo_tensorflow_test\\agents\\tf_agents\\drivers\\dynamic_step_driver.py:169",
        "code_before": [
            "            tf.identity, (time_step, next_time_step, policy_state)",
            "        )",
            "",
            "      # While loop counter should not be incremented for episode reset steps.",
            "      counter += tf.cast(~traj.is_boundary(), dtype=tf.int32)",
            "",
            "      return [counter, next_time_step, policy_state]",
            "",
            ""
        ],
        "example": [
            "Fix pattern 1 :",
            "in the condition of using a png file, if .decode_jpeg() detected, replace .decode_jpeg() with .decode_image()",
            "Fix pattern 2 :",
            "in the condition of using a png file, if .decode_jpeg() and .resize( detected, replace .decode_jpeg() with .decode_image() and replace .resize() with .resize_image_with_crop_or_pad(",
            "Fix pattern 3 :",
            "no precondition required, if tf.merge_summary( detected, replace it with tf.summary.merge(",
            "Fix pattern 4 :",
            "no precondition required, if tf.merge_all_summaries( detected, replace it with tf.summary.merge_all(",
            "Fix pattern 5 :",
            "no precondition required, if tf.train.SummaryWriter(detected, replace it with tf.summary.FileWriter(",
            "Fix pattern 6 :",
            "if the model is using binary class mode, if Dense(3, activation=`softmax`) detected, replace it with Dense(2, activation=`softmax`)",
            "Fix pattern 7 :",
            "in the condition of using cross entropy formula, if .softmax() detected, replace it tf.nn.softmax_cross_entropy_with_logits()",
            "Fix pattern 8 :",
            "in the condition of using @tf.function, add tf.range( and tf.cast() to API parameters",
            "Fix pattern 9 :",
            "no precondition required, if tf.histogram_summary( is detected, replace it with tf.summary.histogram(",
            "Fix pattern 10 :",
            "no precondition required, if tf.scalar_summary( is detected, replace it with tf.summary.scalar(",
            "Fix pattern 11 :",
            "in the condition of using eval() before calling tf.train.start_queue_runners(x), if tf.start_queue_runners( is detected, Insert a call to tf.train start_queue_runners(x) before eval() and after the most recent assignment of variable x",
            ""
        ],
        "detection_result": "Yes",
        "result": "yes",
        "label": ""
    },
    {
        "number": "C:\\@code\\APIMISUSE\\data\\repo_tensorflow_test\\agents\\tf_agents\\environments\\dm_control_wrapper.py:75",
        "code_before": [
            "    super(DmControlWrapper, self).__init__(env)",
            "    render_kwargs = render_kwargs or {}",
            "    self._render_kwargs = render_kwargs",
            "",
            "    self._observation_spec = tf.nest.map_structure(convert_spec,",
            "                                                   self._env.observation_spec())",
            "    self._action_spec = tf.nest.map_structure(convert_spec,",
            "                                              self._env.action_spec())",
            ""
        ],
        "example": [
            "Fix pattern 1 :",
            "in the condition of using a png file, if .decode_jpeg() detected, replace .decode_jpeg() with .decode_image()",
            "Fix pattern 2 :",
            "in the condition of using a png file, if .decode_jpeg() and .resize( detected, replace .decode_jpeg() with .decode_image() and replace .resize() with .resize_image_with_crop_or_pad(",
            "Fix pattern 3 :",
            "no precondition required, if tf.merge_summary( detected, replace it with tf.summary.merge(",
            "Fix pattern 4 :",
            "no precondition required, if tf.merge_all_summaries( detected, replace it with tf.summary.merge_all(",
            "Fix pattern 5 :",
            "no precondition required, if tf.train.SummaryWriter(detected, replace it with tf.summary.FileWriter(",
            "Fix pattern 6 :",
            "if the model is using binary class mode, if Dense(3, activation=`softmax`) detected, replace it with Dense(2, activation=`softmax`)",
            "Fix pattern 7 :",
            "in the condition of using cross entropy formula, if .softmax() detected, replace it tf.nn.softmax_cross_entropy_with_logits()",
            "Fix pattern 8 :",
            "in the condition of using @tf.function, add tf.range( and tf.cast() to API parameters",
            "Fix pattern 9 :",
            "no precondition required, if tf.histogram_summary( is detected, replace it with tf.summary.histogram(",
            "Fix pattern 10 :",
            "no precondition required, if tf.scalar_summary( is detected, replace it with tf.summary.scalar(",
            "Fix pattern 11 :",
            "in the condition of using eval() before calling tf.train.start_queue_runners(x), if tf.start_queue_runners( is detected, Insert a call to tf.train start_queue_runners(x) before eval() and after the most recent assignment of variable x",
            ""
        ],
        "detection_result": "Yes",
        "result": "yes",
        "label": ""
    },
    {
        "number": "C:\\@code\\APIMISUSE\\data\\repo_tensorflow_test\\agents\\tf_agents\\environments\\gym_wrapper.py:259",
        "code_before": [
            "  def close(self) -> None:",
            "    return self._gym_env.close()",
            "",
            "  def seed(self, seed: types.Seed) -> types.Seed:",
            "    seed_value = self._gym_env.seed(seed)",
            "    if seed_value is None:",
            "      return 0",
            "    return seed_value",
            ""
        ],
        "example": [
            "Fix pattern 1 :",
            "in the condition of using a png file, if .decode_jpeg() detected, replace .decode_jpeg() with .decode_image()",
            "Fix pattern 2 :",
            "in the condition of using a png file, if .decode_jpeg() and .resize( detected, replace .decode_jpeg() with .decode_image() and replace .resize() with .resize_image_with_crop_or_pad(",
            "Fix pattern 3 :",
            "no precondition required, if tf.merge_summary( detected, replace it with tf.summary.merge(",
            "Fix pattern 4 :",
            "no precondition required, if tf.merge_all_summaries( detected, replace it with tf.summary.merge_all(",
            "Fix pattern 5 :",
            "no precondition required, if tf.train.SummaryWriter(detected, replace it with tf.summary.FileWriter(",
            "Fix pattern 6 :",
            "if the model is using binary class mode, if Dense(3, activation=`softmax`) detected, replace it with Dense(2, activation=`softmax`)",
            "Fix pattern 7 :",
            "in the condition of using cross entropy formula, if .softmax() detected, replace it tf.nn.softmax_cross_entropy_with_logits()",
            "Fix pattern 8 :",
            "in the condition of using @tf.function, add tf.range( and tf.cast() to API parameters",
            "Fix pattern 9 :",
            "no precondition required, if tf.histogram_summary( is detected, replace it with tf.summary.histogram(",
            "Fix pattern 10 :",
            "no precondition required, if tf.scalar_summary( is detected, replace it with tf.summary.scalar(",
            "Fix pattern 11 :",
            "in the condition of using eval() before calling tf.train.start_queue_runners(x), if tf.start_queue_runners( is detected, Insert a call to tf.train start_queue_runners(x) before eval() and after the most recent assignment of variable x",
            ""
        ],
        "detection_result": "Yes",
        "result": "yes",
        "label": ""
    },
    {
        "number": "C:\\@code\\APIMISUSE\\data\\repo_tensorflow_test\\agents\\tf_agents\\environments\\wrappers.py:391",
        "code_before": [
            "",
            "  def _step(self, action):",
            "    time_step = self._env.step(action)",
            "    return time_step._replace(observation=",
            "                              np.array(time_step.observation)[self._idx])",
            "",
            "  def observation_spec(self) -> types.NestedArraySpec:",
            "    return self._observation_spec",
            ""
        ],
        "example": [
            "Fix pattern 1 :",
            "in the condition of using a png file, if .decode_jpeg() detected, replace .decode_jpeg() with .decode_image()",
            "Fix pattern 2 :",
            "in the condition of using a png file, if .decode_jpeg() and .resize( detected, replace .decode_jpeg() with .decode_image() and replace .resize() with .resize_image_with_crop_or_pad(",
            "Fix pattern 3 :",
            "no precondition required, if tf.merge_summary( detected, replace it with tf.summary.merge(",
            "Fix pattern 4 :",
            "no precondition required, if tf.merge_all_summaries( detected, replace it with tf.summary.merge_all(",
            "Fix pattern 5 :",
            "no precondition required, if tf.train.SummaryWriter(detected, replace it with tf.summary.FileWriter(",
            "Fix pattern 6 :",
            "if the model is using binary class mode, if Dense(3, activation=`softmax`) detected, replace it with Dense(2, activation=`softmax`)",
            "Fix pattern 7 :",
            "in the condition of using cross entropy formula, if .softmax() detected, replace it tf.nn.softmax_cross_entropy_with_logits()",
            "Fix pattern 8 :",
            "in the condition of using @tf.function, add tf.range( and tf.cast() to API parameters",
            "Fix pattern 9 :",
            "no precondition required, if tf.histogram_summary( is detected, replace it with tf.summary.histogram(",
            "Fix pattern 10 :",
            "no precondition required, if tf.scalar_summary( is detected, replace it with tf.summary.scalar(",
            "Fix pattern 11 :",
            "in the condition of using eval() before calling tf.train.start_queue_runners(x), if tf.start_queue_runners( is detected, Insert a call to tf.train start_queue_runners(x) before eval() and after the most recent assignment of variable x",
            ""
        ],
        "detection_result": "Yes",
        "result": "yes",
        "label": ""
    },
    {
        "number": "C:\\@code\\APIMISUSE\\data\\repo_tensorflow_test\\agents\\tf_agents\\eval\\metric_utils.py:114",
        "code_before": [
            "  results = compute(metrics, environment, policy, num_episodes)",
            "  if tf_summaries:",
            "    py_metric.run_summaries(metrics)",
            "  if log:",
            "    log_metrics(metrics, prefix='Step = {}'.format(global_step))",
            "  if callback is not None:",
            "    callback(results, global_step)",
            "  return results",
            ""
        ],
        "example": [
            "Fix pattern 1 :",
            "in the condition of using a png file, if .decode_jpeg() detected, replace .decode_jpeg() with .decode_image()",
            "Fix pattern 2 :",
            "in the condition of using a png file, if .decode_jpeg() and .resize( detected, replace .decode_jpeg() with .decode_image() and replace .resize() with .resize_image_with_crop_or_pad(",
            "Fix pattern 3 :",
            "no precondition required, if tf.merge_summary( detected, replace it with tf.summary.merge(",
            "Fix pattern 4 :",
            "no precondition required, if tf.merge_all_summaries( detected, replace it with tf.summary.merge_all(",
            "Fix pattern 5 :",
            "no precondition required, if tf.train.SummaryWriter(detected, replace it with tf.summary.FileWriter(",
            "Fix pattern 6 :",
            "if the model is using binary class mode, if Dense(3, activation=`softmax`) detected, replace it with Dense(2, activation=`softmax`)",
            "Fix pattern 7 :",
            "in the condition of using cross entropy formula, if .softmax() detected, replace it tf.nn.softmax_cross_entropy_with_logits()",
            "Fix pattern 8 :",
            "in the condition of using @tf.function, add tf.range( and tf.cast() to API parameters",
            "Fix pattern 9 :",
            "no precondition required, if tf.histogram_summary( is detected, replace it with tf.summary.histogram(",
            "Fix pattern 10 :",
            "no precondition required, if tf.scalar_summary( is detected, replace it with tf.summary.scalar(",
            "Fix pattern 11 :",
            "in the condition of using eval() before calling tf.train.start_queue_runners(x), if tf.start_queue_runners( is detected, Insert a call to tf.train start_queue_runners(x) before eval() and after the most recent assignment of variable x",
            ""
        ],
        "detection_result": "Yes",
        "result": "yes",
        "label": ""
    },
    {
        "number": "C:\\@code\\APIMISUSE\\data\\repo_tensorflow_test\\agents\\tf_agents\\examples\\cql_sac\\kumar20\\dataset\\dataset_generator.py:95",
        "code_before": [
            "      if num_replicas == 1:",
            "        file_name = '%s.tfrecord' % FLAGS.env_name",
            "      else:",
            "        file_name = '%s_%d.tfrecord' % (FLAGS.env_name, i)",
            "      dataset_path = os.path.join(root_dir, file_name)",
            "      start_index = i * interval_size",
            "      end_index = min((i + 1) * interval_size, num_episodes)",
            "      kwargs = dict(",
            ""
        ],
        "example": [
            "Fix pattern 1 :",
            "in the condition of using a png file, if .decode_jpeg() detected, replace .decode_jpeg() with .decode_image()",
            "Fix pattern 2 :",
            "in the condition of using a png file, if .decode_jpeg() and .resize( detected, replace .decode_jpeg() with .decode_image() and replace .resize() with .resize_image_with_crop_or_pad(",
            "Fix pattern 3 :",
            "no precondition required, if tf.merge_summary( detected, replace it with tf.summary.merge(",
            "Fix pattern 4 :",
            "no precondition required, if tf.merge_all_summaries( detected, replace it with tf.summary.merge_all(",
            "Fix pattern 5 :",
            "no precondition required, if tf.train.SummaryWriter(detected, replace it with tf.summary.FileWriter(",
            "Fix pattern 6 :",
            "if the model is using binary class mode, if Dense(3, activation=`softmax`) detected, replace it with Dense(2, activation=`softmax`)",
            "Fix pattern 7 :",
            "in the condition of using cross entropy formula, if .softmax() detected, replace it tf.nn.softmax_cross_entropy_with_logits()",
            "Fix pattern 8 :",
            "in the condition of using @tf.function, add tf.range( and tf.cast() to API parameters",
            "Fix pattern 9 :",
            "no precondition required, if tf.histogram_summary( is detected, replace it with tf.summary.histogram(",
            "Fix pattern 10 :",
            "no precondition required, if tf.scalar_summary( is detected, replace it with tf.summary.scalar(",
            "Fix pattern 11 :",
            "in the condition of using eval() before calling tf.train.start_queue_runners(x), if tf.start_queue_runners( is detected, Insert a call to tf.train start_queue_runners(x) before eval() and after the most recent assignment of variable x",
            ""
        ],
        "detection_result": "Yes",
        "result": "yes",
        "label": ""
    },
    {
        "number": "C:\\@code\\APIMISUSE\\data\\repo_tensorflow_test\\agents\\tf_agents\\keras_layers\\rnn_wrapper.py:54",
        "code_before": [
            "    if not layer_config.get('return_state', False):",
            "      # This is an RNN layer that doesn't return state.",
            "      raise NotImplementedError(",
            "          'Provided a Keras RNN layer with return_state==False. '",
            "          'This configuration is not supported.  Layer: {}'.format(layer))",
            "    if not layer_config.get('return_sequences', False):",
            "      raise NotImplementedError(",
            "          'Provided a Keras RNN layer with return_sequences==False. '",
            ""
        ],
        "example": [
            "Fix pattern 1 :",
            "in the condition of using a png file, if .decode_jpeg() detected, replace .decode_jpeg() with .decode_image()",
            "Fix pattern 2 :",
            "in the condition of using a png file, if .decode_jpeg() and .resize( detected, replace .decode_jpeg() with .decode_image() and replace .resize() with .resize_image_with_crop_or_pad(",
            "Fix pattern 3 :",
            "no precondition required, if tf.merge_summary( detected, replace it with tf.summary.merge(",
            "Fix pattern 4 :",
            "no precondition required, if tf.merge_all_summaries( detected, replace it with tf.summary.merge_all(",
            "Fix pattern 5 :",
            "no precondition required, if tf.train.SummaryWriter(detected, replace it with tf.summary.FileWriter(",
            "Fix pattern 6 :",
            "if the model is using binary class mode, if Dense(3, activation=`softmax`) detected, replace it with Dense(2, activation=`softmax`)",
            "Fix pattern 7 :",
            "in the condition of using cross entropy formula, if .softmax() detected, replace it tf.nn.softmax_cross_entropy_with_logits()",
            "Fix pattern 8 :",
            "in the condition of using @tf.function, add tf.range( and tf.cast() to API parameters",
            "Fix pattern 9 :",
            "no precondition required, if tf.histogram_summary( is detected, replace it with tf.summary.histogram(",
            "Fix pattern 10 :",
            "no precondition required, if tf.scalar_summary( is detected, replace it with tf.summary.scalar(",
            "Fix pattern 11 :",
            "in the condition of using eval() before calling tf.train.start_queue_runners(x), if tf.start_queue_runners( is detected, Insert a call to tf.train start_queue_runners(x) before eval() and after the most recent assignment of variable x",
            ""
        ],
        "detection_result": "Yes",
        "result": "yes",
        "label": ""
    },
    {
        "number": "C:\\@code\\APIMISUSE\\data\\repo_tensorflow_test\\agents\\tf_agents\\metrics\\py_metric.py:136",
        "code_before": [
            "    for step_metric in step_metrics:",
            "      # Skip plotting the metrics against itself.",
            "      if self.name == step_metric.name:",
            "        continue",
            "      step_tag = '{}vs_{}/{}'.format(prefix, step_metric.name, self.name)",
            "      if isinstance(step_metric, PyMetric):",
            "        step_tensor = step_metric.summary_placeholder",
            "      elif isinstance(step_metric, tf_metric.TFStepMetric):",
            ""
        ],
        "example": [
            "Fix pattern 1 :",
            "in the condition of using a png file, if .decode_jpeg() detected, replace .decode_jpeg() with .decode_image()",
            "Fix pattern 2 :",
            "in the condition of using a png file, if .decode_jpeg() and .resize( detected, replace .decode_jpeg() with .decode_image() and replace .resize() with .resize_image_with_crop_or_pad(",
            "Fix pattern 3 :",
            "no precondition required, if tf.merge_summary( detected, replace it with tf.summary.merge(",
            "Fix pattern 4 :",
            "no precondition required, if tf.merge_all_summaries( detected, replace it with tf.summary.merge_all(",
            "Fix pattern 5 :",
            "no precondition required, if tf.train.SummaryWriter(detected, replace it with tf.summary.FileWriter(",
            "Fix pattern 6 :",
            "if the model is using binary class mode, if Dense(3, activation=`softmax`) detected, replace it with Dense(2, activation=`softmax`)",
            "Fix pattern 7 :",
            "in the condition of using cross entropy formula, if .softmax() detected, replace it tf.nn.softmax_cross_entropy_with_logits()",
            "Fix pattern 8 :",
            "in the condition of using @tf.function, add tf.range( and tf.cast() to API parameters",
            "Fix pattern 9 :",
            "no precondition required, if tf.histogram_summary( is detected, replace it with tf.summary.histogram(",
            "Fix pattern 10 :",
            "no precondition required, if tf.scalar_summary( is detected, replace it with tf.summary.scalar(",
            "Fix pattern 11 :",
            "in the condition of using eval() before calling tf.train.start_queue_runners(x), if tf.start_queue_runners( is detected, Insert a call to tf.train start_queue_runners(x) before eval() and after the most recent assignment of variable x",
            ""
        ],
        "detection_result": "Yes",
        "result": "yes",
        "label": ""
    },
    {
        "number": "C:\\@code\\APIMISUSE\\data\\repo_tensorflow_test\\agents\\tf_agents\\metrics\\tf_metric.py:112",
        "code_before": [
            "    tag = common.join_scope(prefix, self.name)",
            "    result = self.result()",
            "    if train_step is not None:",
            "      summaries.append(",
            "          tf.compat.v2.summary.scalar(name=tag, data=result, step=train_step))",
            "    if prefix:",
            "      prefix += '_'",
            "    for step_metric in step_metrics:",
            ""
        ],
        "example": [
            "Fix pattern 1 :",
            "in the condition of using a png file, if .decode_jpeg() detected, replace .decode_jpeg() with .decode_image()",
            "Fix pattern 2 :",
            "in the condition of using a png file, if .decode_jpeg() and .resize( detected, replace .decode_jpeg() with .decode_image() and replace .resize() with .resize_image_with_crop_or_pad(",
            "Fix pattern 3 :",
            "no precondition required, if tf.merge_summary( detected, replace it with tf.summary.merge(",
            "Fix pattern 4 :",
            "no precondition required, if tf.merge_all_summaries( detected, replace it with tf.summary.merge_all(",
            "Fix pattern 5 :",
            "no precondition required, if tf.train.SummaryWriter(detected, replace it with tf.summary.FileWriter(",
            "Fix pattern 6 :",
            "if the model is using binary class mode, if Dense(3, activation=`softmax`) detected, replace it with Dense(2, activation=`softmax`)",
            "Fix pattern 7 :",
            "in the condition of using cross entropy formula, if .softmax() detected, replace it tf.nn.softmax_cross_entropy_with_logits()",
            "Fix pattern 8 :",
            "in the condition of using @tf.function, add tf.range( and tf.cast() to API parameters",
            "Fix pattern 9 :",
            "no precondition required, if tf.histogram_summary( is detected, replace it with tf.summary.histogram(",
            "Fix pattern 10 :",
            "no precondition required, if tf.scalar_summary( is detected, replace it with tf.summary.scalar(",
            "Fix pattern 11 :",
            "in the condition of using eval() before calling tf.train.start_queue_runners(x), if tf.start_queue_runners( is detected, Insert a call to tf.train start_queue_runners(x) before eval() and after the most recent assignment of variable x",
            ""
        ],
        "detection_result": "Yes",
        "result": "yes",
        "label": ""
    },
    {
        "number": "C:\\@code\\APIMISUSE\\data\\repo_tensorflow_test\\agents\\tf_agents\\networks\\value_rnn_network.py:131",
        "code_before": [
            "    state, network_state = self._lstm_encoder(",
            "        observation, step_type=step_type, network_state=network_state,",
            "        training=training)",
            "    value = self._postprocessing_layers(state, training=training)",
            "    return tf.squeeze(value, -1), network_state",
            ""
        ],
        "example": [
            "Fix pattern 1 :",
            "in the condition of using a png file, if .decode_jpeg() detected, replace .decode_jpeg() with .decode_image()",
            "Fix pattern 2 :",
            "in the condition of using a png file, if .decode_jpeg() and .resize( detected, replace .decode_jpeg() with .decode_image() and replace .resize() with .resize_image_with_crop_or_pad(",
            "Fix pattern 3 :",
            "no precondition required, if tf.merge_summary( detected, replace it with tf.summary.merge(",
            "Fix pattern 4 :",
            "no precondition required, if tf.merge_all_summaries( detected, replace it with tf.summary.merge_all(",
            "Fix pattern 5 :",
            "no precondition required, if tf.train.SummaryWriter(detected, replace it with tf.summary.FileWriter(",
            "Fix pattern 6 :",
            "if the model is using binary class mode, if Dense(3, activation=`softmax`) detected, replace it with Dense(2, activation=`softmax`)",
            "Fix pattern 7 :",
            "in the condition of using cross entropy formula, if .softmax() detected, replace it tf.nn.softmax_cross_entropy_with_logits()",
            "Fix pattern 8 :",
            "in the condition of using @tf.function, add tf.range( and tf.cast() to API parameters",
            "Fix pattern 9 :",
            "no precondition required, if tf.histogram_summary( is detected, replace it with tf.summary.histogram(",
            "Fix pattern 10 :",
            "no precondition required, if tf.scalar_summary( is detected, replace it with tf.summary.scalar(",
            "Fix pattern 11 :",
            "in the condition of using eval() before calling tf.train.start_queue_runners(x), if tf.start_queue_runners( is detected, Insert a call to tf.train start_queue_runners(x) before eval() and after the most recent assignment of variable x",
            ""
        ],
        "detection_result": "Yes",
        "result": "yes",
        "label": ""
    },
    {
        "number": "C:\\@code\\APIMISUSE\\data\\repo_tensorflow_test\\agents\\tf_agents\\policies\\epsilon_greedy_policy.py:152",
        "code_before": [
            "            info.log_probability)",
            "        greedy_log_prob = tf.nest.map_structure(",
            "            lambda t: tf.math.log(tf.ones_like(t) - self._get_epsilon()),",
            "            random_log_prob)",
            "        log_prob_of_chosen_policy = nest_utils.where(cond, greedy_log_prob,",
            "                                                     random_log_prob)",
            "        log_prob = tf.nest.map_structure(lambda a, b: a + b,",
            "                                         log_prob_of_chosen_policy,",
            ""
        ],
        "example": [
            "Fix pattern 1 :",
            "in the condition of using a png file, if .decode_jpeg() detected, replace .decode_jpeg() with .decode_image()",
            "Fix pattern 2 :",
            "in the condition of using a png file, if .decode_jpeg() and .resize( detected, replace .decode_jpeg() with .decode_image() and replace .resize() with .resize_image_with_crop_or_pad(",
            "Fix pattern 3 :",
            "no precondition required, if tf.merge_summary( detected, replace it with tf.summary.merge(",
            "Fix pattern 4 :",
            "no precondition required, if tf.merge_all_summaries( detected, replace it with tf.summary.merge_all(",
            "Fix pattern 5 :",
            "no precondition required, if tf.train.SummaryWriter(detected, replace it with tf.summary.FileWriter(",
            "Fix pattern 6 :",
            "if the model is using binary class mode, if Dense(3, activation=`softmax`) detected, replace it with Dense(2, activation=`softmax`)",
            "Fix pattern 7 :",
            "in the condition of using cross entropy formula, if .softmax() detected, replace it tf.nn.softmax_cross_entropy_with_logits()",
            "Fix pattern 8 :",
            "in the condition of using @tf.function, add tf.range( and tf.cast() to API parameters",
            "Fix pattern 9 :",
            "no precondition required, if tf.histogram_summary( is detected, replace it with tf.summary.histogram(",
            "Fix pattern 10 :",
            "no precondition required, if tf.scalar_summary( is detected, replace it with tf.summary.scalar(",
            "Fix pattern 11 :",
            "in the condition of using eval() before calling tf.train.start_queue_runners(x), if tf.start_queue_runners( is detected, Insert a call to tf.train start_queue_runners(x) before eval() and after the most recent assignment of variable x",
            ""
        ],
        "detection_result": "Yes",
        "result": "yes",
        "label": ""
    },
    {
        "number": "C:\\@code\\APIMISUSE\\data\\repo_tensorflow_test\\agents\\tf_agents\\policies\\fixed_policy.py:96",
        "code_before": [
            "      policy_info = policy_step.set_log_probability(",
            "          self._policy_info, log_probability=log_probability)",
            "    else:",
            "      policy_info = self._policy_info",
            "    action = tf.nest.map_structure(lambda t: common.replicate(t, outer_shape),",
            "                                   self._action_value)",
            "    return policy_info, action",
            "",
            ""
        ],
        "example": [
            "Fix pattern 1 :",
            "in the condition of using a png file, if .decode_jpeg() detected, replace .decode_jpeg() with .decode_image()",
            "Fix pattern 2 :",
            "in the condition of using a png file, if .decode_jpeg() and .resize( detected, replace .decode_jpeg() with .decode_image() and replace .resize() with .resize_image_with_crop_or_pad(",
            "Fix pattern 3 :",
            "no precondition required, if tf.merge_summary( detected, replace it with tf.summary.merge(",
            "Fix pattern 4 :",
            "no precondition required, if tf.merge_all_summaries( detected, replace it with tf.summary.merge_all(",
            "Fix pattern 5 :",
            "no precondition required, if tf.train.SummaryWriter(detected, replace it with tf.summary.FileWriter(",
            "Fix pattern 6 :",
            "if the model is using binary class mode, if Dense(3, activation=`softmax`) detected, replace it with Dense(2, activation=`softmax`)",
            "Fix pattern 7 :",
            "in the condition of using cross entropy formula, if .softmax() detected, replace it tf.nn.softmax_cross_entropy_with_logits()",
            "Fix pattern 8 :",
            "in the condition of using @tf.function, add tf.range( and tf.cast() to API parameters",
            "Fix pattern 9 :",
            "no precondition required, if tf.histogram_summary( is detected, replace it with tf.summary.histogram(",
            "Fix pattern 10 :",
            "no precondition required, if tf.scalar_summary( is detected, replace it with tf.summary.scalar(",
            "Fix pattern 11 :",
            "in the condition of using eval() before calling tf.train.start_queue_runners(x), if tf.start_queue_runners( is detected, Insert a call to tf.train start_queue_runners(x) before eval() and after the most recent assignment of variable x",
            ""
        ],
        "detection_result": "Yes",
        "result": "yes",
        "label": ""
    },
    {
        "number": "C:\\@code\\APIMISUSE\\data\\repo_tensorflow_test\\agents\\tf_agents\\policies\\gaussian_policy.py:87",
        "code_before": [
            "",
            "    def _add_noise(action, distribution):",
            "      return action + distribution.sample(seed=seed_stream())",
            "",
            "    actions = tf.nest.map_structure(_add_noise, action_step.action,",
            "                                    self._noise_distribution)",
            "    return policy_step.PolicyStep(actions, action_step.state, action_step.info)",
            "",
            ""
        ],
        "example": [
            "Fix pattern 1 :",
            "in the condition of using a png file, if .decode_jpeg() detected, replace .decode_jpeg() with .decode_image()",
            "Fix pattern 2 :",
            "in the condition of using a png file, if .decode_jpeg() and .resize( detected, replace .decode_jpeg() with .decode_image() and replace .resize() with .resize_image_with_crop_or_pad(",
            "Fix pattern 3 :",
            "no precondition required, if tf.merge_summary( detected, replace it with tf.summary.merge(",
            "Fix pattern 4 :",
            "no precondition required, if tf.merge_all_summaries( detected, replace it with tf.summary.merge_all(",
            "Fix pattern 5 :",
            "no precondition required, if tf.train.SummaryWriter(detected, replace it with tf.summary.FileWriter(",
            "Fix pattern 6 :",
            "if the model is using binary class mode, if Dense(3, activation=`softmax`) detected, replace it with Dense(2, activation=`softmax`)",
            "Fix pattern 7 :",
            "in the condition of using cross entropy formula, if .softmax() detected, replace it tf.nn.softmax_cross_entropy_with_logits()",
            "Fix pattern 8 :",
            "in the condition of using @tf.function, add tf.range( and tf.cast() to API parameters",
            "Fix pattern 9 :",
            "no precondition required, if tf.histogram_summary( is detected, replace it with tf.summary.histogram(",
            "Fix pattern 10 :",
            "no precondition required, if tf.scalar_summary( is detected, replace it with tf.summary.scalar(",
            "Fix pattern 11 :",
            "in the condition of using eval() before calling tf.train.start_queue_runners(x), if tf.start_queue_runners( is detected, Insert a call to tf.train start_queue_runners(x) before eval() and after the most recent assignment of variable x",
            ""
        ],
        "detection_result": "Yes",
        "result": "yes",
        "label": ""
    },
    {
        "number": "C:\\@code\\APIMISUSE\\data\\repo_tensorflow_test\\agents\\tf_agents\\policies\\policy_saver.py:136",
        "code_before": [
            "  or to use the distributional form, e.g.:",
            "",
            "  ```python",
            "  batch_size = 3",
            "  saved_policy = tf.compat.v2.saved_model.load('policy_0')",
            "  policy_state = saved_policy.get_initial_state(batch_size=batch_size)",
            "  time_step = ...",
            "  while True:",
            ""
        ],
        "example": [
            "Fix pattern 1 :",
            "in the condition of using a png file, if .decode_jpeg() detected, replace .decode_jpeg() with .decode_image()",
            "Fix pattern 2 :",
            "in the condition of using a png file, if .decode_jpeg() and .resize( detected, replace .decode_jpeg() with .decode_image() and replace .resize() with .resize_image_with_crop_or_pad(",
            "Fix pattern 3 :",
            "no precondition required, if tf.merge_summary( detected, replace it with tf.summary.merge(",
            "Fix pattern 4 :",
            "no precondition required, if tf.merge_all_summaries( detected, replace it with tf.summary.merge_all(",
            "Fix pattern 5 :",
            "no precondition required, if tf.train.SummaryWriter(detected, replace it with tf.summary.FileWriter(",
            "Fix pattern 6 :",
            "if the model is using binary class mode, if Dense(3, activation=`softmax`) detected, replace it with Dense(2, activation=`softmax`)",
            "Fix pattern 7 :",
            "in the condition of using cross entropy formula, if .softmax() detected, replace it tf.nn.softmax_cross_entropy_with_logits()",
            "Fix pattern 8 :",
            "in the condition of using @tf.function, add tf.range( and tf.cast() to API parameters",
            "Fix pattern 9 :",
            "no precondition required, if tf.histogram_summary( is detected, replace it with tf.summary.histogram(",
            "Fix pattern 10 :",
            "no precondition required, if tf.scalar_summary( is detected, replace it with tf.summary.scalar(",
            "Fix pattern 11 :",
            "in the condition of using eval() before calling tf.train.start_queue_runners(x), if tf.start_queue_runners( is detected, Insert a call to tf.train start_queue_runners(x) before eval() and after the most recent assignment of variable x",
            ""
        ],
        "detection_result": "Yes",
        "result": "yes",
        "label": ""
    },
    {
        "number": "C:\\@code\\APIMISUSE\\data\\repo_tensorflow_test\\agents\\tf_agents\\policies\\py_epsilon_greedy_policy.py:121",
        "code_before": [
            "              policy_state=(),",
            "              seed: Optional[types.Seed] = None):",
            "    if seed is not None:",
            "      raise NotImplementedError(",
            "          'seed is not supported; but saw seed: {}'.format(seed))",
            "    self._count += 1",
            "    # _random_function()'s range should be [0, 1), so if epsilon is 1,",
            "    # we should always use random policy, and if epislon is 0, it",
            ""
        ],
        "example": [
            "Fix pattern 1 :",
            "in the condition of using a png file, if .decode_jpeg() detected, replace .decode_jpeg() with .decode_image()",
            "Fix pattern 2 :",
            "in the condition of using a png file, if .decode_jpeg() and .resize( detected, replace .decode_jpeg() with .decode_image() and replace .resize() with .resize_image_with_crop_or_pad(",
            "Fix pattern 3 :",
            "no precondition required, if tf.merge_summary( detected, replace it with tf.summary.merge(",
            "Fix pattern 4 :",
            "no precondition required, if tf.merge_all_summaries( detected, replace it with tf.summary.merge_all(",
            "Fix pattern 5 :",
            "no precondition required, if tf.train.SummaryWriter(detected, replace it with tf.summary.FileWriter(",
            "Fix pattern 6 :",
            "if the model is using binary class mode, if Dense(3, activation=`softmax`) detected, replace it with Dense(2, activation=`softmax`)",
            "Fix pattern 7 :",
            "in the condition of using cross entropy formula, if .softmax() detected, replace it tf.nn.softmax_cross_entropy_with_logits()",
            "Fix pattern 8 :",
            "in the condition of using @tf.function, add tf.range( and tf.cast() to API parameters",
            "Fix pattern 9 :",
            "no precondition required, if tf.histogram_summary( is detected, replace it with tf.summary.histogram(",
            "Fix pattern 10 :",
            "no precondition required, if tf.scalar_summary( is detected, replace it with tf.summary.scalar(",
            "Fix pattern 11 :",
            "in the condition of using eval() before calling tf.train.start_queue_runners(x), if tf.start_queue_runners( is detected, Insert a call to tf.train start_queue_runners(x) before eval() and after the most recent assignment of variable x",
            ""
        ],
        "detection_result": "Yes",
        "result": "yes",
        "label": ""
    },
    {
        "number": "C:\\@code\\APIMISUSE\\data\\repo_tensorflow_test\\agents\\tf_agents\\replay_buffers\\episodic_replay_buffer.py:1262",
        "code_before": [
            "      episode_valid_idx = tf.reshape(tf.compat.v1.where(episode_valid), [-1])",
            "      episode_locations = tf.gather(episode_locations, episode_valid_idx)",
            "      increment_lengths = self._increment_episode_length_locked(",
            "          episode_locations,",
            "          tf.gather(episodes.length, episode_valid_idx))",
            "      set_completed = tf.compat.v1.scatter_update(",
            "          self._episode_completed, episode_locations,",
            "          tf.gather(episodes.completed, episode_valid_idx))",
            ""
        ],
        "example": [
            "Fix pattern 1 :",
            "in the condition of using a png file, if .decode_jpeg() detected, replace .decode_jpeg() with .decode_image()",
            "Fix pattern 2 :",
            "in the condition of using a png file, if .decode_jpeg() and .resize( detected, replace .decode_jpeg() with .decode_image() and replace .resize() with .resize_image_with_crop_or_pad(",
            "Fix pattern 3 :",
            "no precondition required, if tf.merge_summary( detected, replace it with tf.summary.merge(",
            "Fix pattern 4 :",
            "no precondition required, if tf.merge_all_summaries( detected, replace it with tf.summary.merge_all(",
            "Fix pattern 5 :",
            "no precondition required, if tf.train.SummaryWriter(detected, replace it with tf.summary.FileWriter(",
            "Fix pattern 6 :",
            "if the model is using binary class mode, if Dense(3, activation=`softmax`) detected, replace it with Dense(2, activation=`softmax`)",
            "Fix pattern 7 :",
            "in the condition of using cross entropy formula, if .softmax() detected, replace it tf.nn.softmax_cross_entropy_with_logits()",
            "Fix pattern 8 :",
            "in the condition of using @tf.function, add tf.range( and tf.cast() to API parameters",
            "Fix pattern 9 :",
            "no precondition required, if tf.histogram_summary( is detected, replace it with tf.summary.histogram(",
            "Fix pattern 10 :",
            "no precondition required, if tf.scalar_summary( is detected, replace it with tf.summary.scalar(",
            "Fix pattern 11 :",
            "in the condition of using eval() before calling tf.train.start_queue_runners(x), if tf.start_queue_runners( is detected, Insert a call to tf.train start_queue_runners(x) before eval() and after the most recent assignment of variable x",
            ""
        ],
        "detection_result": "Yes",
        "result": "yes",
        "label": ""
    },
    {
        "number": "C:\\@code\\APIMISUSE\\data\\repo_tensorflow_test\\agents\\tf_agents\\replay_buffers\\episodic_table.py:251",
        "code_before": [
            "      rows: A list/tensor of location(s) to clear values.",
            "    Returns:",
            "      Ops for clearing the values at rows.",
            "    \"\"\"",
            "    rows = tf.convert_to_tensor(value=rows, dtype=tf.int64)",
            "    clear_ops = []",
            "    for spec, slot in zip(self._flattened_specs, self._flattened_slots):",
            "      new_value = tf.fill([tf.size(input=rows)], _empty_slot(spec))",
            ""
        ],
        "example": [
            "Fix pattern 1 :",
            "in the condition of using a png file, if .decode_jpeg() detected, replace .decode_jpeg() with .decode_image()",
            "Fix pattern 2 :",
            "in the condition of using a png file, if .decode_jpeg() and .resize( detected, replace .decode_jpeg() with .decode_image() and replace .resize() with .resize_image_with_crop_or_pad(",
            "Fix pattern 3 :",
            "no precondition required, if tf.merge_summary( detected, replace it with tf.summary.merge(",
            "Fix pattern 4 :",
            "no precondition required, if tf.merge_all_summaries( detected, replace it with tf.summary.merge_all(",
            "Fix pattern 5 :",
            "no precondition required, if tf.train.SummaryWriter(detected, replace it with tf.summary.FileWriter(",
            "Fix pattern 6 :",
            "if the model is using binary class mode, if Dense(3, activation=`softmax`) detected, replace it with Dense(2, activation=`softmax`)",
            "Fix pattern 7 :",
            "in the condition of using cross entropy formula, if .softmax() detected, replace it tf.nn.softmax_cross_entropy_with_logits()",
            "Fix pattern 8 :",
            "in the condition of using @tf.function, add tf.range( and tf.cast() to API parameters",
            "Fix pattern 9 :",
            "no precondition required, if tf.histogram_summary( is detected, replace it with tf.summary.histogram(",
            "Fix pattern 10 :",
            "no precondition required, if tf.scalar_summary( is detected, replace it with tf.summary.scalar(",
            "Fix pattern 11 :",
            "in the condition of using eval() before calling tf.train.start_queue_runners(x), if tf.start_queue_runners( is detected, Insert a call to tf.train start_queue_runners(x) before eval() and after the most recent assignment of variable x",
            ""
        ],
        "detection_result": "Yes",
        "result": "yes",
        "label": ""
    },
    {
        "number": "C:\\@code\\APIMISUSE\\data\\repo_tensorflow_test\\agents\\tf_agents\\replay_buffers\\rlds_to_reverb.py:319",
        "code_before": [
            "  steps = 0",
            "  for entry in convert_rlds_to_trajectories(rlds_data, policy_info_fn):",
            "    reverb_observer(entry)",
            "    steps += 1",
            "  logging.info('Successfully wrote %d steps to Reverb.', steps)",
            "  return steps",
            ""
        ],
        "example": [
            "Fix pattern 1 :",
            "in the condition of using a png file, if .decode_jpeg() detected, replace .decode_jpeg() with .decode_image()",
            "Fix pattern 2 :",
            "in the condition of using a png file, if .decode_jpeg() and .resize( detected, replace .decode_jpeg() with .decode_image() and replace .resize() with .resize_image_with_crop_or_pad(",
            "Fix pattern 3 :",
            "no precondition required, if tf.merge_summary( detected, replace it with tf.summary.merge(",
            "Fix pattern 4 :",
            "no precondition required, if tf.merge_all_summaries( detected, replace it with tf.summary.merge_all(",
            "Fix pattern 5 :",
            "no precondition required, if tf.train.SummaryWriter(detected, replace it with tf.summary.FileWriter(",
            "Fix pattern 6 :",
            "if the model is using binary class mode, if Dense(3, activation=`softmax`) detected, replace it with Dense(2, activation=`softmax`)",
            "Fix pattern 7 :",
            "in the condition of using cross entropy formula, if .softmax() detected, replace it tf.nn.softmax_cross_entropy_with_logits()",
            "Fix pattern 8 :",
            "in the condition of using @tf.function, add tf.range( and tf.cast() to API parameters",
            "Fix pattern 9 :",
            "no precondition required, if tf.histogram_summary( is detected, replace it with tf.summary.histogram(",
            "Fix pattern 10 :",
            "no precondition required, if tf.scalar_summary( is detected, replace it with tf.summary.scalar(",
            "Fix pattern 11 :",
            "in the condition of using eval() before calling tf.train.start_queue_runners(x), if tf.start_queue_runners( is detected, Insert a call to tf.train start_queue_runners(x) before eval() and after the most recent assignment of variable x",
            ""
        ],
        "detection_result": "Yes",
        "result": "yes",
        "label": ""
    },
    {
        "number": "C:\\@code\\APIMISUSE\\data\\repo_tensorflow_test\\agents\\tf_agents\\replay_buffers\\tf_uniform_replay_buffer.py:291",
        "code_before": [
            "              data.append(items)",
            "              data_ids.append(self._id_table.read(steps_to_get))",
            "            data = tuple(data)",
            "            data_ids = tuple(data_ids)",
            "        probabilities = tf.fill(rows_shape, probability)",
            "",
            "        buffer_info = BufferInfo(ids=data_ids,",
            "                                 probabilities=probabilities)",
            ""
        ],
        "example": [
            "Fix pattern 1 :",
            "in the condition of using a png file, if .decode_jpeg() detected, replace .decode_jpeg() with .decode_image()",
            "Fix pattern 2 :",
            "in the condition of using a png file, if .decode_jpeg() and .resize( detected, replace .decode_jpeg() with .decode_image() and replace .resize() with .resize_image_with_crop_or_pad(",
            "Fix pattern 3 :",
            "no precondition required, if tf.merge_summary( detected, replace it with tf.summary.merge(",
            "Fix pattern 4 :",
            "no precondition required, if tf.merge_all_summaries( detected, replace it with tf.summary.merge_all(",
            "Fix pattern 5 :",
            "no precondition required, if tf.train.SummaryWriter(detected, replace it with tf.summary.FileWriter(",
            "Fix pattern 6 :",
            "if the model is using binary class mode, if Dense(3, activation=`softmax`) detected, replace it with Dense(2, activation=`softmax`)",
            "Fix pattern 7 :",
            "in the condition of using cross entropy formula, if .softmax() detected, replace it tf.nn.softmax_cross_entropy_with_logits()",
            "Fix pattern 8 :",
            "in the condition of using @tf.function, add tf.range( and tf.cast() to API parameters",
            "Fix pattern 9 :",
            "no precondition required, if tf.histogram_summary( is detected, replace it with tf.summary.histogram(",
            "Fix pattern 10 :",
            "no precondition required, if tf.scalar_summary( is detected, replace it with tf.summary.scalar(",
            "Fix pattern 11 :",
            "in the condition of using eval() before calling tf.train.start_queue_runners(x), if tf.start_queue_runners( is detected, Insert a call to tf.train start_queue_runners(x) before eval() and after the most recent assignment of variable x",
            ""
        ],
        "detection_result": "Yes",
        "result": "yes",
        "label": ""
    },
    {
        "number": "C:\\@code\\APIMISUSE\\data\\repo_tensorflow_test\\agents\\tf_agents\\utils\\common.py:686",
        "code_before": [
            "  nest_utils.assert_same_structure(distributions, actions)",
            "  log_probs = [",
            "      _compute_log_prob(dist, action)",
            "      for (dist, action",
            "          ) in zip(tf.nest.flatten(distributions), tf.nest.flatten(actions))",
            "  ]",
            "",
            "  # sum log-probs over action tuple",
            ""
        ],
        "example": [
            "Fix pattern 1 :",
            "in the condition of using a png file, if .decode_jpeg() detected, replace .decode_jpeg() with .decode_image()",
            "Fix pattern 2 :",
            "in the condition of using a png file, if .decode_jpeg() and .resize( detected, replace .decode_jpeg() with .decode_image() and replace .resize() with .resize_image_with_crop_or_pad(",
            "Fix pattern 3 :",
            "no precondition required, if tf.merge_summary( detected, replace it with tf.summary.merge(",
            "Fix pattern 4 :",
            "no precondition required, if tf.merge_all_summaries( detected, replace it with tf.summary.merge_all(",
            "Fix pattern 5 :",
            "no precondition required, if tf.train.SummaryWriter(detected, replace it with tf.summary.FileWriter(",
            "Fix pattern 6 :",
            "if the model is using binary class mode, if Dense(3, activation=`softmax`) detected, replace it with Dense(2, activation=`softmax`)",
            "Fix pattern 7 :",
            "in the condition of using cross entropy formula, if .softmax() detected, replace it tf.nn.softmax_cross_entropy_with_logits()",
            "Fix pattern 8 :",
            "in the condition of using @tf.function, add tf.range( and tf.cast() to API parameters",
            "Fix pattern 9 :",
            "no precondition required, if tf.histogram_summary( is detected, replace it with tf.summary.histogram(",
            "Fix pattern 10 :",
            "no precondition required, if tf.scalar_summary( is detected, replace it with tf.summary.scalar(",
            "Fix pattern 11 :",
            "in the condition of using eval() before calling tf.train.start_queue_runners(x), if tf.start_queue_runners( is detected, Insert a call to tf.train start_queue_runners(x) before eval() and after the most recent assignment of variable x",
            ""
        ],
        "detection_result": "Yes",
        "result": "yes",
        "label": ""
    },
    {
        "number": "C:\\@code\\APIMISUSE\\data\\repo_tensorflow_test\\agents\\tf_agents\\utils\\common.py:1404",
        "code_before": [
            "  if name_data:",
            "    with tf.name_scope(name_scope):",
            "      for name, data in name_data.items():",
            "        if data is not None:",
            "          tf.compat.v2.summary.scalar(",
            "              name=name, data=data, step=step)",
            "",
            "",
            ""
        ],
        "example": [
            "Fix pattern 1 :",
            "in the condition of using a png file, if .decode_jpeg() detected, replace .decode_jpeg() with .decode_image()",
            "Fix pattern 2 :",
            "in the condition of using a png file, if .decode_jpeg() and .resize( detected, replace .decode_jpeg() with .decode_image() and replace .resize() with .resize_image_with_crop_or_pad(",
            "Fix pattern 3 :",
            "no precondition required, if tf.merge_summary( detected, replace it with tf.summary.merge(",
            "Fix pattern 4 :",
            "no precondition required, if tf.merge_all_summaries( detected, replace it with tf.summary.merge_all(",
            "Fix pattern 5 :",
            "no precondition required, if tf.train.SummaryWriter(detected, replace it with tf.summary.FileWriter(",
            "Fix pattern 6 :",
            "if the model is using binary class mode, if Dense(3, activation=`softmax`) detected, replace it with Dense(2, activation=`softmax`)",
            "Fix pattern 7 :",
            "in the condition of using cross entropy formula, if .softmax() detected, replace it tf.nn.softmax_cross_entropy_with_logits()",
            "Fix pattern 8 :",
            "in the condition of using @tf.function, add tf.range( and tf.cast() to API parameters",
            "Fix pattern 9 :",
            "no precondition required, if tf.histogram_summary( is detected, replace it with tf.summary.histogram(",
            "Fix pattern 10 :",
            "no precondition required, if tf.scalar_summary( is detected, replace it with tf.summary.scalar(",
            "Fix pattern 11 :",
            "in the condition of using eval() before calling tf.train.start_queue_runners(x), if tf.start_queue_runners( is detected, Insert a call to tf.train start_queue_runners(x) before eval() and after the most recent assignment of variable x",
            ""
        ],
        "detection_result": "Yes",
        "result": "yes",
        "label": ""
    },
    {
        "number": "C:\\@code\\APIMISUSE\\data\\repo_tensorflow_test\\agents\\tf_agents\\utils\\example_encoding.py:194",
        "code_before": [
            "  supported_dtypes = (tf.half, tf.float32, tf.float64, tf.uint8, tf.int8,",
            "                      tf.uint16, tf.int16, tf.int32, tf.int64)",
            "  if dtype not in supported_dtypes:",
            "    raise ValueError('%s is not supported, dtype must be one of %s' %",
            "                     (dtype.name, ', '.join(d.name for d in supported_dtypes)))",
            "  return dtype",
            "",
            "",
            ""
        ],
        "example": [
            "Fix pattern 1 :",
            "in the condition of using a png file, if .decode_jpeg() detected, replace .decode_jpeg() with .decode_image()",
            "Fix pattern 2 :",
            "in the condition of using a png file, if .decode_jpeg() and .resize( detected, replace .decode_jpeg() with .decode_image() and replace .resize() with .resize_image_with_crop_or_pad(",
            "Fix pattern 3 :",
            "no precondition required, if tf.merge_summary( detected, replace it with tf.summary.merge(",
            "Fix pattern 4 :",
            "no precondition required, if tf.merge_all_summaries( detected, replace it with tf.summary.merge_all(",
            "Fix pattern 5 :",
            "no precondition required, if tf.train.SummaryWriter(detected, replace it with tf.summary.FileWriter(",
            "Fix pattern 6 :",
            "if the model is using binary class mode, if Dense(3, activation=`softmax`) detected, replace it with Dense(2, activation=`softmax`)",
            "Fix pattern 7 :",
            "in the condition of using cross entropy formula, if .softmax() detected, replace it tf.nn.softmax_cross_entropy_with_logits()",
            "Fix pattern 8 :",
            "in the condition of using @tf.function, add tf.range( and tf.cast() to API parameters",
            "Fix pattern 9 :",
            "no precondition required, if tf.histogram_summary( is detected, replace it with tf.summary.histogram(",
            "Fix pattern 10 :",
            "no precondition required, if tf.scalar_summary( is detected, replace it with tf.summary.scalar(",
            "Fix pattern 11 :",
            "in the condition of using eval() before calling tf.train.start_queue_runners(x), if tf.start_queue_runners( is detected, Insert a call to tf.train start_queue_runners(x) before eval() and after the most recent assignment of variable x",
            ""
        ],
        "detection_result": "Yes",
        "result": "yes",
        "label": ""
    },
    {
        "number": "C:\\@code\\APIMISUSE\\data\\repo_tensorflow_test\\agents\\tf_agents\\utils\\example_encoding.py:231",
        "code_before": [
            "        im = Image.fromarray(value[:, :, 0])",
            "      else:",
            "        im = Image.fromarray(value)",
            "      out = io.BytesIO()",
            "      im.save(out, format='jpeg', quality=image_quality)",
            "      return tf.train.Feature(",
            "          bytes_list=tf.train.BytesList(value=[out.getvalue()]))",
            "",
            ""
        ],
        "example": [
            "Fix pattern 1 :",
            "in the condition of using a png file, if .decode_jpeg() detected, replace .decode_jpeg() with .decode_image()",
            "Fix pattern 2 :",
            "in the condition of using a png file, if .decode_jpeg() and .resize( detected, replace .decode_jpeg() with .decode_image() and replace .resize() with .resize_image_with_crop_or_pad(",
            "Fix pattern 3 :",
            "no precondition required, if tf.merge_summary( detected, replace it with tf.summary.merge(",
            "Fix pattern 4 :",
            "no precondition required, if tf.merge_all_summaries( detected, replace it with tf.summary.merge_all(",
            "Fix pattern 5 :",
            "no precondition required, if tf.train.SummaryWriter(detected, replace it with tf.summary.FileWriter(",
            "Fix pattern 6 :",
            "if the model is using binary class mode, if Dense(3, activation=`softmax`) detected, replace it with Dense(2, activation=`softmax`)",
            "Fix pattern 7 :",
            "in the condition of using cross entropy formula, if .softmax() detected, replace it tf.nn.softmax_cross_entropy_with_logits()",
            "Fix pattern 8 :",
            "in the condition of using @tf.function, add tf.range( and tf.cast() to API parameters",
            "Fix pattern 9 :",
            "no precondition required, if tf.histogram_summary( is detected, replace it with tf.summary.histogram(",
            "Fix pattern 10 :",
            "no precondition required, if tf.scalar_summary( is detected, replace it with tf.summary.scalar(",
            "Fix pattern 11 :",
            "in the condition of using eval() before calling tf.train.start_queue_runners(x), if tf.start_queue_runners( is detected, Insert a call to tf.train start_queue_runners(x) before eval() and after the most recent assignment of variable x",
            ""
        ],
        "detection_result": "Yes",
        "result": "yes",
        "label": ""
    },
    {
        "number": "C:\\@code\\APIMISUSE\\data\\repo_tensorflow_test\\agents\\tf_agents\\utils\\example_encoding_dataset.py:159",
        "code_before": [
            "",
            "  def close(self):",
            "    \"\"\"Close the TFRecord writer.\"\"\"",
            "    self._writer.close()",
            "    logging.info('Closing TFRecord file at %s', self.output_path)",
            "",
            "  def __call__(self, data):",
            "    \"\"\"If not in py_mode Wraps write() into a TF op for eager execution.\"\"\"",
            ""
        ],
        "example": [
            "Fix pattern 1 :",
            "in the condition of using a png file, if .decode_jpeg() detected, replace .decode_jpeg() with .decode_image()",
            "Fix pattern 2 :",
            "in the condition of using a png file, if .decode_jpeg() and .resize( detected, replace .decode_jpeg() with .decode_image() and replace .resize() with .resize_image_with_crop_or_pad(",
            "Fix pattern 3 :",
            "no precondition required, if tf.merge_summary( detected, replace it with tf.summary.merge(",
            "Fix pattern 4 :",
            "no precondition required, if tf.merge_all_summaries( detected, replace it with tf.summary.merge_all(",
            "Fix pattern 5 :",
            "no precondition required, if tf.train.SummaryWriter(detected, replace it with tf.summary.FileWriter(",
            "Fix pattern 6 :",
            "if the model is using binary class mode, if Dense(3, activation=`softmax`) detected, replace it with Dense(2, activation=`softmax`)",
            "Fix pattern 7 :",
            "in the condition of using cross entropy formula, if .softmax() detected, replace it tf.nn.softmax_cross_entropy_with_logits()",
            "Fix pattern 8 :",
            "in the condition of using @tf.function, add tf.range( and tf.cast() to API parameters",
            "Fix pattern 9 :",
            "no precondition required, if tf.histogram_summary( is detected, replace it with tf.summary.histogram(",
            "Fix pattern 10 :",
            "no precondition required, if tf.scalar_summary( is detected, replace it with tf.summary.scalar(",
            "Fix pattern 11 :",
            "in the condition of using eval() before calling tf.train.start_queue_runners(x), if tf.start_queue_runners( is detected, Insert a call to tf.train start_queue_runners(x) before eval() and after the most recent assignment of variable x",
            ""
        ],
        "detection_result": "Yes",
        "result": "yes",
        "label": ""
    },
    {
        "number": "C:\\@code\\APIMISUSE\\data\\repo_tensorflow_test\\agents\\tf_agents\\utils\\example_encoding_dataset.py:164",
        "code_before": [
            "",
            "  def __call__(self, data):",
            "    \"\"\"If not in py_mode Wraps write() into a TF op for eager execution.\"\"\"",
            "    if self._py_mode:",
            "      self.write(data)",
            "    else:",
            "      flat_data = tf.nest.flatten(data)",
            "      tf.numpy_function(self.write, flat_data, [], name='encoder_observer')",
            ""
        ],
        "example": [
            "Fix pattern 1 :",
            "in the condition of using a png file, if .decode_jpeg() detected, replace .decode_jpeg() with .decode_image()",
            "Fix pattern 2 :",
            "in the condition of using a png file, if .decode_jpeg() and .resize( detected, replace .decode_jpeg() with .decode_image() and replace .resize() with .resize_image_with_crop_or_pad(",
            "Fix pattern 3 :",
            "no precondition required, if tf.merge_summary( detected, replace it with tf.summary.merge(",
            "Fix pattern 4 :",
            "no precondition required, if tf.merge_all_summaries( detected, replace it with tf.summary.merge_all(",
            "Fix pattern 5 :",
            "no precondition required, if tf.train.SummaryWriter(detected, replace it with tf.summary.FileWriter(",
            "Fix pattern 6 :",
            "if the model is using binary class mode, if Dense(3, activation=`softmax`) detected, replace it with Dense(2, activation=`softmax`)",
            "Fix pattern 7 :",
            "in the condition of using cross entropy formula, if .softmax() detected, replace it tf.nn.softmax_cross_entropy_with_logits()",
            "Fix pattern 8 :",
            "in the condition of using @tf.function, add tf.range( and tf.cast() to API parameters",
            "Fix pattern 9 :",
            "no precondition required, if tf.histogram_summary( is detected, replace it with tf.summary.histogram(",
            "Fix pattern 10 :",
            "no precondition required, if tf.scalar_summary( is detected, replace it with tf.summary.scalar(",
            "Fix pattern 11 :",
            "in the condition of using eval() before calling tf.train.start_queue_runners(x), if tf.start_queue_runners( is detected, Insert a call to tf.train start_queue_runners(x) before eval() and after the most recent assignment of variable x",
            ""
        ],
        "detection_result": "Yes",
        "result": "yes",
        "label": ""
    },
    {
        "number": "C:\\@code\\APIMISUSE\\data\\repo_tensorflow_test\\agents\\tf_agents\\utils\\nest_utils.py:1055",
        "code_before": [
            "",
            "    return tf.nest.map_structure(per_field_where, true_outputs, false_outputs)",
            "  else:",
            "    return tf.nest.map_structure(",
            "        lambda t, f: tf.compat.v2.where(condition, t, f), true_outputs,",
            "        false_outputs)",
            "",
            "",
            ""
        ],
        "example": [
            "Fix pattern 1 :",
            "in the condition of using a png file, if .decode_jpeg() detected, replace .decode_jpeg() with .decode_image()",
            "Fix pattern 2 :",
            "in the condition of using a png file, if .decode_jpeg() and .resize( detected, replace .decode_jpeg() with .decode_image() and replace .resize() with .resize_image_with_crop_or_pad(",
            "Fix pattern 3 :",
            "no precondition required, if tf.merge_summary( detected, replace it with tf.summary.merge(",
            "Fix pattern 4 :",
            "no precondition required, if tf.merge_all_summaries( detected, replace it with tf.summary.merge_all(",
            "Fix pattern 5 :",
            "no precondition required, if tf.train.SummaryWriter(detected, replace it with tf.summary.FileWriter(",
            "Fix pattern 6 :",
            "if the model is using binary class mode, if Dense(3, activation=`softmax`) detected, replace it with Dense(2, activation=`softmax`)",
            "Fix pattern 7 :",
            "in the condition of using cross entropy formula, if .softmax() detected, replace it tf.nn.softmax_cross_entropy_with_logits()",
            "Fix pattern 8 :",
            "in the condition of using @tf.function, add tf.range( and tf.cast() to API parameters",
            "Fix pattern 9 :",
            "no precondition required, if tf.histogram_summary( is detected, replace it with tf.summary.histogram(",
            "Fix pattern 10 :",
            "no precondition required, if tf.scalar_summary( is detected, replace it with tf.summary.scalar(",
            "Fix pattern 11 :",
            "in the condition of using eval() before calling tf.train.start_queue_runners(x), if tf.start_queue_runners( is detected, Insert a call to tf.train start_queue_runners(x) before eval() and after the most recent assignment of variable x",
            ""
        ],
        "detection_result": "Yes",
        "result": "yes",
        "label": ""
    },
    {
        "number": "C:\\@code\\APIMISUSE\\data\\repo_tensorflow_test\\AlphaZero_Gomoku\\policy_value_net.py:19",
        "code_before": [
            "    \"\"\"policy-value network \"\"\"",
            "    def __init__(self, board_width, board_height, model_file=None):",
            "        self.board_width = board_width",
            "        self.board_height = board_height",
            "        self.learning_rate = T.scalar('learning_rate')",
            "        self.l2_const = 1e-4  # coef of l2 penalty",
            "        self.create_policy_value_net()",
            "        self._loss_train_op()",
            ""
        ],
        "example": [
            "Fix pattern 1 :",
            "in the condition of using a png file, if .decode_jpeg() detected, replace .decode_jpeg() with .decode_image()",
            "Fix pattern 2 :",
            "in the condition of using a png file, if .decode_jpeg() and .resize( detected, replace .decode_jpeg() with .decode_image() and replace .resize() with .resize_image_with_crop_or_pad(",
            "Fix pattern 3 :",
            "no precondition required, if tf.merge_summary( detected, replace it with tf.summary.merge(",
            "Fix pattern 4 :",
            "no precondition required, if tf.merge_all_summaries( detected, replace it with tf.summary.merge_all(",
            "Fix pattern 5 :",
            "no precondition required, if tf.train.SummaryWriter(detected, replace it with tf.summary.FileWriter(",
            "Fix pattern 6 :",
            "if the model is using binary class mode, if Dense(3, activation=`softmax`) detected, replace it with Dense(2, activation=`softmax`)",
            "Fix pattern 7 :",
            "in the condition of using cross entropy formula, if .softmax() detected, replace it tf.nn.softmax_cross_entropy_with_logits()",
            "Fix pattern 8 :",
            "in the condition of using @tf.function, add tf.range( and tf.cast() to API parameters",
            "Fix pattern 9 :",
            "no precondition required, if tf.histogram_summary( is detected, replace it with tf.summary.histogram(",
            "Fix pattern 10 :",
            "no precondition required, if tf.scalar_summary( is detected, replace it with tf.summary.scalar(",
            "Fix pattern 11 :",
            "in the condition of using eval() before calling tf.train.start_queue_runners(x), if tf.start_queue_runners( is detected, Insert a call to tf.train start_queue_runners(x) before eval() and after the most recent assignment of variable x",
            ""
        ],
        "detection_result": "Yes",
        "result": "yes",
        "label": ""
    },
    {
        "number": "C:\\@code\\APIMISUSE\\data\\repo_tensorflow_test\\Automatic_Speech_Recognition\\speechvalley\\feature\\libri\\libri_preprocess.py:47",
        "code_before": [
            "                        subfile = os.path.join(subdir, sub_n)",
            "                        sub_c = ' '.join(line.split(' ')[1:])",
            "                        sub_c = sub_c.lower()",
            "                        with open(subfile, 'w') as sp:",
            "                            sp.write(sub_c)",
            "            elif f.endswith('.wav'):",
            "                if not os.path.isfile(os.path.splitext(filename)[0] +",
            "                                      '.label'):",
            ""
        ],
        "example": [
            "Fix pattern 1 :",
            "in the condition of using a png file, if .decode_jpeg() detected, replace .decode_jpeg() with .decode_image()",
            "Fix pattern 2 :",
            "in the condition of using a png file, if .decode_jpeg() and .resize( detected, replace .decode_jpeg() with .decode_image() and replace .resize() with .resize_image_with_crop_or_pad(",
            "Fix pattern 3 :",
            "no precondition required, if tf.merge_summary( detected, replace it with tf.summary.merge(",
            "Fix pattern 4 :",
            "no precondition required, if tf.merge_all_summaries( detected, replace it with tf.summary.merge_all(",
            "Fix pattern 5 :",
            "no precondition required, if tf.train.SummaryWriter(detected, replace it with tf.summary.FileWriter(",
            "Fix pattern 6 :",
            "if the model is using binary class mode, if Dense(3, activation=`softmax`) detected, replace it with Dense(2, activation=`softmax`)",
            "Fix pattern 7 :",
            "in the condition of using cross entropy formula, if .softmax() detected, replace it tf.nn.softmax_cross_entropy_with_logits()",
            "Fix pattern 8 :",
            "in the condition of using @tf.function, add tf.range( and tf.cast() to API parameters",
            "Fix pattern 9 :",
            "no precondition required, if tf.histogram_summary( is detected, replace it with tf.summary.histogram(",
            "Fix pattern 10 :",
            "no precondition required, if tf.scalar_summary( is detected, replace it with tf.summary.scalar(",
            "Fix pattern 11 :",
            "in the condition of using eval() before calling tf.train.start_queue_runners(x), if tf.start_queue_runners( is detected, Insert a call to tf.train start_queue_runners(x) before eval() and after the most recent assignment of variable x",
            ""
        ],
        "detection_result": "Yes",
        "result": "yes",
        "label": ""
    },
    {
        "number": "C:\\@code\\APIMISUSE\\data\\repo_tensorflow_test\\Automatic_Speech_Recognition\\speechvalley\\feature\\madarian\\digit2character.py:180",
        "code_before": [
            "    rootdir='/media/pony/DLdigest/data/ASR_zh'",
            "    r1 = re.compile(r'\\d+')",
            "    for subdir, dirs, files in os.walk(rootdir):",
            "        for file in files:",
            "            fullFilename = os.path.join(subdir, file)",
            "            filenameNoSuffix =  os.path.splitext(fullFilename)[0]",
            "            if file.endswith('.label'):",
            "                with open(fullFilename, 'r') as f:",
            ""
        ],
        "example": [
            "Fix pattern 1 :",
            "in the condition of using a png file, if .decode_jpeg() detected, replace .decode_jpeg() with .decode_image()",
            "Fix pattern 2 :",
            "in the condition of using a png file, if .decode_jpeg() and .resize( detected, replace .decode_jpeg() with .decode_image() and replace .resize() with .resize_image_with_crop_or_pad(",
            "Fix pattern 3 :",
            "no precondition required, if tf.merge_summary( detected, replace it with tf.summary.merge(",
            "Fix pattern 4 :",
            "no precondition required, if tf.merge_all_summaries( detected, replace it with tf.summary.merge_all(",
            "Fix pattern 5 :",
            "no precondition required, if tf.train.SummaryWriter(detected, replace it with tf.summary.FileWriter(",
            "Fix pattern 6 :",
            "if the model is using binary class mode, if Dense(3, activation=`softmax`) detected, replace it with Dense(2, activation=`softmax`)",
            "Fix pattern 7 :",
            "in the condition of using cross entropy formula, if .softmax() detected, replace it tf.nn.softmax_cross_entropy_with_logits()",
            "Fix pattern 8 :",
            "in the condition of using @tf.function, add tf.range( and tf.cast() to API parameters",
            "Fix pattern 9 :",
            "no precondition required, if tf.histogram_summary( is detected, replace it with tf.summary.histogram(",
            "Fix pattern 10 :",
            "no precondition required, if tf.scalar_summary( is detected, replace it with tf.summary.scalar(",
            "Fix pattern 11 :",
            "in the condition of using eval() before calling tf.train.start_queue_runners(x), if tf.start_queue_runners( is detected, Insert a call to tf.train start_queue_runners(x) before eval() and after the most recent assignment of variable x",
            ""
        ],
        "detection_result": "Yes",
        "result": "yes",
        "label": ""
    },
    {
        "number": "C:\\@code\\APIMISUSE\\data\\repo_tensorflow_test\\Automatic_Speech_Recognition\\speechvalley\\lm\\spellingChecker4CN\\utils.py:26",
        "code_before": [
            "    '''",
            "",
            "    regex = re.compile(u'[^\\u4E00-\\u9FA5]')#\u975e\u4e2d\u6587",
            "    if remove_duplicate_space:",
            "        result = re.sub(' +', ' ', regex.sub(' ', input_str))",
            "    else:",
            "        result = regex.sub(' ', input_str)",
            "    result = re.sub(\"\\d+\", \" \", result)",
            ""
        ],
        "example": [
            "Fix pattern 1 :",
            "in the condition of using a png file, if .decode_jpeg() detected, replace .decode_jpeg() with .decode_image()",
            "Fix pattern 2 :",
            "in the condition of using a png file, if .decode_jpeg() and .resize( detected, replace .decode_jpeg() with .decode_image() and replace .resize() with .resize_image_with_crop_or_pad(",
            "Fix pattern 3 :",
            "no precondition required, if tf.merge_summary( detected, replace it with tf.summary.merge(",
            "Fix pattern 4 :",
            "no precondition required, if tf.merge_all_summaries( detected, replace it with tf.summary.merge_all(",
            "Fix pattern 5 :",
            "no precondition required, if tf.train.SummaryWriter(detected, replace it with tf.summary.FileWriter(",
            "Fix pattern 6 :",
            "if the model is using binary class mode, if Dense(3, activation=`softmax`) detected, replace it with Dense(2, activation=`softmax`)",
            "Fix pattern 7 :",
            "in the condition of using cross entropy formula, if .softmax() detected, replace it tf.nn.softmax_cross_entropy_with_logits()",
            "Fix pattern 8 :",
            "in the condition of using @tf.function, add tf.range( and tf.cast() to API parameters",
            "Fix pattern 9 :",
            "no precondition required, if tf.histogram_summary( is detected, replace it with tf.summary.histogram(",
            "Fix pattern 10 :",
            "no precondition required, if tf.scalar_summary( is detected, replace it with tf.summary.scalar(",
            "Fix pattern 11 :",
            "in the condition of using eval() before calling tf.train.start_queue_runners(x), if tf.start_queue_runners( is detected, Insert a call to tf.train start_queue_runners(x) before eval() and after the most recent assignment of variable x",
            ""
        ],
        "detection_result": "Yes",
        "result": "yes",
        "label": ""
    },
    {
        "number": "C:\\@code\\APIMISUSE\\data\\repo_tensorflow_test\\Automatic_Speech_Recognition\\speechvalley\\main\\libri_train.py:112",
        "code_before": [
            "            i, 'label') for i in os.listdir(os.path.join(datadir, level, train_dataset))]",
            "        return train_feature_dirs, train_label_dirs",
            "",
            "    if mode == 'dev':",
            "        dev_feature_dirs = [os.path.join(os.path.join(datadir, level, dev_dataset),",
            "            i, 'feature') for i in os.listdir(os.path.join(datadir, level, dev_dataset))]",
            "",
            "        dev_label_dirs = [os.path.join(os.path.join(datadir, level, dev_dataset),",
            ""
        ],
        "example": [
            "Fix pattern 1 :",
            "in the condition of using a png file, if .decode_jpeg() detected, replace .decode_jpeg() with .decode_image()",
            "Fix pattern 2 :",
            "in the condition of using a png file, if .decode_jpeg() and .resize( detected, replace .decode_jpeg() with .decode_image() and replace .resize() with .resize_image_with_crop_or_pad(",
            "Fix pattern 3 :",
            "no precondition required, if tf.merge_summary( detected, replace it with tf.summary.merge(",
            "Fix pattern 4 :",
            "no precondition required, if tf.merge_all_summaries( detected, replace it with tf.summary.merge_all(",
            "Fix pattern 5 :",
            "no precondition required, if tf.train.SummaryWriter(detected, replace it with tf.summary.FileWriter(",
            "Fix pattern 6 :",
            "if the model is using binary class mode, if Dense(3, activation=`softmax`) detected, replace it with Dense(2, activation=`softmax`)",
            "Fix pattern 7 :",
            "in the condition of using cross entropy formula, if .softmax() detected, replace it tf.nn.softmax_cross_entropy_with_logits()",
            "Fix pattern 8 :",
            "in the condition of using @tf.function, add tf.range( and tf.cast() to API parameters",
            "Fix pattern 9 :",
            "no precondition required, if tf.histogram_summary( is detected, replace it with tf.summary.histogram(",
            "Fix pattern 10 :",
            "no precondition required, if tf.scalar_summary( is detected, replace it with tf.summary.scalar(",
            "Fix pattern 11 :",
            "in the condition of using eval() before calling tf.train.start_queue_runners(x), if tf.start_queue_runners( is detected, Insert a call to tf.train start_queue_runners(x) before eval() and after the most recent assignment of variable x",
            ""
        ],
        "detection_result": "Yes",
        "result": "yes",
        "label": ""
    },
    {
        "number": "C:\\@code\\APIMISUSE\\data\\repo_tensorflow_test\\Automatic_Speech_Recognition\\speechvalley\\utils\\utils.py:313",
        "code_before": [
            "",
            "def _get_dims(shape):",
            "    \"\"\"get shape for initialization",
            "    \"\"\"",
            "    fan_in = shape[0] if len(shape) == 2 else np.prod(shape[:-1])",
            "    fan_out = shape[1] if len(shape) == 2 else shape[-1]",
            "    return fan_in, fan_out",
            "",
            ""
        ],
        "example": [
            "Fix pattern 1 :",
            "in the condition of using a png file, if .decode_jpeg() detected, replace .decode_jpeg() with .decode_image()",
            "Fix pattern 2 :",
            "in the condition of using a png file, if .decode_jpeg() and .resize( detected, replace .decode_jpeg() with .decode_image() and replace .resize() with .resize_image_with_crop_or_pad(",
            "Fix pattern 3 :",
            "no precondition required, if tf.merge_summary( detected, replace it with tf.summary.merge(",
            "Fix pattern 4 :",
            "no precondition required, if tf.merge_all_summaries( detected, replace it with tf.summary.merge_all(",
            "Fix pattern 5 :",
            "no precondition required, if tf.train.SummaryWriter(detected, replace it with tf.summary.FileWriter(",
            "Fix pattern 6 :",
            "if the model is using binary class mode, if Dense(3, activation=`softmax`) detected, replace it with Dense(2, activation=`softmax`)",
            "Fix pattern 7 :",
            "in the condition of using cross entropy formula, if .softmax() detected, replace it tf.nn.softmax_cross_entropy_with_logits()",
            "Fix pattern 8 :",
            "in the condition of using @tf.function, add tf.range( and tf.cast() to API parameters",
            "Fix pattern 9 :",
            "no precondition required, if tf.histogram_summary( is detected, replace it with tf.summary.histogram(",
            "Fix pattern 10 :",
            "no precondition required, if tf.scalar_summary( is detected, replace it with tf.summary.scalar(",
            "Fix pattern 11 :",
            "in the condition of using eval() before calling tf.train.start_queue_runners(x), if tf.start_queue_runners( is detected, Insert a call to tf.train start_queue_runners(x) before eval() and after the most recent assignment of variable x",
            ""
        ],
        "detection_result": "Yes",
        "result": "yes",
        "label": ""
    },
    {
        "number": "C:\\@code\\APIMISUSE\\data\\repo_tensorflow_test\\caffe-tensorflow\\examples\\imagenet\\validate.py:23",
        "code_before": [
            "    if name not in lut:",
            "        print('Invalid model index. Options are:')",
            "        # Display a list of valid model names",
            "        for model in all_models:",
            "            print('\\t* {}'.format(model.__name__))",
            "        return None",
            "    NetClass = lut[name]",
            "",
            ""
        ],
        "example": [
            "Fix pattern 1 :",
            "in the condition of using a png file, if .decode_jpeg() detected, replace .decode_jpeg() with .decode_image()",
            "Fix pattern 2 :",
            "in the condition of using a png file, if .decode_jpeg() and .resize( detected, replace .decode_jpeg() with .decode_image() and replace .resize() with .resize_image_with_crop_or_pad(",
            "Fix pattern 3 :",
            "no precondition required, if tf.merge_summary( detected, replace it with tf.summary.merge(",
            "Fix pattern 4 :",
            "no precondition required, if tf.merge_all_summaries( detected, replace it with tf.summary.merge_all(",
            "Fix pattern 5 :",
            "no precondition required, if tf.train.SummaryWriter(detected, replace it with tf.summary.FileWriter(",
            "Fix pattern 6 :",
            "if the model is using binary class mode, if Dense(3, activation=`softmax`) detected, replace it with Dense(2, activation=`softmax`)",
            "Fix pattern 7 :",
            "in the condition of using cross entropy formula, if .softmax() detected, replace it tf.nn.softmax_cross_entropy_with_logits()",
            "Fix pattern 8 :",
            "in the condition of using @tf.function, add tf.range( and tf.cast() to API parameters",
            "Fix pattern 9 :",
            "no precondition required, if tf.histogram_summary( is detected, replace it with tf.summary.histogram(",
            "Fix pattern 10 :",
            "no precondition required, if tf.scalar_summary( is detected, replace it with tf.summary.scalar(",
            "Fix pattern 11 :",
            "in the condition of using eval() before calling tf.train.start_queue_runners(x), if tf.start_queue_runners( is detected, Insert a call to tf.train start_queue_runners(x) before eval() and after the most recent assignment of variable x",
            ""
        ],
        "detection_result": "Yes",
        "result": "yes",
        "label": ""
    },
    {
        "number": "C:\\@code\\APIMISUSE\\data\\repo_tensorflow_test\\caffe-tensorflow\\kaffe\\graph.py:84",
        "code_before": [
            "            if node in temp_marked:",
            "                raise KaffeError('Graph is not a DAG.')",
            "            if node in perm_marked:",
            "                return",
            "            temp_marked.add(node)",
            "            for child in node.children:",
            "                visit(child)",
            "            perm_marked.add(node)",
            ""
        ],
        "example": [
            "Fix pattern 1 :",
            "in the condition of using a png file, if .decode_jpeg() detected, replace .decode_jpeg() with .decode_image()",
            "Fix pattern 2 :",
            "in the condition of using a png file, if .decode_jpeg() and .resize( detected, replace .decode_jpeg() with .decode_image() and replace .resize() with .resize_image_with_crop_or_pad(",
            "Fix pattern 3 :",
            "no precondition required, if tf.merge_summary( detected, replace it with tf.summary.merge(",
            "Fix pattern 4 :",
            "no precondition required, if tf.merge_all_summaries( detected, replace it with tf.summary.merge_all(",
            "Fix pattern 5 :",
            "no precondition required, if tf.train.SummaryWriter(detected, replace it with tf.summary.FileWriter(",
            "Fix pattern 6 :",
            "if the model is using binary class mode, if Dense(3, activation=`softmax`) detected, replace it with Dense(2, activation=`softmax`)",
            "Fix pattern 7 :",
            "in the condition of using cross entropy formula, if .softmax() detected, replace it tf.nn.softmax_cross_entropy_with_logits()",
            "Fix pattern 8 :",
            "in the condition of using @tf.function, add tf.range( and tf.cast() to API parameters",
            "Fix pattern 9 :",
            "no precondition required, if tf.histogram_summary( is detected, replace it with tf.summary.histogram(",
            "Fix pattern 10 :",
            "no precondition required, if tf.scalar_summary( is detected, replace it with tf.summary.scalar(",
            "Fix pattern 11 :",
            "in the condition of using eval() before calling tf.train.start_queue_runners(x), if tf.start_queue_runners( is detected, Insert a call to tf.train start_queue_runners(x) before eval() and after the most recent assignment of variable x",
            ""
        ],
        "detection_result": "Yes",
        "result": "yes",
        "label": ""
    },
    {
        "number": "C:\\@code\\APIMISUSE\\data\\repo_tensorflow_test\\caffe-tensorflow\\kaffe\\graph.py:123",
        "code_before": [
            "            # If the node has learned parameters, display the first one's shape.",
            "            # In case of convolutions, this corresponds to the weights.",
            "            data_shape = node.data[0].shape if node.data else '--'",
            "            out_shape = node.output_shape or '--'",
            "            s.append('{:<20} {:<30} {:>20} {:>20}'.format(node.kind, node.name, data_shape,",
            "                                                          tuple(out_shape)))",
            "        return '\\n'.join(s)",
            "",
            ""
        ],
        "example": [
            "Fix pattern 1 :",
            "in the condition of using a png file, if .decode_jpeg() detected, replace .decode_jpeg() with .decode_image()",
            "Fix pattern 2 :",
            "in the condition of using a png file, if .decode_jpeg() and .resize( detected, replace .decode_jpeg() with .decode_image() and replace .resize() with .resize_image_with_crop_or_pad(",
            "Fix pattern 3 :",
            "no precondition required, if tf.merge_summary( detected, replace it with tf.summary.merge(",
            "Fix pattern 4 :",
            "no precondition required, if tf.merge_all_summaries( detected, replace it with tf.summary.merge_all(",
            "Fix pattern 5 :",
            "no precondition required, if tf.train.SummaryWriter(detected, replace it with tf.summary.FileWriter(",
            "Fix pattern 6 :",
            "if the model is using binary class mode, if Dense(3, activation=`softmax`) detected, replace it with Dense(2, activation=`softmax`)",
            "Fix pattern 7 :",
            "in the condition of using cross entropy formula, if .softmax() detected, replace it tf.nn.softmax_cross_entropy_with_logits()",
            "Fix pattern 8 :",
            "in the condition of using @tf.function, add tf.range( and tf.cast() to API parameters",
            "Fix pattern 9 :",
            "no precondition required, if tf.histogram_summary( is detected, replace it with tf.summary.histogram(",
            "Fix pattern 10 :",
            "no precondition required, if tf.scalar_summary( is detected, replace it with tf.summary.scalar(",
            "Fix pattern 11 :",
            "in the condition of using eval() before calling tf.train.start_queue_runners(x), if tf.start_queue_runners( is detected, Insert a call to tf.train start_queue_runners(x) before eval() and after the most recent assignment of variable x",
            ""
        ],
        "detection_result": "Yes",
        "result": "yes",
        "label": ""
    },
    {
        "number": "C:\\@code\\APIMISUSE\\data\\repo_tensorflow_test\\caffe-tensorflow\\kaffe\\graph.py:139",
        "code_before": [
            "        phase: Either 'test' or 'train'. Used for filtering phase-specific nodes.",
            "        '''",
            "        self.def_path = def_path",
            "        self.phase = phase",
            "        self.load()",
            "",
            "    def load(self):",
            "        '''Load the layer definitions from the prototxt.'''",
            ""
        ],
        "example": [
            "Fix pattern 1 :",
            "in the condition of using a png file, if .decode_jpeg() detected, replace .decode_jpeg() with .decode_image()",
            "Fix pattern 2 :",
            "in the condition of using a png file, if .decode_jpeg() and .resize( detected, replace .decode_jpeg() with .decode_image() and replace .resize() with .resize_image_with_crop_or_pad(",
            "Fix pattern 3 :",
            "no precondition required, if tf.merge_summary( detected, replace it with tf.summary.merge(",
            "Fix pattern 4 :",
            "no precondition required, if tf.merge_all_summaries( detected, replace it with tf.summary.merge_all(",
            "Fix pattern 5 :",
            "no precondition required, if tf.train.SummaryWriter(detected, replace it with tf.summary.FileWriter(",
            "Fix pattern 6 :",
            "if the model is using binary class mode, if Dense(3, activation=`softmax`) detected, replace it with Dense(2, activation=`softmax`)",
            "Fix pattern 7 :",
            "in the condition of using cross entropy formula, if .softmax() detected, replace it tf.nn.softmax_cross_entropy_with_logits()",
            "Fix pattern 8 :",
            "in the condition of using @tf.function, add tf.range( and tf.cast() to API parameters",
            "Fix pattern 9 :",
            "no precondition required, if tf.histogram_summary( is detected, replace it with tf.summary.histogram(",
            "Fix pattern 10 :",
            "no precondition required, if tf.scalar_summary( is detected, replace it with tf.summary.scalar(",
            "Fix pattern 11 :",
            "in the condition of using eval() before calling tf.train.start_queue_runners(x), if tf.start_queue_runners( is detected, Insert a call to tf.train start_queue_runners(x) before eval() and after the most recent assignment of variable x",
            ""
        ],
        "detection_result": "Yes",
        "result": "yes",
        "label": ""
    },
    {
        "number": "C:\\@code\\APIMISUSE\\data\\repo_tensorflow_test\\captcha_trainer\\config.py:358",
        "code_before": [
            "        self.trains_validation_steps = self.trains_root.get('ValidationSteps')",
            "        self.trains_end_acc = self.trains_root.get('EndAcc')",
            "        self.trains_end_cost = self.trains_root.get('EndCost')",
            "        self.trains_end_cost = self.trains_end_cost if self.trains_end_cost else 1",
            "        self.trains_end_epochs = self.trains_root.get('EndEpochs')",
            "        self.trains_end_epochs = self.trains_end_epochs if self.trains_end_epochs else 2",
            "        self.trains_learning_rate: float = float(self.trains_root.get('LearningRate'))",
            "        self.batch_size = self.trains_root.get('BatchSize')",
            ""
        ],
        "example": [
            "Fix pattern 1 :",
            "in the condition of using a png file, if .decode_jpeg() detected, replace .decode_jpeg() with .decode_image()",
            "Fix pattern 2 :",
            "in the condition of using a png file, if .decode_jpeg() and .resize( detected, replace .decode_jpeg() with .decode_image() and replace .resize() with .resize_image_with_crop_or_pad(",
            "Fix pattern 3 :",
            "no precondition required, if tf.merge_summary( detected, replace it with tf.summary.merge(",
            "Fix pattern 4 :",
            "no precondition required, if tf.merge_all_summaries( detected, replace it with tf.summary.merge_all(",
            "Fix pattern 5 :",
            "no precondition required, if tf.train.SummaryWriter(detected, replace it with tf.summary.FileWriter(",
            "Fix pattern 6 :",
            "if the model is using binary class mode, if Dense(3, activation=`softmax`) detected, replace it with Dense(2, activation=`softmax`)",
            "Fix pattern 7 :",
            "in the condition of using cross entropy formula, if .softmax() detected, replace it tf.nn.softmax_cross_entropy_with_logits()",
            "Fix pattern 8 :",
            "in the condition of using @tf.function, add tf.range( and tf.cast() to API parameters",
            "Fix pattern 9 :",
            "no precondition required, if tf.histogram_summary( is detected, replace it with tf.summary.histogram(",
            "Fix pattern 10 :",
            "no precondition required, if tf.scalar_summary( is detected, replace it with tf.summary.scalar(",
            "Fix pattern 11 :",
            "in the condition of using eval() before calling tf.train.start_queue_runners(x), if tf.start_queue_runners( is detected, Insert a call to tf.train start_queue_runners(x) before eval() and after the most recent assignment of variable x",
            ""
        ],
        "detection_result": "Yes",
        "result": "yes",
        "label": ""
    },
    {
        "number": "C:\\@code\\APIMISUSE\\data\\repo_tensorflow_test\\captcha_trainer\\config.py:531",
        "code_before": [
            "    @staticmethod",
            "    def dict_param(params: dict, intent=6):",
            "        if params is None:",
            "            params = {}",
            "        result = \"\".join([\"\\n{} \".format(' ' * intent) + \"{}: {}\".format(k, v) for k, v in params.items()])",
            "        return result",
            "",
            "    @staticmethod",
            ""
        ],
        "example": [
            "Fix pattern 1 :",
            "in the condition of using a png file, if .decode_jpeg() detected, replace .decode_jpeg() with .decode_image()",
            "Fix pattern 2 :",
            "in the condition of using a png file, if .decode_jpeg() and .resize( detected, replace .decode_jpeg() with .decode_image() and replace .resize() with .resize_image_with_crop_or_pad(",
            "Fix pattern 3 :",
            "no precondition required, if tf.merge_summary( detected, replace it with tf.summary.merge(",
            "Fix pattern 4 :",
            "no precondition required, if tf.merge_all_summaries( detected, replace it with tf.summary.merge_all(",
            "Fix pattern 5 :",
            "no precondition required, if tf.train.SummaryWriter(detected, replace it with tf.summary.FileWriter(",
            "Fix pattern 6 :",
            "if the model is using binary class mode, if Dense(3, activation=`softmax`) detected, replace it with Dense(2, activation=`softmax`)",
            "Fix pattern 7 :",
            "in the condition of using cross entropy formula, if .softmax() detected, replace it tf.nn.softmax_cross_entropy_with_logits()",
            "Fix pattern 8 :",
            "in the condition of using @tf.function, add tf.range( and tf.cast() to API parameters",
            "Fix pattern 9 :",
            "no precondition required, if tf.histogram_summary( is detected, replace it with tf.summary.histogram(",
            "Fix pattern 10 :",
            "no precondition required, if tf.scalar_summary( is detected, replace it with tf.summary.scalar(",
            "Fix pattern 11 :",
            "in the condition of using eval() before calling tf.train.start_queue_runners(x), if tf.start_queue_runners( is detected, Insert a call to tf.train start_queue_runners(x) before eval() and after the most recent assignment of variable x",
            ""
        ],
        "detection_result": "Yes",
        "result": "yes",
        "label": ""
    },
    {
        "number": "C:\\@code\\APIMISUSE\\data\\repo_tensorflow_test\\captcha_trainer\\config.py:544",
        "code_before": [
            "        return val",
            "",
            "    def update(self, model_conf_path=None, model_name=None):",
            "        with open(\"model.template\", encoding=\"utf8\") as f:",
            "            base_config = \"\".join(f.readlines())",
            "            model = base_config.format(",
            "                MemoryUsage=self.memory_usage,",
            "                CNNNetwork=self.neu_cnn.value,",
            ""
        ],
        "example": [
            "Fix pattern 1 :",
            "in the condition of using a png file, if .decode_jpeg() detected, replace .decode_jpeg() with .decode_image()",
            "Fix pattern 2 :",
            "in the condition of using a png file, if .decode_jpeg() and .resize( detected, replace .decode_jpeg() with .decode_image() and replace .resize() with .resize_image_with_crop_or_pad(",
            "Fix pattern 3 :",
            "no precondition required, if tf.merge_summary( detected, replace it with tf.summary.merge(",
            "Fix pattern 4 :",
            "no precondition required, if tf.merge_all_summaries( detected, replace it with tf.summary.merge_all(",
            "Fix pattern 5 :",
            "no precondition required, if tf.train.SummaryWriter(detected, replace it with tf.summary.FileWriter(",
            "Fix pattern 6 :",
            "if the model is using binary class mode, if Dense(3, activation=`softmax`) detected, replace it with Dense(2, activation=`softmax`)",
            "Fix pattern 7 :",
            "in the condition of using cross entropy formula, if .softmax() detected, replace it tf.nn.softmax_cross_entropy_with_logits()",
            "Fix pattern 8 :",
            "in the condition of using @tf.function, add tf.range( and tf.cast() to API parameters",
            "Fix pattern 9 :",
            "no precondition required, if tf.histogram_summary( is detected, replace it with tf.summary.histogram(",
            "Fix pattern 10 :",
            "no precondition required, if tf.scalar_summary( is detected, replace it with tf.summary.scalar(",
            "Fix pattern 11 :",
            "in the condition of using eval() before calling tf.train.start_queue_runners(x), if tf.start_queue_runners( is detected, Insert a call to tf.train start_queue_runners(x) before eval() and after the most recent assignment of variable x",
            ""
        ],
        "detection_result": "Yes",
        "result": "yes",
        "label": ""
    },
    {
        "number": "C:\\@code\\APIMISUSE\\data\\repo_tensorflow_test\\captcha_trainer\\config.py:688",
        "code_before": [
            "        self.da_brightness = argv.get('DA_Brightness')",
            "        self.da_saturation = argv.get('DA_Saturation')",
            "        self.da_hue = argv.get('DA_Hue')",
            "        self.da_gamma = argv.get('DA_Gamma')",
            "        self.da_channel_swap = argv.get('DA_ChannelSwap')",
            "        self.da_random_blank = argv.get('DA_RandomBlank')",
            "        self.da_random_transition = argv.get('DA_RandomTransition')",
            "        self.da_random_captcha = argv.get('DA_RandomCaptcha')",
            ""
        ],
        "example": [
            "Fix pattern 1 :",
            "in the condition of using a png file, if .decode_jpeg() detected, replace .decode_jpeg() with .decode_image()",
            "Fix pattern 2 :",
            "in the condition of using a png file, if .decode_jpeg() and .resize( detected, replace .decode_jpeg() with .decode_image() and replace .resize() with .resize_image_with_crop_or_pad(",
            "Fix pattern 3 :",
            "no precondition required, if tf.merge_summary( detected, replace it with tf.summary.merge(",
            "Fix pattern 4 :",
            "no precondition required, if tf.merge_all_summaries( detected, replace it with tf.summary.merge_all(",
            "Fix pattern 5 :",
            "no precondition required, if tf.train.SummaryWriter(detected, replace it with tf.summary.FileWriter(",
            "Fix pattern 6 :",
            "if the model is using binary class mode, if Dense(3, activation=`softmax`) detected, replace it with Dense(2, activation=`softmax`)",
            "Fix pattern 7 :",
            "in the condition of using cross entropy formula, if .softmax() detected, replace it tf.nn.softmax_cross_entropy_with_logits()",
            "Fix pattern 8 :",
            "in the condition of using @tf.function, add tf.range( and tf.cast() to API parameters",
            "Fix pattern 9 :",
            "no precondition required, if tf.histogram_summary( is detected, replace it with tf.summary.histogram(",
            "Fix pattern 10 :",
            "no precondition required, if tf.scalar_summary( is detected, replace it with tf.summary.scalar(",
            "Fix pattern 11 :",
            "in the condition of using eval() before calling tf.train.start_queue_runners(x), if tf.start_queue_runners( is detected, Insert a call to tf.train start_queue_runners(x) before eval() and after the most recent assignment of variable x",
            ""
        ],
        "detection_result": "Yes",
        "result": "yes",
        "label": ""
    },
    {
        "number": "C:\\@code\\APIMISUSE\\data\\repo_tensorflow_test\\captcha_trainer\\core.py:97",
        "code_before": [
            "",
            "        \"\"\"\u9009\u62e9\u91c7\u7528\u54ea\u79cd\u5faa\u73af\u7f51\u7edc\"\"\"",
            "",
            "        # time_major = True: [max_time_step, batch_size, num_classes]",
            "        tf.compat.v1.logging.info(\"CNN Output: {}\".format(x.get_shape()))",
            "",
            "        self.seq_len = tf.compat.v1.fill([tf.shape(x)[0]], tf.shape(x)[1], name=\"seq_len\")",
            "",
            ""
        ],
        "example": [
            "Fix pattern 1 :",
            "in the condition of using a png file, if .decode_jpeg() detected, replace .decode_jpeg() with .decode_image()",
            "Fix pattern 2 :",
            "in the condition of using a png file, if .decode_jpeg() and .resize( detected, replace .decode_jpeg() with .decode_image() and replace .resize() with .resize_image_with_crop_or_pad(",
            "Fix pattern 3 :",
            "no precondition required, if tf.merge_summary( detected, replace it with tf.summary.merge(",
            "Fix pattern 4 :",
            "no precondition required, if tf.merge_all_summaries( detected, replace it with tf.summary.merge_all(",
            "Fix pattern 5 :",
            "no precondition required, if tf.train.SummaryWriter(detected, replace it with tf.summary.FileWriter(",
            "Fix pattern 6 :",
            "if the model is using binary class mode, if Dense(3, activation=`softmax`) detected, replace it with Dense(2, activation=`softmax`)",
            "Fix pattern 7 :",
            "in the condition of using cross entropy formula, if .softmax() detected, replace it tf.nn.softmax_cross_entropy_with_logits()",
            "Fix pattern 8 :",
            "in the condition of using @tf.function, add tf.range( and tf.cast() to API parameters",
            "Fix pattern 9 :",
            "no precondition required, if tf.histogram_summary( is detected, replace it with tf.summary.histogram(",
            "Fix pattern 10 :",
            "no precondition required, if tf.scalar_summary( is detected, replace it with tf.summary.scalar(",
            "Fix pattern 11 :",
            "in the condition of using eval() before calling tf.train.start_queue_runners(x), if tf.start_queue_runners( is detected, Insert a call to tf.train start_queue_runners(x) before eval() and after the most recent assignment of variable x",
            ""
        ],
        "detection_result": "Yes",
        "result": "yes",
        "label": ""
    },
    {
        "number": "C:\\@code\\APIMISUSE\\data\\repo_tensorflow_test\\captcha_trainer\\tf_graph_util.py:105",
        "code_before": [
            "",
            "",
            "################################################################################",
            "#",
            "# device functions for use in with g.device(...)",
            "#",
            "################################################################################",
            "",
            ""
        ],
        "example": [
            "Fix pattern 1 :",
            "in the condition of using a png file, if .decode_jpeg() detected, replace .decode_jpeg() with .decode_image()",
            "Fix pattern 2 :",
            "in the condition of using a png file, if .decode_jpeg() and .resize( detected, replace .decode_jpeg() with .decode_image() and replace .resize() with .resize_image_with_crop_or_pad(",
            "Fix pattern 3 :",
            "no precondition required, if tf.merge_summary( detected, replace it with tf.summary.merge(",
            "Fix pattern 4 :",
            "no precondition required, if tf.merge_all_summaries( detected, replace it with tf.summary.merge_all(",
            "Fix pattern 5 :",
            "no precondition required, if tf.train.SummaryWriter(detected, replace it with tf.summary.FileWriter(",
            "Fix pattern 6 :",
            "if the model is using binary class mode, if Dense(3, activation=`softmax`) detected, replace it with Dense(2, activation=`softmax`)",
            "Fix pattern 7 :",
            "in the condition of using cross entropy formula, if .softmax() detected, replace it tf.nn.softmax_cross_entropy_with_logits()",
            "Fix pattern 8 :",
            "in the condition of using @tf.function, add tf.range( and tf.cast() to API parameters",
            "Fix pattern 9 :",
            "no precondition required, if tf.histogram_summary( is detected, replace it with tf.summary.histogram(",
            "Fix pattern 10 :",
            "no precondition required, if tf.scalar_summary( is detected, replace it with tf.summary.scalar(",
            "Fix pattern 11 :",
            "in the condition of using eval() before calling tf.train.start_queue_runners(x), if tf.start_queue_runners( is detected, Insert a call to tf.train start_queue_runners(x) before eval() and after the most recent assignment of variable x",
            ""
        ],
        "detection_result": "Yes",
        "result": "yes",
        "label": ""
    },
    {
        "number": "C:\\@code\\APIMISUSE\\data\\repo_tensorflow_test\\captcha_trainer\\tf_graph_util.py:323",
        "code_before": [
            "        returned_variables = sess.run(variable_names)",
            "    else:",
            "        returned_variables = []",
            "    variables_data_map = dict(zip(variable_dict_names, returned_variables))",
            "    logging.info(\"Froze %d variables.\", len(returned_variables))",
            "",
            "    # Reconstruct the graph with constants in place of variables.",
            "    output_graph_def = graph_pb2.GraphDef()",
            ""
        ],
        "example": [
            "Fix pattern 1 :",
            "in the condition of using a png file, if .decode_jpeg() detected, replace .decode_jpeg() with .decode_image()",
            "Fix pattern 2 :",
            "in the condition of using a png file, if .decode_jpeg() and .resize( detected, replace .decode_jpeg() with .decode_image() and replace .resize() with .resize_image_with_crop_or_pad(",
            "Fix pattern 3 :",
            "no precondition required, if tf.merge_summary( detected, replace it with tf.summary.merge(",
            "Fix pattern 4 :",
            "no precondition required, if tf.merge_all_summaries( detected, replace it with tf.summary.merge_all(",
            "Fix pattern 5 :",
            "no precondition required, if tf.train.SummaryWriter(detected, replace it with tf.summary.FileWriter(",
            "Fix pattern 6 :",
            "if the model is using binary class mode, if Dense(3, activation=`softmax`) detected, replace it with Dense(2, activation=`softmax`)",
            "Fix pattern 7 :",
            "in the condition of using cross entropy formula, if .softmax() detected, replace it tf.nn.softmax_cross_entropy_with_logits()",
            "Fix pattern 8 :",
            "in the condition of using @tf.function, add tf.range( and tf.cast() to API parameters",
            "Fix pattern 9 :",
            "no precondition required, if tf.histogram_summary( is detected, replace it with tf.summary.histogram(",
            "Fix pattern 10 :",
            "no precondition required, if tf.scalar_summary( is detected, replace it with tf.summary.scalar(",
            "Fix pattern 11 :",
            "in the condition of using eval() before calling tf.train.start_queue_runners(x), if tf.start_queue_runners( is detected, Insert a call to tf.train start_queue_runners(x) before eval() and after the most recent assignment of variable x",
            ""
        ],
        "detection_result": "Yes",
        "result": "yes",
        "label": ""
    },
    {
        "number": "C:\\@code\\APIMISUSE\\data\\repo_tensorflow_test\\captcha_trainer\\tf_graph_util.py:438",
        "code_before": [
            "    node_names_with_control_input = set()",
            "    for node in nodes_after_removal:",
            "        for node_input in node.input:",
            "            if \"^\" in node_input:",
            "                control_input_names.add(node_input.replace(\"^\", \"\"))",
            "                node_names_with_control_input.add(node.name)",
            "",
            "    names_to_splice = {}",
            ""
        ],
        "example": [
            "Fix pattern 1 :",
            "in the condition of using a png file, if .decode_jpeg() detected, replace .decode_jpeg() with .decode_image()",
            "Fix pattern 2 :",
            "in the condition of using a png file, if .decode_jpeg() and .resize( detected, replace .decode_jpeg() with .decode_image() and replace .resize() with .resize_image_with_crop_or_pad(",
            "Fix pattern 3 :",
            "no precondition required, if tf.merge_summary( detected, replace it with tf.summary.merge(",
            "Fix pattern 4 :",
            "no precondition required, if tf.merge_all_summaries( detected, replace it with tf.summary.merge_all(",
            "Fix pattern 5 :",
            "no precondition required, if tf.train.SummaryWriter(detected, replace it with tf.summary.FileWriter(",
            "Fix pattern 6 :",
            "if the model is using binary class mode, if Dense(3, activation=`softmax`) detected, replace it with Dense(2, activation=`softmax`)",
            "Fix pattern 7 :",
            "in the condition of using cross entropy formula, if .softmax() detected, replace it tf.nn.softmax_cross_entropy_with_logits()",
            "Fix pattern 8 :",
            "in the condition of using @tf.function, add tf.range( and tf.cast() to API parameters",
            "Fix pattern 9 :",
            "no precondition required, if tf.histogram_summary( is detected, replace it with tf.summary.histogram(",
            "Fix pattern 10 :",
            "no precondition required, if tf.scalar_summary( is detected, replace it with tf.summary.scalar(",
            "Fix pattern 11 :",
            "in the condition of using eval() before calling tf.train.start_queue_runners(x), if tf.start_queue_runners( is detected, Insert a call to tf.train start_queue_runners(x) before eval() and after the most recent assignment of variable x",
            ""
        ],
        "detection_result": "Yes",
        "result": "yes",
        "label": ""
    },
    {
        "number": "C:\\@code\\APIMISUSE\\data\\repo_tensorflow_test\\captcha_trainer\\utils\\data.py:141",
        "code_before": [
            "        for index, (i1, i2) in enumerate(zip(_input, _label)):",
            "            try:",
            "                label_array = self.encoder.text(i2)",
            "                if self.model_conf.model_field == ModelField.Image:",
            "                    input_array = self.encoder.image(i1)",
            "                else:",
            "                    input_array = self.encoder.text(i1)",
            "",
            ""
        ],
        "example": [
            "Fix pattern 1 :",
            "in the condition of using a png file, if .decode_jpeg() detected, replace .decode_jpeg() with .decode_image()",
            "Fix pattern 2 :",
            "in the condition of using a png file, if .decode_jpeg() and .resize( detected, replace .decode_jpeg() with .decode_image() and replace .resize() with .resize_image_with_crop_or_pad(",
            "Fix pattern 3 :",
            "no precondition required, if tf.merge_summary( detected, replace it with tf.summary.merge(",
            "Fix pattern 4 :",
            "no precondition required, if tf.merge_all_summaries( detected, replace it with tf.summary.merge_all(",
            "Fix pattern 5 :",
            "no precondition required, if tf.train.SummaryWriter(detected, replace it with tf.summary.FileWriter(",
            "Fix pattern 6 :",
            "if the model is using binary class mode, if Dense(3, activation=`softmax`) detected, replace it with Dense(2, activation=`softmax`)",
            "Fix pattern 7 :",
            "in the condition of using cross entropy formula, if .softmax() detected, replace it tf.nn.softmax_cross_entropy_with_logits()",
            "Fix pattern 8 :",
            "in the condition of using @tf.function, add tf.range( and tf.cast() to API parameters",
            "Fix pattern 9 :",
            "no precondition required, if tf.histogram_summary( is detected, replace it with tf.summary.histogram(",
            "Fix pattern 10 :",
            "no precondition required, if tf.scalar_summary( is detected, replace it with tf.summary.scalar(",
            "Fix pattern 11 :",
            "in the condition of using eval() before calling tf.train.start_queue_runners(x), if tf.start_queue_runners( is detected, Insert a call to tf.train start_queue_runners(x) before eval() and after the most recent assignment of variable x",
            ""
        ],
        "detection_result": "Yes",
        "result": "yes",
        "label": ""
    },
    {
        "number": "C:\\@code\\APIMISUSE\\data\\repo_tensorflow_test\\captcha_trainer\\utils\\data.py:151",
        "code_before": [
            "                    #     \"{}, Cannot identify image file labeled: {}, ignored.\".format(input_array, label_array))",
            "                    continue",
            "",
            "                if isinstance(input_array, str):",
            "                    # tf.compat.v1.logging.warn(\"{}, \\nInput errors labeled: {} [{}], ignored.\".format(input_array, i1, label_array))",
            "                    continue",
            "                if isinstance(label_array, dict):",
            "                    # tf.logging.warn(\"The sample label {} contains invalid charset: {}.\".format(",
            ""
        ],
        "example": [
            "Fix pattern 1 :",
            "in the condition of using a png file, if .decode_jpeg() detected, replace .decode_jpeg() with .decode_image()",
            "Fix pattern 2 :",
            "in the condition of using a png file, if .decode_jpeg() and .resize( detected, replace .decode_jpeg() with .decode_image() and replace .resize() with .resize_image_with_crop_or_pad(",
            "Fix pattern 3 :",
            "no precondition required, if tf.merge_summary( detected, replace it with tf.summary.merge(",
            "Fix pattern 4 :",
            "no precondition required, if tf.merge_all_summaries( detected, replace it with tf.summary.merge_all(",
            "Fix pattern 5 :",
            "no precondition required, if tf.train.SummaryWriter(detected, replace it with tf.summary.FileWriter(",
            "Fix pattern 6 :",
            "if the model is using binary class mode, if Dense(3, activation=`softmax`) detected, replace it with Dense(2, activation=`softmax`)",
            "Fix pattern 7 :",
            "in the condition of using cross entropy formula, if .softmax() detected, replace it tf.nn.softmax_cross_entropy_with_logits()",
            "Fix pattern 8 :",
            "in the condition of using @tf.function, add tf.range( and tf.cast() to API parameters",
            "Fix pattern 9 :",
            "no precondition required, if tf.histogram_summary( is detected, replace it with tf.summary.histogram(",
            "Fix pattern 10 :",
            "no precondition required, if tf.scalar_summary( is detected, replace it with tf.summary.scalar(",
            "Fix pattern 11 :",
            "in the condition of using eval() before calling tf.train.start_queue_runners(x), if tf.start_queue_runners( is detected, Insert a call to tf.train start_queue_runners(x) before eval() and after the most recent assignment of variable x",
            ""
        ],
        "detection_result": "Yes",
        "result": "yes",
        "label": ""
    },
    {
        "number": "C:\\@code\\APIMISUSE\\data\\repo_tensorflow_test\\captcha_trainer\\utils\\sparse.py:19",
        "code_before": [
            "    try:",
            "        values = np.asarray(values, dtype=dtype)",
            "    except Exception as e:",
            "        print(e, values)",
            "    shape = np.asarray([len(sequences), np.asarray(indices).max(0)[1] + 1], dtype=np.int64)",
            "    return indices, values, shape",
            ""
        ],
        "example": [
            "Fix pattern 1 :",
            "in the condition of using a png file, if .decode_jpeg() detected, replace .decode_jpeg() with .decode_image()",
            "Fix pattern 2 :",
            "in the condition of using a png file, if .decode_jpeg() and .resize( detected, replace .decode_jpeg() with .decode_image() and replace .resize() with .resize_image_with_crop_or_pad(",
            "Fix pattern 3 :",
            "no precondition required, if tf.merge_summary( detected, replace it with tf.summary.merge(",
            "Fix pattern 4 :",
            "no precondition required, if tf.merge_all_summaries( detected, replace it with tf.summary.merge_all(",
            "Fix pattern 5 :",
            "no precondition required, if tf.train.SummaryWriter(detected, replace it with tf.summary.FileWriter(",
            "Fix pattern 6 :",
            "if the model is using binary class mode, if Dense(3, activation=`softmax`) detected, replace it with Dense(2, activation=`softmax`)",
            "Fix pattern 7 :",
            "in the condition of using cross entropy formula, if .softmax() detected, replace it tf.nn.softmax_cross_entropy_with_logits()",
            "Fix pattern 8 :",
            "in the condition of using @tf.function, add tf.range( and tf.cast() to API parameters",
            "Fix pattern 9 :",
            "no precondition required, if tf.histogram_summary( is detected, replace it with tf.summary.histogram(",
            "Fix pattern 10 :",
            "no precondition required, if tf.scalar_summary( is detected, replace it with tf.summary.scalar(",
            "Fix pattern 11 :",
            "in the condition of using eval() before calling tf.train.start_queue_runners(x), if tf.start_queue_runners( is detected, Insert a call to tf.train start_queue_runners(x) before eval() and after the most recent assignment of variable x",
            ""
        ],
        "detection_result": "Yes",
        "result": "yes",
        "label": ""
    }
]
[
    {
        "number": 8824,
        "comments": "",
        "commit_message": "upgrade detection / some v2 compat fix\n\n",
        "label": "",
        "answer": "yes",
        "change": [
            "def _replace_global_by_local(kwargs):",
            "if 'collections' in kwargs:",
            "collections = kwargs['collections']",
            "if not collections:",
            "-        collections = {tf.GraphKeys.GLOBAL_VARIABLES}",
            "+        collections = {tfv1.GraphKeys.GLOBAL_VARIABLES}",
            "else:",
            "collections = set(collections.copy())",
            "-    collections.remove(tf.GraphKeys.GLOBAL_VARIABLES)",
            "-    collections.add(tf.GraphKeys.LOCAL_VARIABLES)",
            "+    collections.remove(tfv1.GraphKeys.GLOBAL_VARIABLES)",
            "+    collections.add(tfv1.GraphKeys.LOCAL_VARIABLES)",
            "kwargs['collections'] = list(collections)"
        ]
    },
    {
        "number": 8832,
        "comments": "",
        "commit_message": "Update regularizers.py\n\nFix OrthogonalRegularizer to implement the (1,1) matrix norm. \nIssue: https://github.com/keras-team/keras/issues/16518\n",
        "label": "",
        "answer": "yes",
        "change": [
            "class OrthogonalRegularizer(Regularizer):",
            "size = inputs.shape[1]",
            "product_no_diagonal = product * (1. - tf.eye(size, dtype=inputs.dtype))",
            "num_pairs = size * (size - 1.) / 2.",
            "-    return self.factor * 0.5 * tf.reduce_sum(product_no_diagonal) / num_pairs",
            "+    return self.factor * 0.5 * tf.reduce_sum(tf.abs(product_no_diagonal)) / num_pairs",
            "",
            "def get_config(self):",
            "return {'factor': float(self.factor), 'mode': self.mode}"
        ]
    },
    {
        "number": 8839,
        "comments": "",
        "commit_message": "Float tensor additive sharing (#3094)\n\n* Convert torch.zeros from float to long tensor\n\n* Catch FloatTensor sharing attempt\n\n* format correction\n\n* reformatting\n\n* fix maxpool TensorFloat sharing\n\n",
        "label": "",
        "answer": "no",
        "change": [
            "def maxpool_deriv(x_sh):",
            "# 3)",
            "t = k_sh.get()",
            "k = t % n",
            "-    E_k = torch.zeros(n)",
            "+    E_k = torch.zeros(n).long()",
            "E_k[k] = 1",
            "E_sh = E_k.share(alice, bob, **no_wrap)"
        ]
    },
    {
        "number": 8842,
        "comments": "",
        "commit_message": "fix tests  in tensorflow math frontend\n\n",
        "label": "",
        "answer": "no",
        "change": [
            "def add(",
            "out: Optional[Union[tf.Tensor, tf.Variable]] = None,",
            ") -> Union[tf.Tensor, tf.Variable]:",
            "x1, x2 = ivy.promote_types_of_inputs(x1, x2)",
            "-    return tf.experimental.numpy.add(x1, x2)",
            "+    return tf.add(x1, x2)",
            "",
            "",
            "def asin("
        ]
    },
    {
        "number": 8849,
        "comments": "",
        "commit_message": "py 2.7 fix\n\n",
        "label": "",
        "answer": "no",
        "change": [
            "class ToDense(object):",
            "else:",
            "edge_attr = data.edge_attr",
            "",
            "-        size = torch.Size([num_nodes, num_nodes, *list(edge_attr.size())[1:]])",
            "+        size = torch.Size([num_nodes, num_nodes] + list(edge_attr.size())[1:])",
            "adj = torch.sparse_coo_tensor(data.edge_index, edge_attr, size)",
            "data.adj = adj.to_dense()",
            "data.edge_index = None"
        ]
    },
    {
        "number": 8850,
        "comments": "",
        "commit_message": "Fix issue with worker crashing with larger numpy arrays\n\n",
        "label": "",
        "answer": "no",
        "change": [
            "def protobuf_serialize(obj: np.ndarray) -> NumpyProto:",
            "# same original unsigned values on the other side",
            "obj = obj.astype(DTYPE_REFACTOR[original_dtype])",
            "",
            "-    tensor = torch.from_numpy(obj).clone()",
            "+    # Cloning seems to cause the worker to freeze if the array is larger than around",
            "+    # 800k in data and since we are serializing it immediately afterwards I don't",
            "+    # think its needed anyway",
            "+    # tensor = torch.from_numpy(obj).clone()",
            "+    tensor = torch.from_numpy(obj)",
            "tensor_bytes = tensor_serializer(tensor)",
            "dtype = original_dtype.name",
            "return NumpyProto(proto_data=tensor_bytes, dtype=dtype)"
        ]
    },
    {
        "number": 8851,
        "comments": "",
        "commit_message": "Refactor category orders in heads (#2374)\n\n* Refactor (all): all category -1 in anchor/bbox head and anchor/bbox target assign\n\n* Fix (datasets): remove label + 1 in datasets\n\n* Fix (bbox_head): fix bug of fc_cls that forget + 1\n\n* Fix (atss_head & free_anchor): fix cat -1 bugs\n\n* Fix (mask_head): remove label + 1 in mask heads\n\n* fix atss\n\n* Fix (rpn): fix cross_entropy_loss bug of RPN\n\n* Fix (anchor_head): fix typo\n\n* Refactor (anchor_head): use background_label rather than num_classes to indicate background class\n\n* Refactor (docstring): add and reformat docstrings\n\n* fix mask iou head\n\n* Fix (mask_head): fix cat -1 bug\n\n* Fix (mask_head): fix bug in mask inference\n\n* Add (tests): add tests for mask rcnn and mask heads\n\n* Refactor (unittest): refactor test_forward\n\n* Refactor (new_empty): use new_full rather than new_empty\n\n* Refactor (background_label): check background_label\n\n* Add TODO\n\n* Refactor (unittest): allow BP in unittest\n\nCo-authored-by: Cao Yuhang <yhcao6@gmail.com>\n",
        "label": "",
        "answer": "no",
        "change": [
            "class DoubleConvFCBBoxHead(BBoxHead):",
            "out_dim_reg = 4 if self.reg_class_agnostic else 4 * self.num_classes",
            "self.fc_reg = nn.Linear(self.conv_out_channels, out_dim_reg)",
            "",
            "-        self.fc_cls = nn.Linear(self.fc_out_channels, self.num_classes)",
            "+        self.fc_cls = nn.Linear(self.fc_out_channels, self.num_classes + 1)",
            "self.relu = nn.ReLU(inplace=True)",
            "",
            "def _add_conv_branch(self):"
        ]
    },
    {
        "number": 8852,
        "comments": "",
        "commit_message": "default fast model loading \ud83d\udd25 (#1115)\n\n* make accelerate hard dep\n\n* default fast init\n\n* move params to cpu when device map is None\n\n* handle device_map=None\n\n* handle torch < 1.9\n\n* remove device_map=\"auto\"\n\n* style\n\n* add accelerate in torch extra\n\n* remove accelerate from extras[\"test\"]\n\n* raise an error if torch is available but not accelerate\n\n* update installation docs\n\n* Apply suggestions from code review\n\nCo-authored-by: Patrick von Platen <patrick.v.platen@gmail.com>\n\n* improve defautl loading speed even further, allow disabling fats loading\n\n* address review comments\n\n* adapt the tests\n\n* fix test_stable_diffusion_fast_load\n\n* fix test_read_init\n\n* temp fix for dummy checks\n\n* Trigger Build\n\n* Apply suggestions from code review\n\nCo-authored-by: Anton Lozhkov <anton@huggingface.co>\n\nCo-authored-by: Patrick von Platen <patrick.v.platen@gmail.com>\nCo-authored-by: Anton Lozhkov <anton@huggingface.co>\n",
        "label": "",
        "answer": "no",
        "change": [
            "class PipelineIntegrationTests(unittest.TestCase):",
            "def test_dance_diffusion_fp16(self):",
            "device = torch_device",
            "",
            "-        pipe = DanceDiffusionPipeline.from_pretrained(",
            "-            \"harmonai/maestro-150k\", torch_dtype=torch.float16, device_map=\"auto\"",
            "-        )",
            "+        pipe = DanceDiffusionPipeline.from_pretrained(\"harmonai/maestro-150k\", torch_dtype=torch.float16)",
            "pipe = pipe.to(device)",
            "pipe.set_progress_bar_config(disable=None)"
        ]
    },
    {
        "number": 8855,
        "comments": "",
        "commit_message": "bug fix in dataflow\n\n",
        "label": "",
        "answer": "no",
        "change": [
            "class Model(ModelDesc):",
            "# seqlen is 1 in inference. don't need loop_function",
            "outputs, last_state = rnn.rnn(cell, input_list, initial, scope='rnnlm')",
            "self.last_state = tf.identity(last_state, 'last_state')",
            "+",
            "# seqlen x (Bxrnnsize)",
            "-        output = tf.reshape(tf.concat(1, outputs), [-1, param.rnn_size])  # (seqlenxB) x rnnsize",
            "+        output = tf.reshape(tf.concat(1, outputs), [-1, param.rnn_size])  # (Bxseqlen) x rnnsize",
            "logits = FullyConnected('fc', output, param.vocab_size, nl=tf.identity)",
            "self.prob = tf.nn.softmax(logits / param.softmax_temprature)"
        ]
    },
    {
        "number": 8857,
        "comments": "",
        "commit_message": "Fix pylint errors\n\n",
        "label": "",
        "answer": "no",
        "change": [
            "from seq2seq.configurable import Configurable",
            "def att_sum_bahdanau(v_att, keys, query):",
            "\"\"\"Calculates a batch- and timweise dot product with a variable\"\"\"",
            "return tf.reduce_sum(",
            "-      v_att * math_ops.tanh(keys + tf.expand_dims(query, 1)), [2])",
            "+      v_att * tf.tanh(keys + tf.expand_dims(query, 1)), [2])",
            "",
            "@function.Defun(tf.float32, tf.float32, func_name=\"att_sum_dot\", noinline=True)",
            "def att_sum_dot(keys, query):"
        ]
    },
    {
        "number": 8860,
        "comments": "",
        "commit_message": "[mbart] Fix fp16 testing logic (#4949)\n\n\n",
        "label": "",
        "answer": "no",
        "change": [
            "class MBartIntegrationTests(unittest.TestCase):",
            "expected_shape = (*summary.shape, config.vocab_size)",
            "self.assertEqual(logits.shape, expected_shape)",
            "",
            "-",
            "-@require_torch",
            "-class MBartTokenizerTests(MBartIntegrationTests):",
            "def test_enro_tokenizer_prepare_translation_batch(self):",
            "batch = self.tokenizer.prepare_translation_batch(",
            "self.src_text, tgt_texts=self.tgt_text, max_length=len(self.expected_src_tokens),"
        ]
    },
    {
        "number": 8870,
        "comments": "",
        "commit_message": "fix: fix metrics calculation\n\n",
        "label": "",
        "answer": "no",
        "change": [
            "class GoalOrientedBotNetwork(TFModel):",
            "_train_op = optimizer(learning_rate).minimize(loss, name='train_op')",
            "# TODO: check clipping of gradients",
            "#optimizer = tf.train.AdamOptimizer(learning_rate)",
            "+        #clip_rate = 1.",
            "#gards_and_vars = optimizer.compute_gradients(loss, tf.trainable_variables())",
            "-        #grads_and_vars = [(tf.clip_by_norm(grad, 1), var) for grad, var in grads_and_vars]",
            "+        #grads_and_vars = [(tf.clip_by_norm(grad, clip_rate), var) for grad, var in grads_and_vars]",
            "#optimizer.apply_gradients(grads_and_vars)",
            "return _train_op"
        ]
    },
    {
        "number": 8871,
        "comments": "",
        "commit_message": "bug fix\n\n",
        "label": "",
        "answer": "no",
        "change": [
            "class TorchSTFT(nn.Module):  # pylint: disable=abstract-method",
            "if use_mel:",
            "self._build_mel_basis()",
            "",
            "-    @torch.no_grad()",
            "def __call__(self, x):",
            "\"\"\"Compute spectrogram frames by torch based stft."
        ]
    },
    {
        "number": 8878,
        "comments": "",
        "commit_message": "Use f-strings in the dataset scripts (#3291)\n\n* Finishes #3257\n\nUsed f-strings to format the .py files in the dataset folder\n\n* Fix style\n\n* Fix hkcancor dataset\n\nCo-authored-by: Mario \u0160a\u0161ko <mario@huggingface.co>\nCo-authored-by: mariosasko <mariosasko777@gmail.com>\n",
        "label": "",
        "answer": "no",
        "change": [
            "class MsrZhenTranslationParity(datasets.GeneratorBasedBuilder):",
            "",
            "if not os.path.exists(path_to_manual_file):",
            "raise FileNotFoundError(",
            "-                \"{} does not exist. Make sure you insert a manual dir via `datasets.load_dataset('msr_zhen_translation_parity', data_dir=...)`. Manual download instructions: {})\".format(",
            "-                    path_to_manual_file, self.manual_download_instructions",
            "-                )",
            "+                f\"{path_to_manual_file} does not exist. Make sure you insert a manual dir via `datasets.load_dataset('msr_zhen_translation_parity', data_dir=...)`. Manual download instructions: {self.manual_download_instructions})\"",
            ")",
            "return [datasets.SplitGenerator(name=datasets.Split.TRAIN, gen_kwargs={\"path\": path_to_manual_file})]"
        ]
    },
    {
        "number": 8879,
        "comments": "",
        "commit_message": "Fix F821 flake8 warning (x47).\n\nIgnore warnings related to Python 2, because it's going away soon.\n\n",
        "label": "",
        "answer": "no",
        "change": [
            "class TFXLNetMainLayer(tf.keras.layers.Layer):",
            "if dtype is not None and dtype != tf.float32:",
            "fwd_pos_seq = tf.cast(fwd_pos_seq, dtype=dtype)",
            "if self.clamp_len > 0:",
            "-                fwd_pos_seq = tf.clip_by_value(fwd_pos_seq, -clamp_len, clamp_len)",
            "+                fwd_pos_seq = tf.clip_by_value(fwd_pos_seq, -self.clamp_len, self.clamp_len)",
            "pos_emb = self.positional_embedding(fwd_pos_seq, inv_freq, bsz)",
            "",
            "return pos_emb"
        ]
    },
    {
        "number": 8889,
        "comments": "",
        "commit_message": "[Refactor]: Support batch inference traceable by ONNX in SSD, YOLOv3, FSAF, RetinaNet, and FCOS (#4699)\n\n* Support batch infer in RetinaNet\n\n* Suport batch multiclass_nms\n\n* Revert multiclass_nms\n\n* Fix api deprecated warning\n\n* do not repeat anchors\n\n* Move img_shapes\n\n* Update Yolov3\n\n* Support FCOS\n\n* Support RPN\n\n* Fix RPN topk_inds error\n\n* make batch exportable to onnx for yolohead\n\n* make fcos_head exportable to onnx with batch dim\n\n* Support ATSS\n\n* Support CornerNet and centripetalNet\n\n* Update RetinaNet and delta_xywh\n\n* Remove ugly code\n\n* Remove ugly code of FCOS\n\n* Remove ugly code of ATSS/YOLOV3\n\n* Support RPN and revert bbox_head\n\n* expand anchors to batch and remove BG class when use deploy_nms_pre\n\n* Update\n\n* Use dim=-1 instead of dim=2\n\n* Rename anchor_head method\n\n* Keep the original format output when nms is not use\n\n* Rename method and unified code style\n\n* Fix paa_head and unittest\n\n* Fix FASF onnx export error\n\n* Fix error\n\n* fix single stage img_shapes for onnx\n\n* move conf_thr\n\n* fix rpn_head for onnx\n\n* Add distance2bbox unittest\n\n* Remove TODO\n\n* Fix RPN\n\n* Update docstrs\n\nCo-authored-by: maningsheng <maningsheng@sensetime.com>\n",
        "label": "",
        "answer": "no",
        "change": [
            "def test_paa_head_loss():",
            "nms=dict(type='nms', iou_threshold=0.6),",
            "max_per_img=100))",
            "rescale = False",
            "-    self._get_bboxes_single(",
            "+    self._get_bboxes(",
            "cls_scores,",
            "bbox_preds,",
            "iou_preds,"
        ]
    },
    {
        "number": 8890,
        "comments": "",
        "commit_message": "Make linter happy, fix travis status icon\n\n",
        "label": "",
        "answer": "no",
        "change": [
            "def flip(tensor, is_label=False):",
            "tensor = np.expand_dims(tensor, axis=0)",
            "tensor = torch.from_numpy(tensor)",
            "if was_cuda:",
            "-       tensor = tensor.cuda()",
            "+        tensor = tensor.cuda()",
            "return tensor"
        ]
    },
    {
        "number": 8897,
        "comments": "",
        "commit_message": "ndarray shape and T, numpy transpose edge cases and small fixes (#7006)\n\n\n",
        "label": "",
        "answer": "no",
        "change": [
            "def matrix_transpose(",
            "*,",
            "out: Optional[Union[tf.Tensor, tf.Variable]] = None,",
            ") -> Union[tf.Tensor, tf.Variable]:",
            "-    return tf.experimental.numpy.swapaxes(x, -1, -2)",
            "+    return tf.linalg.matrix_transpose(x)",
            "",
            "",
            "# noinspection PyUnusedLocal,PyShadowingBuiltins"
        ]
    },
    {
        "number": 8898,
        "comments": "",
        "commit_message": "Fix `SpeechT5ForSpeechToSpeechIntegrationTests` device issue (#21460)\n\n* fix\n\n---------\n\nCo-authored-by: ydshieh <ydshieh@users.noreply.github.com>\n",
        "label": "",
        "answer": "no",
        "change": [
            "class SpeechT5ForSpeechToSpeech(SpeechT5PreTrainedModel):",
            "predicted mel spectrogram, or a tensor with shape `(num_frames,)` containing the speech waveform.",
            "\"\"\"",
            "if speaker_embeddings is None:",
            "-            speaker_embeddings = torch.zeros((1, 512))",
            "+            speaker_embeddings = torch.zeros((1, 512), device=input_values.device)",
            "",
            "return _generate_speech(",
            "self,"
        ]
    },
    {
        "number": 8899,
        "comments": "",
        "commit_message": "Fix summary tag name collision when both histogram and image plugins are enabled.\n\nCurrent workaround is adding the corresponding suffix (`\\histogram` or `\\image`)  to the weight name to distinguish summaries for different plugins.\n\nPiperOrigin-RevId: 444998362\n\n",
        "label": "",
        "answer": "no",
        "change": [
            "class TensorBoard(Callback, version_utils.TensorBoardVersionSelector):",
            "for layer in self.model.layers:",
            "for weight in layer.weights:",
            "weight_name = weight.name.replace(':', '_')",
            "-            tf.summary.histogram(weight_name, weight, step=epoch)",
            "+            # Add a suffix to prevent summary tag name collision.",
            "+            histogram_weight_name = weight_name + '/histogram'",
            "+            tf.summary.histogram(histogram_weight_name, weight, step=epoch)",
            "if self.write_images:",
            "-              self._log_weight_as_image(weight, weight_name, epoch)",
            "+              # Add a suffix to prevent summary tag name collision.",
            "+              image_weight_name = weight_name + '/image'",
            "+              self._log_weight_as_image(weight, image_weight_name, epoch)",
            "self._train_writer.flush()",
            "",
            "def _log_weight_as_image(self, weight, weight_name, epoch):"
        ]
    },
    {
        "number": 8900,
        "comments": "",
        "commit_message": "fixed a typo\n",
        "label": "",
        "answer": "no",
        "change": [
            "def get_learning_rate(batch):",
            "DECAY_STEP,          # Decay step.",
            "DECAY_RATE,          # Decay rate.",
            "staircase=True)",
            "-    learing_rate = tf.maximum(learning_rate, 0.00001) # CLIP THE LEARNING RATE!",
            "+    learning_rate = tf.maximum(learning_rate, 0.00001) # CLIP THE LEARNING RATE!",
            "return learning_rate",
            "",
            "def get_bn_decay(batch):"
        ]
    },
    {
        "number": 8901,
        "comments": "",
        "commit_message": ".to(device) bug fix\n\n",
        "label": "",
        "answer": "yes",
        "change": [
            "def test(data,",
            "",
            "# Load model",
            "google_utils.attempt_download(weights)",
            "-        model = torch.load(weights, map_location=device)['model'].float().fuse()  # load to FP32",
            "+        model = torch.load(weights, map_location=device)['model'].float().fuse().to(device)  # load to FP32",
            "imgsz = check_img_size(imgsz, s=model.stride.max())  # check img_size",
            "",
            "# Multi-GPU disabled, incompatible with .half() https://github.com/ultralytics/yolov5/issues/99"
        ]
    },
    {
        "number": 8906,
        "comments": "",
        "commit_message": "Pytorch v0.4 compatibility and minor fixes\n\n",
        "label": "",
        "answer": "no",
        "change": [
            "def generate_smooth_grad(Backprop, prep_img, target_class, param_n, param_sigma_",
            "smooth_grad = np.zeros(prep_img.size()[1:])",
            "",
            "mean = 0",
            "-    sigma = param_sigma_multiplier / (torch.max(prep_img) - torch.min(prep_img)).data[0]",
            "+    sigma = param_sigma_multiplier / (torch.max(prep_img) - torch.min(prep_img)).item()",
            "for x in range(param_n):",
            "# Generate noise",
            "noise = Variable(prep_img.data.new(prep_img.size()).normal_(mean, sigma**2))"
        ]
    },
    {
        "number": 8913,
        "comments": "",
        "commit_message": "Fix show during test (#3705)\n\n* fix show during test\n\n* sup show batch\n",
        "label": "",
        "answer": "no",
        "change": [
            "def single_gpu_test(model,",
            "for bbox_results, mask_results in result]",
            "results.extend(result)",
            "",
            "-        batch_size = len(result)",
            "for _ in range(batch_size):",
            "prog_bar.update()",
            "return results"
        ]
    },
    {
        "number": 8921,
        "comments": "",
        "commit_message": "fix typing callable in load storage (#1768)\n\n* fix typing callable in load storage\n\n* missing import\n",
        "label": "",
        "answer": "yes",
        "change": [
            "class SOSNet(nn.Module):",
            "self.desc_norm = nn.Sequential(nn.LocalResponseNorm(256, alpha=256.0, beta=0.5, k=0.0))",
            "# load pretrained model",
            "if pretrained:",
            "-            pretrained_dict = torch.hub.load_state_dict_from_url(urls['lib'], map_location=lambda storage, loc: storage)",
            "+            storage_fcn: Callable = lambda storage, loc: storage",
            "+            pretrained_dict = torch.hub.load_state_dict_from_url(",
            "+                urls['lib'], map_location=storage_fcn",
            "+            )",
            "self.load_state_dict(pretrained_dict, strict=True)",
            "self.eval()",
            "return"
        ]
    },
    {
        "number": 8926,
        "comments": "",
        "commit_message": "add link to health check issue and format fixes\n\n",
        "label": "",
        "answer": "no",
        "change": [
            "def test_sigmoid(x, dtype, tensor_fn, dev, call):",
            "# cardinality test",
            "assert ret.shape == x.shape",
            "# value test",
            "-    assert np.allclose(call(ivy.sigmoid, x), ivy.functional.backends.numpy.sigmoid(ivy.to_numpy(x)))",
            "-",
            "+    assert np.allclose(call(ivy.sigmoid, x), ivy_np.sigmoid(ivy.to_numpy(x)))",
            "",
            "",
            "# softmax"
        ]
    },
    {
        "number": 8929,
        "comments": "",
        "commit_message": "misc fix\n\n",
        "label": "",
        "answer": "no",
        "change": [
            "class Callbacks(Callback):",
            "",
            "def trigger_epoch(self):",
            "self.train.trigger_epoch()",
            "+        # TODO test callbacks can be run async?",
            "self.test.trigger_epoch()"
        ]
    },
    {
        "number": 8931,
        "comments": "",
        "commit_message": "Fix linting and sigmoid func\n\n",
        "label": "",
        "answer": "no",
        "change": [
            "def sigmoid(x):",
            "Returns:",
            "A tensor.",
            "\"\"\"",
            "-    return tf.sigmoid(x)",
            "+    return tf.math.sigmoid(x)",
            "",
            "",
            "@keras_export(\"keras.backend.hard_sigmoid\")"
        ]
    },
    {
        "number": 8938,
        "comments": "",
        "commit_message": "fix issue in accelerate. (#2121)\n\nCo-authored-by: Ammar Ahmad Awan <ammar.awan@microsoft.com>\n",
        "label": "",
        "answer": "no",
        "change": [
            "class TorchBackend(Backend):",
            "self.init_process_group(backend, timeout, init_method)",
            "",
            "def init_process_group(self, backend, timeout, init_method):",
            "-        return torch.distributed.init_process_group(backend,",
            "-                                                    timeout=timeout,",
            "-                                                    init_method=init_method)",
            "+        if not torch.distributed.is_initialized():",
            "+            torch.distributed.init_process_group(backend,",
            "+                                                 timeout=timeout,",
            "+                                                 init_method=init_method)",
            "",
            "def all_reduce(self,",
            "tensor,"
        ]
    },
    {
        "number": 8947,
        "comments": "",
        "commit_message": "[RLlib] Bug fixes and tests in DiagGaussian (#8676)\n\n\n",
        "label": "",
        "answer": "yes",
        "change": [
            "class TorchDiagGaussian(TorchDistributionWrapper):",
            "@override(ActionDistribution)",
            "def __init__(self, inputs, model):",
            "super().__init__(inputs, model)",
            "-        mean, log_std = torch.chunk(inputs, 2, dim=1)",
            "+        mean, log_std = torch.chunk(self.inputs, 2, dim=1)",
            "self.dist = torch.distributions.normal.Normal(mean, torch.exp(log_std))",
            "",
            "@override(ActionDistribution)"
        ]
    },
    {
        "number": 8949,
        "comments": "",
        "commit_message": "[RLlib] Add tensor-based tests for Schedules and fix some bugs related to using Schedules with tensor time input. (#9782)\n\n\n",
        "label": "",
        "answer": "no",
        "change": [
            "class Schedule(metaclass=ABCMeta):",
            "\"\"\"",
            "# By default (most of the time), tf should work with python code.",
            "# Override only if necessary.",
            "-        return tf.constant(self._value(t))",
            "+        return self._value(t)"
        ]
    },
    {
        "number": 8950,
        "comments": "",
        "commit_message": "fix both failing RoCBert tests (#20469)\n\n\n",
        "label": "",
        "answer": "no",
        "change": [
            "class RoCBertModelIntegrationTest(unittest.TestCase):",
            "# convert to tokens is: ['[CLS]', '\u5df4', '*', '\u9ece', '\u662f', '\u6cd5', '\u56fd', '\u7684', '\u9996', '\u90fd', '[SEP]']",
            "expected_output = torch.tensor([[101, 2349, 115, 7944, 3221, 3791, 1744, 4638, 7674, 6963, 102]])",
            "",
            "-        self.assertEqual(output_ids, expected_output)",
            "+        assert torch.allclose(output_ids, expected_output)"
        ]
    },
    {
        "number": 8951,
        "comments": "",
        "commit_message": "add min and max assertion for clip to all backends. (#3753)\n\n* add min and max assertion for clip to all backends.\n\n* remove min, max assertion for clip from `Ivy` backend.\n\n* fix core test for clip.\n\n* small reformat for clip core test.\n",
        "label": "",
        "answer": "yes",
        "change": [
            "def clip(",
            "*,",
            "out: Optional[torch.Tensor] = None,",
            ") -> torch.Tensor:",
            "+    assert torch.all(torch.less(x_min, x_max)), \"Min value must be less than max.\"",
            "if hasattr(x_min, \"dtype\"):",
            "promoted_type = torch.promote_types(x_min.dtype, x_max.dtype)",
            "promoted_type = torch.promote_types(promoted_type, x.dtype)"
        ]
    },
    {
        "number": 8952,
        "comments": "",
        "commit_message": "Add linting with black (#2678)\n\nSummary:\n# Before submitting\n\n- [ ] Was this discussed/approved via a Github issue? (no need for typos, doc improvements)\n- [ ] Did you read the [contributor guideline](https://github.com/pytorch/fairseq/blob/main/CONTRIBUTING.md)?\n- [ ] Did you make sure to update the docs?\n- [ ] Did you write any new necessary tests?\n\n## What does this PR do?\nFixes # (issue).\n\n## PR review\nAnyone in the community is free to review the PR once the tests have passed.\nIf we didn't discuss your PR in Github issues there's a high chance it will not be merged.\n\n## Did you have fun?\nMake sure you had fun coding \ufffd\n\nPull Request resolved: https://github.com/fairinternal/fairseq-py/pull/2678\n\nReviewed By: Mortimerp9\n\nDifferential Revision: D32653381\n\nPulled By: dianaml0\n\nfbshipit-source-id: 2810d14867cd7d64f4d340740e2b590b82de47fe\n\n",
        "label": "",
        "answer": "no",
        "change": [
            "logger = logging.getLogger(__name__)",
            "",
            "_SLOWMO_DDP_DISABLED = False",
            "try:",
            "-    from fairscale.experimental.nn.data_parallel import SlowMoBaseAlgorithm, SlowMoDistributedDataParallel",
            "+    from fairscale.experimental.nn.data_parallel import (",
            "+        SlowMoBaseAlgorithm,",
            "+        SlowMoDistributedDataParallel,",
            "+    )",
            "except ImportError:",
            "_SLOWMO_DDP_DISABLED = True"
        ]
    },
    {
        "number": 8954,
        "comments": "",
        "commit_message": "Fixed a bug in `AsymmetricConv` (#6595)\n\nHi, \nI fixed a bug in antisymmetric_conv.\nSpecifically, I changed the definition of `self.eye` (gradients don't\nneed to be computed for this Tensor) and fixed the doc.\n\nBest,\nAlessio\n\n---------\n\nCo-authored-by: pre-commit-ci[bot] <66853113+pre-commit-ci[bot]@users.noreply.github.com>\nCo-authored-by: rusty1s <matthias.fey@tu-dortmund.de>\n",
        "label": "",
        "answer": "no",
        "change": [
            "class AntiSymmetricConv(torch.nn.Module):",
            "",
            "def reset_parameters(self):",
            "torch.nn.init.kaiming_uniform_(self.W, a=math.sqrt(5))",
            "-        ones(self.eye)",
            "self.phi.reset_parameters()",
            "zeros(self.bias)"
        ]
    },
    {
        "number": 8961,
        "comments": "",
        "commit_message": "`random` submodule fix (#2368)\n\n\n",
        "label": "",
        "answer": "no",
        "change": [
            "def seed(seed_value: int = 0) -> None:",
            "",
            "def shuffle(x: torch.Tensor, *, out: Optional[torch.Tensor] = None) -> torch.Tensor:",
            "batch_size = x.shape[0]",
            "-    return torch.index_select(x, 0, torch.randperm(batch_size, out=out), out=out)",
            "+    return torch.index_select(x, 0, torch.randperm(batch_size), out=out)",
            "",
            "",
            "shuffle.support_native_out = True"
        ]
    },
    {
        "number": 8963,
        "comments": "",
        "commit_message": "fix flake8\n\n",
        "label": "",
        "answer": "no",
        "change": [
            "class TFFastSpeechOutput(tf.keras.layers.Layer):",
            "self.dropout = tf.keras.layers.Dropout(config.hidden_dropout_prob)",
            "",
            "def call(self, inputs, training=False):",
            "-        \"\"\"Call logic\"\"\"",
            "+        \"\"\"Call logic.\"\"\"",
            "hidden_states, input_tensor = inputs",
            "",
            "hidden_states = self.dense(hidden_states)"
        ]
    },
    {
        "number": 8976,
        "comments": "",
        "commit_message": "fix some problems; support multiple proposal_files and img_prefixes\n\n",
        "label": "",
        "answer": "no",
        "change": [
            "def main():",
            "",
            "model = build_detector(",
            "cfg.model, train_cfg=cfg.train_cfg, test_cfg=cfg.test_cfg)",
            "-    train_dataset = datasets.get_dataset(cfg.data.train)",
            "+    train_dataset = get_dataset(cfg.data.train)",
            "train_detector(",
            "model,",
            "train_dataset,"
        ]
    },
    {
        "number": 8993,
        "comments": "",
        "commit_message": "bug fix in summary. fix TF comptability break. update PTB readme\n\n",
        "label": "",
        "answer": "no",
        "change": [
            "def BatchNormV1(x, use_local_stat=None, decay=0.9, epsilon=1e-5):",
            "",
            "if use_local_stat:",
            "batch = tf.cast(tf.shape(x)[0], tf.float32)",
            "-        mul = tf.select(tf.equal(batch, 1.0), 1.0, batch / (batch - 1))",
            "+        mul = tf.where(tf.equal(batch, 1.0), 1.0, batch / (batch - 1))",
            "batch_var = batch_var * mul  # use unbiased variance estimator in training",
            "",
            "with tf.control_dependencies([ema_apply_op] if ctx.is_training else []):"
        ]
    },
    {
        "number": 8997,
        "comments": "",
        "commit_message": "fix: ignore update net1 in train2\n\n",
        "label": "",
        "answer": "yes",
        "change": [
            "def train(args, logdir):",
            "steps_per_epoch=hp.train1.steps_per_epoch,",
            "# session_config=session_conf",
            ")",
            "-    ckpt = args.ckpt if args.ckpt else tf.train.latest_checkpoint(logdir)",
            "+    ckpt = '{}/{}'.format(logdir, args.ckpt) if args.ckpt else tf.train.latest_checkpoint(logdir)",
            "if ckpt:",
            "train_conf.session_init = SaverRestore(ckpt)"
        ]
    },
    {
        "number": 9000,
        "comments": "",
        "commit_message": "Fix the jupyter notebook examples, e.g. requiring tensorflow 2.1 and providing v1 backward compatibility\n\n",
        "label": "",
        "answer": "no",
        "change": [
            "\"outputs\": [],",
            "\"source\": [",
            "\"#@title Set up SDE parameters\\n\",",
            "-        \"tf.reset_default_graph()\\n\",",
            "+        \"tf.compat.v1.reset_default_graph()\\n\",",
            "\"\\n\",",
            "\"dtype = np.float64 #@param\\n\",",
            "\"num_samples = 100000 #@param\\n\","
        ]
    },
    {
        "number": 9001,
        "comments": "",
        "commit_message": "fix code style\n\n",
        "label": "",
        "answer": "no",
        "change": [
            "class CTC(torch.nn.Module):",
            "self.probs = None  # for visualization",
            "",
            "# In case of Pytorch >= 1.7.0, CTC will be always builtin",
            "-        self.ctc_type = (",
            "-            ctc_type",
            "-            if V(torch.__version__) < V(\"1.7.0\")",
            "-            else \"builtin\"",
            "-        )",
            "+        self.ctc_type = ctc_type if V(torch.__version__) < V(\"1.7.0\") else \"builtin\"",
            "",
            "if ctc_type != self.ctc_type:",
            "logging.warning(f\"CTC was set to {self.ctc_type} due to PyTorch version.\")"
        ]
    },
    {
        "number": 9003,
        "comments": "",
        "commit_message": "fix typing callable in load storage (#1768)\n\n* fix typing callable in load storage\n\n* missing import\n",
        "label": "",
        "answer": "no",
        "change": [
            "class ZCAWhitening(nn.Module):",
            "",
            "T, mean, T_inv = zca_mean(x, self.dim, self.unbiased, self.eps, self.compute_inv)",
            "",
            "-        self.mean_vector: torch.Tensor = mean",
            "+        self.mean_vector = mean",
            "self.transform_matrix: torch.Tensor = T",
            "if T_inv is None:",
            "self.transform_inv: Optional[torch.Tensor] = torch.empty([0])"
        ]
    },
    {
        "number": 9007,
        "comments": "",
        "commit_message": "fix #827\n\n",
        "label": "",
        "answer": "no",
        "change": [
            "def convert_xlm_checkpoint_to_pytorch(xlm_checkpoint_path, pytorch_dump_folder_p",
            "model = chkpt['model']",
            "",
            "config = chkpt['params']",
            "-    config = dict((n, v) for n, v in config.items() if not isinstance(v, (torch.Tensor, numpy.ndarray)))",
            "+    config = dict((n, v) for n, v in config.items() if not isinstance(v, (torch.FloatTensor, numpy.ndarray)))",
            "",
            "vocab = chkpt['dico_word2id']",
            "vocab = dict((s + '</w>' if s.find('@@') == -1 and i > 13 else s.replace('@@', ''), i) for s, i in vocab.items())"
        ]
    },
    {
        "number": 9015,
        "comments": "",
        "commit_message": "fix mypy errors\n\n",
        "label": "",
        "answer": "no",
        "change": [
            "def invert_affine_transform(matrix: torch.Tensor) -> torch.Tensor:",
            "if not (len(matrix.shape) == 3 or matrix.shape[-2:] == (2, 3)):",
            "raise ValueError(\"Input matrix must be a Bx2x3 tensor. Got {}\"",
            ".format(matrix.shape))",
            "-    matrix_tmp: torch.Tensor = F.pad(matrix, (0, 0, 0, 1), \"constant\", 0.0)",
            "+    matrix_tmp: torch.Tensor = F.pad(matrix, [0, 0, 0, 1], \"constant\", 0.0)",
            "matrix_tmp[..., 2, 2] += 1.0",
            "",
            "matrix_inv: torch.Tensor = torch.inverse(matrix_tmp)"
        ]
    },
    {
        "number": 9016,
        "comments": "",
        "commit_message": "remove numpy import (#1116)\n\n* remove numpy import\n\n* [pre-commit.ci] auto fixes from pre-commit.com hooks\n\nfor more information, see https://pre-commit.ci\n\n* undo and add setup develop in gh actions\n\n* [pre-commit.ci] auto fixes from pre-commit.com hooks\n\nfor more information, see https://pre-commit.ci\n\n* remove create_checkerboard\n\nCo-authored-by: pre-commit-ci[bot] <66853113+pre-commit-ci[bot]@users.noreply.github.com>\n",
        "label": "",
        "answer": "no",
        "change": [
            "class TestBottomHat:",
            "None, None, :, :",
            "]",
            "assert_allclose(",
            "-            bottom_hat(tensor, torch.ones_like(structural_element), structuring_element=structural_element), expected,",
            "-            atol=1e-3, rtol=1e-3",
            "+            bottom_hat(tensor, torch.ones_like(structural_element), structuring_element=structural_element),",
            "+            expected,",
            "+            atol=1e-3,",
            "+            rtol=1e-3,",
            ")",
            "",
            "def test_exception(self, device, dtype):"
        ]
    },
    {
        "number": 9026,
        "comments": "",
        "commit_message": "tested maml with multiple inner gradient steps, and fixed small bug in tensorflow execute_with_gradients method.\n\n",
        "label": "",
        "answer": "yes",
        "change": [
            "def is_variable(x):",
            "",
            "",
            "def execute_with_gradients(func, xs, retain_grads=False):",
            "-    with _tf.GradientTape() as tape:",
            "+    with _tf.GradientTape(persistent=retain_grads, watch_accessed_variables=False) as tape:",
            "+        tape.watch(xs)",
            "func_ret = func(xs)",
            "if isinstance(func_ret, tuple):",
            "y = func_ret[0]"
        ]
    },
    {
        "number": 9030,
        "comments": "",
        "commit_message": "Fix `DBLP` download, move `get_edge_index` to `testing` package (#6901)\n\n\n",
        "label": "",
        "answer": "no",
        "change": [
            "def test_heterogeneous_random_node_loader():",
            "data['paper'].node_id = torch.arange(100)",
            "data['author'].x = torch.randn(200, 128)",
            "data['author'].node_id = torch.arange(200)",
            "-    data['paper', 'author'].edge_index = get_edge_index(100, 200, 500)",
            "+    data['paper', 'author'].edge_index = get_random_edge_index(100, 200, 500)",
            "data['paper', 'author'].edge_attr = torch.randn(500, 32)",
            "-    data['author', 'paper'].edge_index = get_edge_index(200, 100, 400)",
            "+    data['author', 'paper'].edge_index = get_random_edge_index(200, 100, 400)",
            "data['author', 'paper'].edge_attr = torch.randn(400, 32)",
            "-    data['paper', 'paper'].edge_index = get_edge_index(100, 100, 600)",
            "+    data['paper', 'paper'].edge_index = get_random_edge_index(100, 100, 600)",
            "data['paper', 'paper'].edge_attr = torch.randn(600, 32)",
            "",
            "loader = RandomNodeLoader(data, num_parts=4, shuffle=True)"
        ]
    },
    {
        "number": 9041,
        "comments": "",
        "commit_message": "Improve reproduceability 2/3 (#1906)\n\n* [Repro] Correct reproducability\n\n* up\n\n* up\n\n* uP\n\n* up\n\n* need better image\n\n* allow conversion from no state dict checkpoints\n\n* up\n\n* up\n\n* up\n\n* up\n\n* check tensors\n\n* check tensors\n\n* check tensors\n\n* check tensors\n\n* next try\n\n* up\n\n* up\n\n* better name\n\n* up\n\n* up\n\n* Apply suggestions from code review\n\n* correct more\n\n* up\n\n* replace all torch randn\n\n* fix\n\n* correct\n\n* correct\n\n* finish\n\n* fix more\n\n* up\n",
        "label": "",
        "answer": "no",
        "change": [
            "class DDPMPipeline(DiffusionPipeline):",
            "",
            "if self.device.type == \"mps\":",
            "# randn does not work reproducibly on mps",
            "-            image = torch.randn(image_shape, generator=generator)",
            "+            image = randn_tensor(image_shape, generator=generator)",
            "image = image.to(self.device)",
            "else:",
            "-            image = torch.randn(image_shape, generator=generator, device=self.device)",
            "+            image = randn_tensor(image_shape, generator=generator, device=self.device)",
            "",
            "# set step values",
            "self.scheduler.set_timesteps(num_inference_steps)"
        ]
    },
    {
        "number": 9044,
        "comments": "",
        "commit_message": "fixed the issues #372 (#379)\n\n\u4fee\u590d\u4e86\u4e00\u4e9b\u53c2\u6570\u4f20\u9012\u9020\u6210\u7684\u95ee\u9898\uff0c\u628a\u8fc7\u65f6\u7684torch.nn.functional.tanh()\u6539\u6210\u4e86torch.tanh()\n",
        "label": "",
        "answer": "no",
        "change": [
            "class WaveRNN(nn.Module) :",
            "# Compute the fine gates",
            "u = F.sigmoid(R_fine_u + I_fine_u + b_fine_u)",
            "r = F.sigmoid(R_fine_r + I_fine_r + b_fine_r)",
            "-                e = F.tanh(r * R_fine_e + I_fine_e + b_fine_e)",
            "+                e = torch.tanh(r * R_fine_e + I_fine_e + b_fine_e)",
            "hidden_fine = u * hidden_fine + (1. - u) * e",
            "",
            "# Compute the fine output"
        ]
    },
    {
        "number": 9046,
        "comments": "",
        "commit_message": "Very minor doc fixes.\n\nPiperOrigin-RevId: 456160001\n\n",
        "label": "",
        "answer": "no",
        "change": [
            "class ThresholdsTest(tf.test.TestCase, parameterized.TestCase):",
            "self.assertAllClose(v1, v2)",
            "",
            "",
            "-if __name__ == '__main__':",
            "-  tf.test.main()",
            "+if __name__ == \"__main__\":",
            "+    tf.test.main()"
        ]
    },
    {
        "number": 9047,
        "comments": "",
        "commit_message": "Fix broken TF DistributedOptimizer with Keras 2.11+ (#3822)\n\nSigned-off-by: Nicolas Castet <ncastet@nvidia.com>\n",
        "label": "",
        "answer": "no",
        "change": [
            "target = tf.one_hot(indices, 2)",
            "",
            "lr = 0.001",
            "model = tf.keras.Sequential([tf.keras.layers.Dense(2, activation='softmax')])",
            "-optimizer = tf.optimizers.SGD(lr * hvd.size())",
            "+optimizer = optimizers.SGD(lr * hvd.size())",
            "",
            "hostname = os.environ.get('HOROVOD_HOSTNAME')",
            "start_rank = int(os.environ.get('HOROVOD_RANK', 0))"
        ]
    },
    {
        "number": 9048,
        "comments": "",
        "commit_message": "Fix unit tests\n\n",
        "label": "",
        "answer": "yes",
        "change": [
            "def test_sequence_tagger_param_selector(results_base_path, tasks_base_path):",
            "",
            "@pytest.mark.integration",
            "def test_text_classifier_param_selector(results_base_path, tasks_base_path):",
            "-    corpus = flair.datasets.ClassificationCorpus(tasks_base_path / \"imdb\")",
            "+    corpus = flair.datasets.ClassificationCorpus(tasks_base_path / \"imdb\", label_type=\"sentiment\")",
            "label_type = \"sentiment\"",
            "",
            "search_space = SearchSpace()",
            "",
            "# document embeddings parameter",
            "-    search_space.add(Parameter.TRANSFORMER_MODEL, hp.choice, options=[\"albert-base-v1\"])",
            "+    search_space.add(Parameter.TRANSFORMER_MODEL, hp.choice, options=[\"sshleifer/tiny-distilbert-base-cased\"])",
            "search_space.add(Parameter.LAYERS, hp.choice, options=[\"-1\", \"-2\"])",
            "",
            "# training parameter"
        ]
    },
    {
        "number": 9050,
        "comments": "",
        "commit_message": "Fixed bugs in patchsequential. Remove fill_diagonal operation for better ONNX support. (#1178)\n\n* Minor fixes\n\n* update\n\n* [pre-commit.ci] auto fixes from pre-commit.com hooks\n\nfor more information, see https://pre-commit.ci\n\nCo-authored-by: pre-commit-ci[bot] <66853113+pre-commit-ci[bot]@users.noreply.github.com>\n",
        "label": "",
        "answer": "no",
        "change": [
            "def get_rotation_matrix2d(center: torch.Tensor, angle: torch.Tensor, scale: torc",
            "",
            "# convert angle and apply scale",
            "rotation_matrix: torch.Tensor = angle_to_rotation_matrix(angle)",
            "-    scaling_matrix: torch.Tensor = (",
            "-        torch.zeros((2, 2), device=rotation_matrix.device, dtype=rotation_matrix.dtype)",
            "-        .fill_diagonal_(1)",
            "-        .repeat(rotation_matrix.size(0), 1, 1)",
            "+    scaling_matrix: torch.Tensor = torch.eye(2, device=rotation_matrix.device, dtype=rotation_matrix.dtype).repeat(",
            "+        rotation_matrix.size(0), 1, 1",
            ")",
            "",
            "scaling_matrix = scaling_matrix * scale.unsqueeze(dim=2).repeat(1, 1, 2)"
        ]
    },
    {
        "number": 9053,
        "comments": "",
        "commit_message": "fix TF deprecation of concat/split/pack/unpack\n\n",
        "label": "",
        "answer": "no",
        "change": [
            "class Model(ModelDesc):",
            ".Conv2D('conv4_7_CPM', 128)())",
            "",
            "def add_stage(stage, l):",
            "-            l = tf.concat(3, [l, shared, pool_center], name='concat_stage{}'.format(stage))",
            "+            l = tf.concat_v2([l, shared, pool_center], 3,",
            "+                             name='concat_stage{}'.format(stage))",
            "for i in range(1, 6):",
            "l = Conv2D('Mconv{}_stage{}'.format(i, stage), l, 128)",
            "l = Conv2D('Mconv6_stage{}'.format(stage), l, 128, kernel_shape=1)"
        ]
    },
    {
        "number": 9055,
        "comments": "",
        "commit_message": "fix diff for tensorflow as the append function used does not work with None\n",
        "label": "",
        "answer": "no",
        "change": [
            "def diff(",
            "prepend: Optional[Union[tf.Tensor, tf.Variable, int, float, list, tuple]] = None,",
            "append: Optional[Union[tf.Tensor, tf.Variable, int, float, list, tuple]] = None,",
            ") -> Union[tf.Tensor, tf.Variable]:",
            "-    x = tf.experimental.numpy.append(prepend, x, axis=axis)",
            "-    x = tf.experimental.numpy.append(x, append, axis=axis)",
            "+    if prepend != None:",
            "+        x = tf.experimental.numpy.append(prepend, x, axis=axis)",
            "+    if append != None:",
            "+        x = tf.experimental.numpy.append(x, append, axis=axis)",
            "return tf.experimental.numpy.diff(x, n=n, axis=axis)"
        ]
    },
    {
        "number": 9061,
        "comments": "",
        "commit_message": "[RLlib] Fix `use_lstm` flag for ModelV2 (w/o ModelV1 wrapping) and add it for PyTorch. (#8734)\n\n\n",
        "label": "",
        "answer": "no",
        "change": [
            "def build_vtrace_loss(policy, model, dist_class, train_batch):",
            "values = model.value_function()",
            "",
            "if policy.is_recurrent():",
            "-        max_seq_len = tf.reduce_max(train_batch[\"seq_lens\"]) - 1",
            "+        max_seq_len = tf.reduce_max(train_batch[\"seq_lens\"])",
            "mask = tf.sequence_mask(train_batch[\"seq_lens\"], max_seq_len)",
            "mask = tf.reshape(mask, [-1])",
            "else:"
        ]
    },
    {
        "number": 9063,
        "comments": "",
        "commit_message": "fix kw_only missmatch for diff function with out arg missing for jax, torch and tensorflow as opposed to np backend and ivy functional\n\n",
        "label": "",
        "answer": "no",
        "change": [
            "def diff(",
            "axis: Optional[int] = -1,",
            "prepend: Optional[Union[tf.Tensor, tf.Variable, int, float, list, tuple]] = None,",
            "append: Optional[Union[tf.Tensor, tf.Variable, int, float, list, tuple]] = None,",
            "+    out: Optional[Union[tf.Tensor, tf.Variable]] = None,",
            ") -> Union[tf.Tensor, tf.Variable]:",
            "if prepend is not None:",
            "x = tf.experimental.numpy.append(prepend, x, axis=axis)"
        ]
    },
    {
        "number": 9068,
        "comments": "",
        "commit_message": "fix torch.nonzero usage in pytorch 1.5 (#2602)\n\n\n",
        "label": "",
        "answer": "no",
        "change": [
            "def _expand_binary_labels(labels, label_weights, label_channels):",
            "# in other files such as in ghm_loss, the _expand_binary_labels",
            "# is used for multi-class classification.",
            "bin_labels = labels.new_full((labels.size(0), label_channels), 0)",
            "-    inds = torch.nonzero(labels >= 1).squeeze()",
            "+    inds = torch.nonzero(labels >= 1, as_tuple=False).squeeze()",
            "if inds.numel() > 0:",
            "bin_labels[inds, labels[inds] - 1] = 1",
            "if label_weights is None:"
        ]
    },
    {
        "number": 9070,
        "comments": "",
        "commit_message": "Fix errors in unit tests\n\n",
        "label": "",
        "answer": "no",
        "change": [
            "class TextClassifier(flair.nn.DefaultClassifier[Sentence]):",
            "text_embedding_list = [sentence.get_embedding(embedding_names).unsqueeze(0) for sentence in sentences]",
            "text_embedding_tensor = torch.cat(text_embedding_list, 0).to(flair.device)",
            "",
            "-        # send through decoder to get logits",
            "-        scores = self.decoder(text_embedding_tensor)",
            "-",
            "labels = []",
            "for sentence in sentences:",
            "labels.append([label.value for label in sentence.get_labels(self.label_type)])",
            "",
            "if return_label_candidates:",
            "label_candidates = [Label(value=\"<None>\") for sentence in sentences]",
            "-            return scores, labels, sentences, label_candidates",
            "+            return text_embedding_tensor, labels, sentences, label_candidates",
            "",
            "-        return scores, labels",
            "+        return text_embedding_tensor, labels",
            "",
            "def _get_state_dict(self):",
            "model_state = {"
        ]
    },
    {
        "number": 9075,
        "comments": "",
        "commit_message": "fixing some imports etc.\n\nsome leftover from commit c358f3ac1fbbbd3c805fb257304f90c76bc63bc8\n\n",
        "label": "",
        "answer": "no",
        "change": [
            "def empty(shape: Union[int, Tuple[int]],",
            "def array(object_in, dtype=None, dev=None):",
            "dtype = dtype_from_str(default_dtype(dtype, object_in))",
            "dev = default_device(dev)",
            "-    with _tf.device(dev_from_str(dev)):",
            "+    with tf.device(dev_from_str(dev)):",
            "try:",
            "-            tensor = _tf.convert_to_tensor(object_in, dtype=dtype)",
            "+            tensor = tf.convert_to_tensor(object_in, dtype=dtype)",
            "except (TypeError, ValueError):",
            "-            tensor = _tf.convert_to_tensor(ivy.nested_map(object_in, lambda x: _tf.cast(x, dtype)), dtype=dtype)",
            "+            tensor = tf.convert_to_tensor(ivy.nested_map(object_in, lambda x: tf.cast(x, dtype)), dtype=dtype)",
            "if dtype is None:",
            "return tensor",
            "-        return _tf.cast(tensor, dtype)",
            "+        return tf.cast(tensor, dtype)",
            "",
            "",
            "asarray = array"
        ]
    },
    {
        "number": 9076,
        "comments": "",
        "commit_message": " Replace literal constant 10 with variable num_classes in example/ (#8041)\n\n* Replace literal constant 10 with variable num_classes\n\n* Fix PEP8 errors\n\n",
        "label": "",
        "answer": "no",
        "change": [
            "test_model.summary()",
            "",
            "loss, acc = test_model.evaluate(x_test,",
            "keras.utils.to_categorical(y_test),",
            "-                                classes)",
            "+                                num_classes)",
            "print('\\nTest accuracy: {0}'.format(acc))"
        ]
    },
    {
        "number": 9078,
        "comments": "",
        "commit_message": "[Metrics] Fix/4237 auc unstable reorder (#4281)\n\n* =Add deprecation warning for auc reorder\n\n* =Add test for deprecation warning for auc reorder\n\n* Update CHANGELOG\n\n* Add reorder deprecation warning to auc docstring\n\n* Fix pep8 f-string error\n\n* remove duplicate import\n\nCo-authored-by: Nicki Skafte <skaftenicki@gmail.com>\n",
        "label": "",
        "answer": "no",
        "change": [
            "def auc(",
            "if (dx, 0).all():",
            "direction = -1.",
            "else:",
            "-                raise ValueError(\"Reordering is not turned on, and \"",
            "-                                 \"the x array is not increasing: %s\" % x)",
            "+                # TODO: Update message on removing reorder",
            "+                raise ValueError(\"Reorder is not turned on, and the 'x' array is\"",
            "+                                 f\" neither increasing or decreasing: {x}\")",
            "",
            "return direction * torch.trapz(y, x)"
        ]
    },
    {
        "number": 9079,
        "comments": "",
        "commit_message": "Fixes Beit training for PyTorch 1.10+ (#14249)\n\n\n",
        "label": "",
        "answer": "no",
        "change": [
            "class BeitUperHead(nn.Module):",
            "used_backbone_levels = len(laterals)",
            "for i in range(used_backbone_levels - 1, 0, -1):",
            "prev_shape = laterals[i - 1].shape[2:]",
            "-            laterals[i - 1] += nn.functional.interpolate(",
            "+            laterals[i - 1] = laterals[i - 1] + nn.functional.interpolate(",
            "laterals[i], size=prev_shape, mode=\"bilinear\", align_corners=self.align_corners",
            ")"
        ]
    },
    {
        "number": 9085,
        "comments": "",
        "commit_message": "Allow saving / loading checkpoints from cloud paths (#683)\n\n* Allow saving / loading checkpoints from cloud paths\n\nAllows saving and loading checkpoints directly from cloud paths like\nAmazon S3 (s3://) and Google Cloud Storage (gs://) by using fsspec.\n\nNote: The user will have to install the relevant dependency for each\nprotocol. Otherwise fsspec will fail and specify which dependency is\nmissing.\n\n* Append suffix _fsspec to save/load function names\n\n* Add a lower bound to the fsspec dependency\n\nSkips the 0 major version.\n\n* Add missing changes from refactor\n\n* Use fsspec for remaining artifacts\n\n* Add test case with path requiring fsspec\n\n* Avoid writing logs to file unless output_path is local\n\n* Document the possibility of using paths supported by fsspec\n\n* Fix style and lint\n\n* Add missing lint fixes\n\n* Add type annotations to new functions\n\n* Use Coqpit method for converting config to dict\n\n* Fix type annotation in semi-new function\n\n* Add return type for load_fsspec\n\n* Fix bug where fs not always created\n\n* Restore the experiment removal functionality\n",
        "label": "",
        "answer": "no",
        "change": [
            "def main(args):  # pylint: disable=redefined-outer-name",
            "raise Exception(\"The %s  not is a loss supported\" % c.loss)",
            "",
            "if args.restore_path:",
            "-        checkpoint = torch.load(args.restore_path)",
            "+        checkpoint = load_fsspec(args.restore_path)",
            "try:",
            "model.load_state_dict(checkpoint[\"model\"])"
        ]
    },
    {
        "number": 9088,
        "comments": "",
        "commit_message": "Module namespace cleanup for v2.0 (#3875)\n\n* Imports cleaning\n\n* Small change\n\n* Remove unused methods\n\n* Small fix\n\n* Additional fix\n\n* Final fix\n\n* Fix benchmark test\n\n* Fix benchmark test #2\n",
        "label": "",
        "answer": "no",
        "change": [
            "def generate_examples(features: dict, num_examples=100, seq_shapes=None):",
            "def generate_example_dataset(dataset_path, features, num_examples=100, seq_shapes=None):",
            "dummy_data = generate_examples(features, num_examples=num_examples, seq_shapes=seq_shapes)",
            "",
            "-    with datasets.ArrowWriter(features=features, path=dataset_path) as writer:",
            "+    with ArrowWriter(features=features, path=dataset_path) as writer:",
            "for key, record in dummy_data:",
            "example = features.encode_example(record)",
            "writer.write(example)"
        ]
    },
    {
        "number": 9089,
        "comments": "",
        "commit_message": "fixed dqn init after refactor\n\n",
        "label": "",
        "answer": "no",
        "change": [
            "class DistributedModel(object):",
            "self.batch_shape = [None]",
            "self.deterministic_mode = config.get('deterministic_mode', False)",
            "self.alpha = config.get('alpha', 0.001)",
            "-        # self.init_op = tf.global_variables_initializer()",
            "-",
            "self.optimizer = None",
            "",
            "self.worker_device = \"/job:worker/task:{}/cpu:0\".format(task_index)"
        ]
    },
    {
        "number": 9092,
        "comments": "",
        "commit_message": "Fix unused variable found (#1250)\n\n* Fix Unused variable found\n\n* more fixes\n\n* Update kornia/enhance/histogram.py\n",
        "label": "",
        "answer": "no",
        "change": [
            "def _nullspace(A):",
            "",
            "Return the smallest singular value and the corresponding vector.",
            "\"\"\"",
            "-    u, s, vh = torch.svd(A)",
            "+    _, s, vh = torch.svd(A)",
            "return s[..., -1], vh[..., -1]"
        ]
    },
    {
        "number": 9096,
        "comments": "",
        "commit_message": "Support >3d mask matrices.\n\nThe change to the dimshuffle/transpose call to support >3d inputs was\ncorrect for the inputs array but did not apply to the mask array. This\nfixes that.\n\n",
        "label": "",
        "answer": "no",
        "change": [
            "def rnn(step_function, inputs, initial_states,",
            "mask = tf.cast(mask, tf.bool)",
            "else:",
            "# Transpose not supported by bool tensor types, hence round-trip to uint8.",
            "-        mask = tf.cast(tf.transpose(tf.cast(mask, tf.uint8), (1, 0, 2)), tf.bool)",
            "+        mask = tf.cast(tf.transpose(tf.cast(mask, tf.uint8), axes), tf.bool)",
            "",
            "mask_list = tf.unpack(mask)"
        ]
    },
    {
        "number": 9098,
        "comments": "",
        "commit_message": "fix feature bias error\n\n",
        "label": "",
        "answer": "yes",
        "change": [
            "\"\\n\",",
            "\"\\n\",",
            "\"\\\"\\\"\\\"fm part\\\"\\\"\\\"\\n\",",
            "-    \"fm_first_order = tf.nn.embedding_lookup(weights['feature_embeddings'],feat_index)\\n\",",
            "+    \"fm_first_order = tf.nn.embedding_lookup(weights['feature_bias'],feat_index)\\n\",",
            "\"fm_first_order = tf.reduce_sum(tf.multiply(fm_first_order,reshaped_feat_value),2)\\n\",",
            "\"\\n\",",
            "\"summed_features_emb = tf.reduce_sum(embeddings,1)\\n\","
        ]
    },
    {
        "number": 9100,
        "comments": "",
        "commit_message": "fix trivia_qa unfiltered (#2995)\n\n\n",
        "label": "",
        "answer": "no",
        "change": [
            "class TriviaQa(datasets.GeneratorBasedBuilder):",
            "try:",
            "with open(os.path.join(file_dir, fname), encoding=\"utf-8\") as f:",
            "new_item[context_field] = f.read()",
            "-                    except (IOError, datasets.Value(\"errors\").NotFoundError):",
            "+                    except (IOError, FileNotFoundError):",
            "logger.info(\"File does not exist, skipping: %s\", fname)",
            "continue",
            "new_items.append(new_item)"
        ]
    },
    {
        "number": 9103,
        "comments": "",
        "commit_message": "Fixes #7408. Move the import of the tensorboard projector plugin to the TensorBoard __init__ method (#7886)\n\n\n",
        "label": "",
        "answer": "no",
        "change": [
            "class TensorBoard(Callback):",
            "if K.backend() != 'tensorflow':",
            "raise RuntimeError('TensorBoard callback only works '",
            "'with the TensorFlow backend.')",
            "+        global tf, projector",
            "+        import tensorflow as tf",
            "+        from tensorflow.contrib.tensorboard.plugins import projector",
            "self.log_dir = log_dir",
            "self.histogram_freq = histogram_freq",
            "self.merged = None"
        ]
    },
    {
        "number": 9108,
        "comments": "",
        "commit_message": "Fix test scripts and some code\n\n",
        "label": "",
        "answer": "no",
        "change": [
            "class RNNLM(nn.Module):",
            "super(RNNLM, self).__init__()",
            "self.embed = nn.Embedding(n_vocab, n_units)",
            "self.lstm = nn.ModuleList(",
            "-            [nn.LSTMCell(n_units, n_units) for _ in six.moves.range(n_layers)])",
            "+            [nn.LSTMCell(n_units, n_units) for _ in range(n_layers)])",
            "self.dropout = nn.ModuleList(",
            "-            [nn.Dropout() for _ in six.moves.range(n_layers + 1)])",
            "+            [nn.Dropout() for _ in range(n_layers + 1)])",
            "self.lo = nn.Linear(n_units, n_vocab)",
            "self.n_layers = n_layers",
            "self.n_units = n_units"
        ]
    },
    {
        "number": 9109,
        "comments": "",
        "commit_message": "fix: documentation allign code and comment (#1782)\n\n* fix: allign code and comment\n\n* lint\n",
        "label": "",
        "answer": "no",
        "change": [
            "adaptive number of epochs.",
            "",
            "",
            "# Initialize the text regressor.",
            "-reg = ak.TextRegressor(overwrite=True, max_trials=1)  # It tries 10 different models.",
            "+reg = ak.TextRegressor(",
            "+    overwrite=True, max_trials=10  # It tries 10 different models.",
            "+)",
            "# Feed the text regressor with training data.",
            "reg.fit(x_train, y_train, epochs=2)",
            "# Predict with the best model."
        ]
    },
    {
        "number": 9116,
        "comments": "",
        "commit_message": "[TorchScript] Add user-defined HF Bert tokenizers (#2733)\n\n* first working set\n\n* wip todo: add never_split kwarg\n\n* adds new never_split kwarg\n\n* clean up\n\n* get tests passing\n\n* updated py38 tests\n\n* pr revisions\n\n* [pre-commit.ci] auto fixes from pre-commit.com hooks\n\nfor more information, see https://pre-commit.ci\n\n* logging > logger\n\nCo-authored-by: pre-commit-ci[bot] <66853113+pre-commit-ci[bot]@users.noreply.github.com>\n",
        "label": "",
        "answer": "no",
        "change": [
            "def test_torchscript_e2e_text(tmpdir, csv_filename):",
            "",
            "",
            "@pytest.mark.skipif(",
            "-    torch.torch_version.TorchVersion(torchtext.__version__) < (0, 13, 0),",
            "-    reason=\"requires torchtext 0.13.0 or higher\",",
            "+    torch.torch_version.TorchVersion(torchtext.__version__) < (0, 14, 0),",
            "+    reason=\"requires torchtext 0.14.0 or higher\",",
            ")",
            "def test_torchscript_e2e_text_hf_tokenizer(tmpdir, csv_filename):",
            "data_csv_path = os.path.join(tmpdir, csv_filename)"
        ]
    },
    {
        "number": 9117,
        "comments": "",
        "commit_message": "Fix exception thrown using MishActivation (#19739)\n\n* Fix exception thrown using MishActivation\n\n* Update activations.py\n",
        "label": "",
        "answer": "no",
        "change": [
            "class MishActivation(nn.Module):",
            "",
            "def __init__(self):",
            "super().__init__()",
            "-        if version.parse(version.parse(torch.__version__).base_version) < version.parse(\"1.9\"):",
            "+        if version.parse(torch.__version__) < version.parse(\"1.9.0\"):",
            "self.act = self._mish_python",
            "else:",
            "self.act = nn.functional.mish"
        ]
    },
    {
        "number": 9122,
        "comments": "",
        "commit_message": "Fix issues in fused_dam (#469)\n\n* move import of amp_C to __init__()\n\n* make fp16/32 separate lists to support mixed param types, disable double test\n\n* make zero_grad consistent between adam/novograd/lamb\n\n",
        "label": "",
        "answer": "no",
        "change": [
            "class TestFusedAdam(unittest.TestCase):",
            "self.assertLessEqual(max_abs_diff, self.max_abs_diff)",
            "self.assertLessEqual(max_rel_diff, self.max_rel_diff)",
            "",
            "-    def test_double(self):",
            "-        self.gen_single_type_test(param_type=torch.double)",
            "-",
            "def test_float(self):",
            "self.gen_single_type_test(param_type=torch.float)"
        ]
    },
    {
        "number": 9123,
        "comments": "",
        "commit_message": "docs: add a new gobot tutorial (#982)\n\n* fix: fix super convergence tutor\n\n* fix: fix link in classification tutor\n\n* feat: add data prep & database build to gobot tutor\n\n* feat: make ner config dependent on variables only\n\n* feat: support empty slot vals\n\n* feat: in the middle of big refactor of ner\n\n* feat: slot-filling section in gobot tutor\n\n* feat: add simpler dstc2 format\n\n* feat: simplify tutor & simplify data\n\n* feat: refactor user state & add typings & and format strings\n\n* feat: update gobot tutor\n\n* feat: table name is optional in sqlite_database, rewrite to f-string\n\n* feat: add diagram pics\n\n* feat: add diagrams to tutor, add text\n\n* feat: fix imgs & add tutor plan\n\n* fix: fix simple data reader and ner iterator\n\n* fix: use simple dstc reader everywhere\n\n* feat: fix several tf warnings\n\n* fix: multiuser gobot support\n\n* feat: update gobot_dstc2 model\n\n* fix: error in DefaultTemplate\n\n* feat: update gobot_dstc2_best model\n\n* fix: fix debug mode\n\n* fix: dstc2_ner_iterator\n\n* feat: make api_call_action unrequired\n\n",
        "label": "",
        "answer": "no",
        "change": [
            "def variational_dropout(units, keep_prob, fixed_mask_dims=(1,)):",
            "noise_shape = [units_shape[n] for n in range(len(units.shape))]",
            "for dim in fixed_mask_dims:",
            "noise_shape[dim] = 1",
            "-    return tf.nn.dropout(units, keep_prob, noise_shape)",
            "+    return tf.nn.dropout(units, rate=1-keep_prob, noise_shape=noise_shape)"
        ]
    },
    {
        "number": 9125,
        "comments": "",
        "commit_message": "lint fix & general reformatting\n\n",
        "label": "",
        "answer": "no",
        "change": [
            "def tile(",
            "/,",
            "reps: Sequence[int],",
            "*,",
            "-    out: Optional[Union[tf.Tensor, tf.Variable]] = None",
            "-) -> Union[tf.Tensor, tf.Variable] :",
            "+    out: Optional[Union[tf.Tensor, tf.Variable]] = None,",
            "+) -> Union[tf.Tensor, tf.Variable]:",
            "if x.shape == ():",
            "x = tf.reshape(x, (-1,))",
            "if isinstance(reps, Number):"
        ]
    },
    {
        "number": 9126,
        "comments": "",
        "commit_message": "Add PyTorch 1.8 Profiler 5/5 (#6618)\n\n* Refactor profilers\n\n* Update PassThrough\n\n* WIP - This is broken and will change\n\n* Update pytorch_lightning/profiler/pytorch.py\n\nCo-authored-by: thomas chaton <thomas@grid.ai>\n\n* resolve tests\n\n* resolve tests\n\n* find output\n\n* try something\n\n* update\n\n* add support for test and predict\n\n* update\n\n* update\n\n* use getattr\n\n* test\n\n* test\n\n* update\n\n* tests\n\n* update\n\n* update\n\n* update\n\n* update\n\n* update\n\n* remove file\n\n* update\n\n* update\n\n* update\n\n* update\n\n* update\n\n* test\n\n* update#\n\n* update\n\n* update tests\n\n* update\n\n* add suport for 1.8\n\n* rename records\n\n* add support for 1.8\n\n* update\n\n* resolve flake8\n\n* resolve test\n\n* Refactor basic profilers\n\n* Fixes\n\n* Unused import\n\n* Introduce setup\n\n* Profile on all ranks. Print to stdout on 0\n\n* Introduce dirpath + filename\n\n* CHANGELOG\n\n* Add tests. Address comments\n\n* add `on_run_stage_setup`\n\n* add on_run_stage_setup function\n\n* update\n\n* add test for RegisterRecordFunction\n\n* update lightnng flow direction\n\n* move variable to private\n\n* remove trace\n\n* Undo code that should be in 3/4\n\n* Multi-stage multi-rank\n\n* 2/5 changes\n\n* Pass stage in __del__\n\n* Remove TODOs\n\n* Describe on_evaluation_end. Add tests\n\n* Typo\n\n* Address comments\n\n* deepcopy tests\n\n* Advanced teardown\n\n* Fix teardown test\n\n* Fix tests\n\n* Minor change\n\n* Update CHANGELOG.md\n\n* Fix test\n\n* Quick fixes\n\n* Fix 6522\n\n* resolve ddp tests\n\n* resolve tests\n\n* resolve some tests\n\n* update tests\n\n* resolve tests\n\n* update\n\n* resolve tests\n\n* resolve some tests\n\n* Missed fixes from 3/5\n\n* Fixes\n\n* resolve some tests\n\n* resolve test for 1.7.1\n\n* Broken refactor\n\n* Missed stage\n\n* Minor changes\n\n* resolve tests\n\n* Update CHANGELOG\n\n* resolve bug\n\n* remove print\n\n* Typo\n\n* Cleanup\n\n* resolve ddp test\n\n* remove barrier\n\n* update profiler\n\n* update\n\n* Smaller model\n\n* update\n\n* resolve tests\n\n* update\n\n* Minor changes. CHANGELOG\n\n* Minimize diff\n\n* update to 1.8.1\n\n* RunIf. Extra code. Check segfault\n\n* resolve tests\n\n* Typo. Bad merge\n\n* Fixing a bad merge\n\n* replace for kineto\n\n* Update pytorch_lightning/profiler/pytorch.py\n\nCo-authored-by: ananthsub <ananth.subramaniam@gmail.com>\n\n* Update pytorch_lightning/profiler/pytorch.py\n\nCo-authored-by: ananthsub <ananth.subramaniam@gmail.com>\n\n* Minor changes\n\n* Bad merge\n\n* Use lists for flexibility\n\n* Use sets\n\n* predict_step\n\n* Ananth's suggestion\n\n* update\n\n* Docs\n\n* Update pl_examples/basic_examples/profiler_example.py\n\nCo-authored-by: Jirka Borovec <Borda@users.noreply.github.com>\n\n* update example\n\n* update example\n\nCo-authored-by: Carlos Mocholi <carlossmocholi@gmail.com>\nCo-authored-by: ananthsub <ananth.subramaniam@gmail.com>\nCo-authored-by: Jirka Borovec <Borda@users.noreply.github.com>\n",
        "label": "",
        "answer": "no",
        "change": [
            "def test_plugin_setup_optimizers_in_pre_dispatch(tmpdir, delay_dispatch):",
            "assert len(self.trainer.optimizers) > 0",
            "",
            "class CustomPlugin(SingleDevicePlugin):",
            "+",
            "@property",
            "def setup_optimizers_in_pre_dispatch(self) -> bool:",
            "return delay_dispatch",
            "",
            "model = TestModel()",
            "-    trainer = Trainer(",
            "-        default_root_dir=tmpdir,",
            "-        fast_dev_run=True,",
            "-        plugins=CustomPlugin(device=torch.device(\"cpu\"))",
            "-    )",
            "+    trainer = Trainer(default_root_dir=tmpdir, fast_dev_run=True, plugins=CustomPlugin(device=torch.device(\"cpu\")))",
            "trainer.fit(model)"
        ]
    },
    {
        "number": 9128,
        "comments": "",
        "commit_message": "Milvus integration (#771)\n\n* Initial commit for Milvus integration\n\n* Add latest docstring and tutorial changes\n\n* Updating implementation of Milvus document store\n\n* Add latest docstring and tutorial changes\n\n* Adding tests and updating doc string\n\n* Add latest docstring and tutorial changes\n\n* Fixing issue caught by tests\n\n* Addressing review comments\n\n* Fixing mypy detected issue\n\n* Fixing issue caught in test about sorting of vector ids\n\n* fixing test\n\n* Fixing generator test failure\n\n* update docstrings\n\n* Addressing review comments about multiple network call while fetching embedding from milvus server\n\n* Add latest docstring and tutorial changes\n\n* Ignoring mypy issue while converting vector_id to int\n\nCo-authored-by: github-actions[bot] <41898282+github-actions[bot]@users.noreply.github.com>\nCo-authored-by: Malte Pietsch <malte.pietsch@deepset.ai>\n",
        "label": "",
        "answer": "no",
        "change": [
            "class RAGenerator(BaseGenerator):",
            "embeddings = self.retriever.embed_passages(docs)",
            "",
            "embeddings_in_tensor = torch.cat(",
            "-            [torch.from_numpy(embedding).unsqueeze(0) for embedding in embeddings],",
            "+            [torch.from_numpy(embedding).float().unsqueeze(0) for embedding in embeddings],",
            "dim=0",
            ")"
        ]
    },
    {
        "number": 9131,
        "comments": "",
        "commit_message": "bugfixe in baseline and other places\n\n",
        "label": "",
        "answer": "no",
        "change": [
            "class TestTutorialCode(unittest.TestCase):",
            "batch_size=8,",
            "first_update=100,",
            "target_sync_frequency=50,",
            "-            preprocessing=preprocessing",
            "+            states_preprocessing_spec=states_preprocessing_spec",
            ")",
            "",
            "agent.close()"
        ]
    },
    {
        "number": 9132,
        "comments": "",
        "commit_message": "Fix Windows UT (#3065)\n\n\n",
        "label": "",
        "answer": "no",
        "change": [
            "class SpeedupTestCase(TestCase):",
            "net.load_state_dict(state_dict)",
            "net.eval()",
            "",
            "-        data = torch.randn(BATCH_SIZE, 3, 224, 224).to(device)",
            "+        data = torch.randn(BATCH_SIZE, 3, 128, 128).to(device)",
            "ms = ModelSpeedup(net, data, MASK_FILE)",
            "ms.speedup_model()",
            "ms.bound_model(data)"
        ]
    },
    {
        "number": 9134,
        "comments": "",
        "commit_message": "Fixes #100: do not train keep probability in dropout op\n\n",
        "label": "",
        "answer": "yes",
        "change": [
            "def dropout(tensor_in, prob, name=None):",
            "with tf.op_scope([tensor_in], name, \"dropout\") as name:",
            "if isinstance(prob, float):",
            "prob = tf.get_variable(\"prob\", [],",
            "-                                   initializer=tf.constant_initializer(prob))",
            "+                                   initializer=tf.constant_initializer(prob),",
            "+                                   trainable=False)",
            "tf.add_to_collection(DROPOUTS, prob)",
            "return tf.nn.dropout(tensor_in, prob)"
        ]
    },
    {
        "number": 9135,
        "comments": "",
        "commit_message": "fix pooling bugs across a few new archs\n\n",
        "label": "",
        "answer": "no",
        "change": [
            "class PiT(nn.Module):",
            "x += self.pos_embedding",
            "x = self.dropout(x)",
            "",
            "-        return self.layers(x)",
            "+        x = self.layers(x)",
            "+",
            "+        return self.mlp_head(x[:, 0])"
        ]
    },
    {
        "number": 9139,
        "comments": "",
        "commit_message": "Refactor category orders in heads (#2374)\n\n* Refactor (all): all category -1 in anchor/bbox head and anchor/bbox target assign\n\n* Fix (datasets): remove label + 1 in datasets\n\n* Fix (bbox_head): fix bug of fc_cls that forget + 1\n\n* Fix (atss_head & free_anchor): fix cat -1 bugs\n\n* Fix (mask_head): remove label + 1 in mask heads\n\n* fix atss\n\n* Fix (rpn): fix cross_entropy_loss bug of RPN\n\n* Fix (anchor_head): fix typo\n\n* Refactor (anchor_head): use background_label rather than num_classes to indicate background class\n\n* Refactor (docstring): add and reformat docstrings\n\n* fix mask iou head\n\n* Fix (mask_head): fix cat -1 bug\n\n* Fix (mask_head): fix bug in mask inference\n\n* Add (tests): add tests for mask rcnn and mask heads\n\n* Refactor (unittest): refactor test_forward\n\n* Refactor (new_empty): use new_full rather than new_empty\n\n* Refactor (background_label): check background_label\n\n* Add TODO\n\n* Refactor (unittest): allow BP in unittest\n\nCo-authored-by: Cao Yuhang <yhcao6@gmail.com>\n",
        "label": "",
        "answer": "no",
        "change": [
            "class ConvFCBBoxHead(BBoxHead):",
            "self.relu = nn.ReLU(inplace=True)",
            "# reconstruct fc_cls and fc_reg since input channels are changed",
            "if self.with_cls:",
            "-            self.fc_cls = nn.Linear(self.cls_last_dim, self.num_classes)",
            "+            self.fc_cls = nn.Linear(self.cls_last_dim, self.num_classes + 1)",
            "if self.with_reg:",
            "out_dim_reg = (4 if self.reg_class_agnostic else 4 *",
            "self.num_classes)"
        ]
    },
    {
        "number": 9141,
        "comments": "",
        "commit_message": "Add Pre-commit bot fixes (#3722)\n\n* flake8\n\n* flake8\n\n* [pre-commit.ci] auto fixes from pre-commit.com hooks\n\nfor more information, see https://pre-commit.ci\n\n* fix\n\nCo-authored-by: pre-commit-ci[bot] <66853113+pre-commit-ci[bot]@users.noreply.github.com>\n",
        "label": "",
        "answer": "no",
        "change": [
            "def test_point_pair_features():",
            "assert data.pos.tolist() == pos.tolist()",
            "assert data.norm.tolist() == norm.tolist()",
            "assert data.edge_index.tolist() == edge_index.tolist()",
            "-    assert torch.allclose(",
            "-        data.edge_attr,",
            "-        torch.Tensor([[1, 1, 0, 0, 0], [1, 1, PI, PI, 0]]),",
            "-        atol=1e-04)",
            "+    assert torch.allclose(data.edge_attr,",
            "+                          torch.Tensor([[1, 1, 0, 0, 0], [1, 1, PI, PI, 0]]),",
            "+                          atol=1e-04)"
        ]
    },
    {
        "number": 9144,
        "comments": "",
        "commit_message": "formatting fixes for Array API submodule in Torch backend.\n\n",
        "label": "",
        "answer": "no",
        "change": [
            "# global",
            "import torch",
            "-from typing import Union, Optional, Tuple, List",
            "",
            "",
            "def argsort(x: torch.Tensor,",
            "axis: int = -1,",
            "descending: bool = False,",
            "stable: bool = True)\\",
            "-            -> torch.Tensor:",
            "+        -> torch.Tensor:",
            "return torch.argsort(x, dim=axis, descending=descending)"
        ]
    },
    {
        "number": 9145,
        "comments": "",
        "commit_message": "group tensorboard and fix name checkpoint\n\n",
        "label": "",
        "answer": "no",
        "change": [
            "class GanBasedTrainer(metaclass=abc.ABCMeta):",
            "\"\"\"Write variables to tensorboard.\"\"\"",
            "with self.writer.as_default():",
            "for key, value in list_metrics.items():",
            "-                tf.summary.scalar(stage + \"_\" + key, value.result(), step=self.steps)",
            "+                tf.summary.scalar(stage + \"/\" + key, value.result(), step=self.steps)",
            "self.writer.flush()"
        ]
    },
    {
        "number": 9147,
        "comments": "",
        "commit_message": "Fix `SpeechT5ForSpeechToSpeechIntegrationTests` device issue (#21460)\n\n* fix\n\n---------\n\nCo-authored-by: ydshieh <ydshieh@users.noreply.github.com>\n",
        "label": "",
        "answer": "no",
        "change": [
            "class SpeechT5ForSpeechToSpeechIntegrationTests(unittest.TestCase):",
            "input_speech = self._load_datasamples(1)",
            "input_values = processor(audio=input_speech, return_tensors=\"pt\").input_values.to(torch_device)",
            "",
            "-        speaker_embeddings = torch.zeros((1, 512))",
            "+        speaker_embeddings = torch.zeros((1, 512), device=torch_device)",
            "generated_speech = model.generate_speech(input_values, speaker_embeddings=speaker_embeddings)",
            "",
            "self.assertEqual(generated_speech.shape[1], model.config.num_mel_bins)"
        ]
    },
    {
        "number": 9149,
        "comments": "",
        "commit_message": "Fuse_modules in a qat-respecting way (#12891)\n\n* Fuse_modules in a qat-respecting way\n\n* Add compatibility for PyTorch <1.11\n\nIn older pytorch versions, `fuse_modules` used the `Module.training`\nflag to determine wheter fusion should be QAT-compliant or not, refer\nhttps://github.com/pytorch/pytorch/releases/tag/v1.11.0\n\n* Add CHANGELOG for pull #12891\n\n* Fix conditional import of fuse_modules_qat\n\n`torch.ao.quantization.fuse_modules_qat` was actually added in\ntorch 1.11.\n\n* Update CHANGELOG.md\n\nCo-authored-by: Akihiro Nitta <nitta@akihironitta.com>\n",
        "label": "",
        "answer": "no",
        "change": [
            "class QuantizationAwareTraining(Callback):",
            "model.qconfig = self._qconfig",
            "",
            "if self._check_feasible_fuse(model):",
            "-            torch.quantization.fuse_modules(model, self._modules_to_fuse, inplace=True)",
            "+            fuse_modules(model, self._modules_to_fuse, inplace=True)",
            "",
            "# Prepare the model for QAT. This inserts observers and fake_quants in",
            "# the model that will observe weight and activation tensors during calibration."
        ]
    },
    {
        "number": 9153,
        "comments": "",
        "commit_message": "Refactor library namespaces [pre-release][0.6-rc1] (#1412)\n\n* flake fixes\n\n* initial flake8 fixeS\n\n* remove top level from kornia.color\n\n* kornia filters\n\n* kornia losses\n\n* kornia features\n\n* geomtry and all ok\n\n* removed jit module\n\n* [pre-commit.ci] auto fixes from pre-commit.com hooks\n\nfor more information, see https://pre-commit.ci\n\n* apply formatting and few fixes\n\n* [pre-commit.ci] auto fixes from pre-commit.com hooks\n\nfor more information, see https://pre-commit.ci\n\n* add keep block for isort\n\n* [pre-commit.ci] auto fixes from pre-commit.com hooks\n\nfor more information, see https://pre-commit.ci\n\n* skip init\n\n* fix the docs\n\n* [pre-commit.ci] auto fixes from pre-commit.com hooks\n\nfor more information, see https://pre-commit.ci\n\n* remove old code\n\n* simplify ci workflow\n\n* fix circular dependency\n\n* few format fixes\n\n* fix code format test\n\n* remove kornia.jit imports\n\n* final fixes\n\n* [pre-commit.ci] auto fixes from pre-commit.com hooks\n\nfor more information, see https://pre-commit.ci\n\n* ci fixes\n\n* add versioneer\n\n* fix pnp import\n\n* [pre-commit.ci] auto fixes from pre-commit.com hooks\n\nfor more information, see https://pre-commit.ci\n\n* exclude version files from pre-commit\n\n* exclude files precommit\n\n* update to pytorch 1.10 and add fixes\n\n* Update tests_cpu.yml\n\n* Update setup_dev_env.sh\n\n* Update tests_cpu.yml\n\n* undo versioneer\n\n* [pre-commit.ci] auto fixes from pre-commit.com hooks\n\nfor more information, see https://pre-commit.ci\n\n* fix no_grad\n\n* Apply suggestions from code review\n\n* fix skip windows tests\n\n* [pre-commit.ci] auto fixes from pre-commit.com hooks\n\nfor more information, see https://pre-commit.ci\n\n* Update test_integrated.py\n\n* Apply suggestions from code review\n\nCo-authored-by: pre-commit-ci[bot] <66853113+pre-commit-ci[bot]@users.noreply.github.com>\n",
        "label": "",
        "answer": "no",
        "change": [
            "def triangulate_points(",
            "_, _, V = torch.svd(X)",
            "",
            "points3d_h = V[..., -1]",
            "-    points3d: torch.Tensor = kornia.convert_points_from_homogeneous(points3d_h)",
            "+    points3d: torch.Tensor = convert_points_from_homogeneous(points3d_h)",
            "return points3d"
        ]
    },
    {
        "number": 9155,
        "comments": "",
        "commit_message": "PoC: Accelerator refactor (#5743)\n\n* restoring the result from subprocess\n\n* fix queue.get() order for results\n\n* add missing \"block_backward_sync\" context manager\n\n* add missing \"block_backward_sync\" context manager\n\n* fix sync_batchnorm\n\n* fix supported gpu-ids for tuple\n\n* fix clip gradients and inf recursion\n\n* accelerator selection: added cluster_environment plugin\n\n* fix torchelastic test\n\n* fix reduce early stopping decision for DDP\n\n* fix tests: callbacks, conversion to lightning optimizer\n\n* fix lightning optimizer does not pickle\n\n* fix setting benchmark and deterministic option\n\n* fix slurm amp test\n\n* fix prepare_data test and determine node_rank\n\n* fix retrieving last path when testing\n\n* remove obsolete plugin argument\n\n* fix test: test_trainer_config\n\n* fix torchscript tests\n\n* fix trainer.model access\n\n* move properties\n\n* fix test_transfer_batch_hook\n\n* fix auto_select_gpus\n\n* fix omegaconf test\n\n* fix test that needs to simulate slurm ddp\n\n* add horovod plugin\n\n* fix test with named arguments\n\n* clean up whitespace\n\n* fix datamodules test\n\n* remove old accelerators\n\n* fix naming\n\n* move old plugins\n\n* move to plugins\n\n* create precision subpackage\n\n* create training_type subpackage\n\n* fix all new import errors\n\n* fix wrong arguments order passed to test\n\n* fix LR finder\n\n* Added sharded training type and amp plugin\n\n* Move clip grad to precision plugin\n\n* Added sharded spawn, select accelerators based on distributed_backend + enable custom fp16 plugin automatically\n\n* Fix import issue, attempting to fix tests\n\n* Fix initial test\n\n* Reflect hook logic from master, should wrap model after move to device\n\n* Optional state consolidation, since master has optimizers not wrapped\n\n* change attribute for instance test\n\n* reset optimizers\n\noptimizers are not used in main process, so state would be wrong.\n\n* legacy\n\n* imports in accel\n\n* legacy2\n\n* trainer imports\n\n* fix import errors after rebase\n\n* move hook to new setup location\n\n* provide unwrapping logic\n\n* fix trainer callback system\n\n* added ddp2 implementation\n\n* fix imports .legacy\n\n* move plugins\n\n* restore legacy\n\n* drop test.py from root\n\n* add tpu accelerator and plugins\n\n* fixes\n\n* fix lightning optimizer merge\n\n* reset bugreportmodel\n\n* unwrapping\n\n* step routing forward\n\n* model access\n\n* unwrap\n\n* opt\n\n* integrate distrib_type\n\n* sync changes\n\n* sync\n\n* fixes\n\n* add forgotten generators\n\n* add missing logic\n\n* update\n\n* import\n\n* missed imports\n\n* import fixes\n\n* isort\n\n* mv f\n\n* changelog\n\n* format\n\n* move helper to parallel plugin\n\n* d\n\n* add world size\n\n* clean up\n\n* duplicate\n\n* activate ddp_sharded and tpu\n\n* set nvidia flags\n\n* remove unused colab var\n\n* use_tpu <-> on_tpu attrs\n\n* make some ddp_cpu and clusterplugin tests pass\n\n* Ref/accelerator connector (#5742)\n\n* final cleanup\n\nCo-authored-by: Adrian W\u00e4lchli <aedu.waelchli@gmail.com>\n\n* connector cleanup\n\nCo-authored-by: Adrian W\u00e4lchli <aedu.waelchli@gmail.com>\n\n* trainer cleanup\n\nCo-authored-by: Adrian W\u00e4lchli <aedu.waelchli@gmail.com>\n\n* accelerator cleanup + missing logic in accelerator connector\n\nCo-authored-by: Adrian W\u00e4lchli <aedu.waelchli@gmail.com>\n\n* add missing changes to callbacks\n\nCo-authored-by: Adrian W\u00e4lchli <aedu.waelchli@gmail.com>\n\n* reflect accelerator changes to lightning module\n\nCo-authored-by: Adrian W\u00e4lchli <aedu.waelchli@gmail.com>\n\n* clean cluster envs\n\nCo-authored-by: Adrian W\u00e4lchli <aedu.waelchli@gmail.com>\n\n* cleanup plugins\n\nCo-authored-by: Adrian W\u00e4lchli <aedu.waelchli@gmail.com>\n\n* add broadcasting\n\nCo-authored-by: Adrian W\u00e4lchli <aedu.waelchli@gmail.com>\n\n* yapf\n\n* remove plugin connector\n\nCo-authored-by: Adrian W\u00e4lchli <aedu.waelchli@gmail.com>\n\n* plugins\n\n* manual optimization\n\n* update optimizer routing\n\n* add rank to torchelastic\n\n* fix memory mixed precision\n\n* setstate on trainer for pickling in ddp spawn\n\n* add predict method\n\n* add back commented accelerator code\n\n* adapt test for sync_batch_norm to new plugin\n\n* fix deprecated tests\n\n* fix ddp cpu choice when no num_processes are given\n\n* yapf format\n\n* skip a memory test that cannot pass anymore\n\n* fix pickle error in spawn plugin\n\n* x\n\n* avoid\n\n* x\n\n* fix cyclic import in docs build\n\n* add support for sharded\n\n* update typing\n\n* add sharded and sharded_spawn to distributed types\n\n* make unwrap model default\n\n* refactor LightningShardedDataParallel similar to LightningDistributedDataParallel\n\n* update sharded spawn to reflect changes\n\n* update sharded to reflect changes\n\n* Merge 1.1.5 changes\n\n* fix merge\n\n* fix merge\n\n* yapf isort\n\n* fix merge\n\n* yapf isort\n\n* fix indentation in test\n\n* copy over reinit scheduler implementation from dev1.2\n\n* fix apex tracking calls with dev_debugger\n\n* reduce diff to dev1.2, clean up\n\n* fix trainer config test  when gpus>0 and num_processes >0 and ddp_cpu\n\n* sort plugin tests legacy/new\n\n* fix error handling for amp on cpu\n\n* fix merge\n\n\nfix merge\n\n\nfix merge\n\n* [Feat] Resolve manual_backward (#5837)\n\n* resolve manual_backward\n\n* resolve flake8\n\n* update\n\n* resolve for ddp_spawn\n\n* resolve flake8\n\n* resolve flake8\n\n* resolve flake8\n\nCo-authored-by: Ubuntu <ubuntu@ip-172-31-88-60.ec2.internal>\n\n* fix tests/accelerator tests on cpu\n\n* [BugFix] Resolve manual optimization (#5852)\n\n* resolve manual_optimization\n\n* update\n\n* update\n\nCo-authored-by: Ubuntu <ubuntu@ip-172-31-88-60.ec2.internal>\n\n* Remove copy trainer parameters to happen earlier within the loop and add safe guard to get ref model (#5856)\n\n* resovle a bug\n\n* Accelerator refactor sharded rpc (#5854)\n\n* rpc branch\n\n* merge\n\n* update handling of rpc\n\n* make devices etc. Optional in RPC\n\n* set devices etc. later if necessary\n\n* remove devices from sequential\n\n* make devices optional in rpc\n\n* fix import\n\n* uncomment everything\n\n* fix cluster selection\n\nCo-authored-by: Ubuntu <ubuntu@ip-172-31-88-60.ec2.internal>\n\n* resolve bug\n\n* fix assert in rpc test\n\n* resolve a test\n\n* fix docs compilation\n\n* accelerator refactor - fix for sharded parity test (#5866)\n\n* fix memory issue with ddp_spawn\n\n* x\n\n\nx\n\n\nx\n\n\nx\n\n\nx\n\n\nx\n\n\nx\n\n\nx\n\n\nx\n\n* x\n\n* Remove DDP2 as this does not apply\n\n* Add missing pre optimizer hook to ensure lambda closure is called\n\n* fix apex docstring\n\n* [accelerator][BugFix] Resolve some test for 1 gpu (#5863)\n\n* update\n\n* revert init\n\n* resolve a bug\n\n* update\n\n* resolve flake8\n\n* update\n\n* update\n\n* update\n\n* revert init\n\n* resolve a bug\n\n* update\n\n* resolve flake8\n\n* update\n\n* update\n\n* update\n\n* update\n\n* update\n\n* revert init\n\n* resolve a bug\n\n* update\n\n* resolve flake8\n\n* update\n\n* update\n\n* update\n\n* revert init\n\n* update\n\n* resolve flake8\n\n* update\n\n* update\n\n* update\n\n* update\n\n* update\n\n* all_gather\n\n* update\n\n* make plugins work, add misconfig for RPC\n\n* update\n\n* update\n\n* remove breaking test\n\n* resolve some tests\n\n* resolve flake8\n\n* revert to ddp_spawn\n\nCo-authored-by: root <root@ip-172-31-88-60.ec2.internal>\nCo-authored-by: Ubuntu <ubuntu@ip-172-31-88-60.ec2.internal>\nCo-authored-by: Justus Schock <justus.schock@rwth-aachen.de>\n\n* yapf isort\n\n* resolve flake8\n\n* fix apex doctests\n\n* fix apex doctests 2\n\n* resolve docs\n\n* update drone\n\n* clean env\n\n* update\n\n* update\n\n* update\n\n* update\n\n* merge\n\n* Fix RPC related tests, clean out old API, update for new accelerator API [skip ci] (#5881)\n\n* Fix RPC related tests, clean out old API, update for new accelerator API\n\n* Move tests out of legacy folder, update paths and names\n\n* Update test_remove_1-4.py\n\n* Expose properties for tpu cores/gpus/num_gpus\n\n* Add root GPU property\n\n* Move properties to properties.py\n\n* move tests that were previously in drone\n\n* Fix root GPU property (#5908)\n\n* Move root GPU to property, remove horovod set as this is handled in horovod plugin, ensure we mock correctly to set GPU accelerator\n\n* Add missing tests back\n\n* fix best model path transfer when no checkpoint callback available\n\n* Fix setup hook order [wip] (#5858)\n\n* Call trainer setup hook before accelerator setup\n\n* Add test case\n\n* add new test\n\n* typo\n\n* fix callback order in test\n\nCo-authored-by: tchaton <thomas@grid.ai>\nCo-authored-by: Adrian W\u00e4lchli <aedu.waelchli@gmail.com>\n\n* rename ddp sequential -> rpc sequential for special test\n\n* revert\n\n* fix stupid merge problem\n\n* Use property in connector for sampler (#5913)\n\n* merge the import conflicts\n\n* fix spawning of processes in slurm\n\n* [wip] Fix some bugs for TPU [skip ci] (#5878)\n\n* fixed for single tpu\n\n* fixed spawn\n\n* fixed spawn\n\n* update\n\n* update\n\n* wip\n\n* resolve bugs\n\n* resolve bug\n\n* update on comment\n\n* removed decorator\n\n* resolve comments\n\n* set to 4\n\n* update\n\n* update\n\n* need cleaning\n\n* update\n\n* update\n\n* update\n\n* resolve flake8\n\n* resolve bugs\n\n* exclude broadcast\n\n* resolve bugs\n\n* change test\n\n* update\n\n* update\n\n* skip if meet fails\n\n* properly raise trace\n\n* update\n\n* add catch\n\n* wrap test\n\n* resolve typo\n\n* update\n\n* typo\n\nCo-authored-by: Lezwon Castelino <lezwon@gmail.com>\nCo-authored-by: Your Name <you@example.com>\n\n* resolve some tests\n\n* update\n\n* fix imports\n\n* update\n\n* resolve flake8\n\n* update azure pipeline\n\n* skip a sharded test on cpu that requires a gpu\n\n* resolve tpus\n\n* resolve bug\n\n* resolve flake8\n\n* update\n\n* updat utils\n\n* revert permission change on files\n\n* suggestions from carlos\n\nCo-authored-by: Carlos Mochol\u00ed <carlossmocholi@gmail.com>\n\n* remove unrelated formatting changes\n\n* remove incomplete comment\n\n* Update pytorch_lightning/accelerators/__init__.py\n\nCo-authored-by: Carlos Mochol\u00ed <carlossmocholi@gmail.com>\n\n* remove unrelated formatting change\n\n* add types\n\n* warn 1.7 ddp manual backward only if ddp kwarg unset\n\n* yapf + isort\n\n* pep8 unused imports\n\n* fix cyclic import in docs\n\n* Apply suggestions from code review\n\n* typer in accelerator.py\n\n* typo\n\n* Apply suggestions from code review\n\n* formatting\n\n* update on comments\n\n* update typo\n\n* Update pytorch_lightning/trainer/properties.py\n\nCo-authored-by: Adrian W\u00e4lchli <aedu.waelchli@gmail.com>\n\n* update\n\n* suggestion from code review\n\n* suggestion from code review\n\nCo-authored-by: Adrian W\u00e4lchli <aedu.waelchli@gmail.com>\nCo-authored-by: SeanNaren <sean@grid.ai>\nCo-authored-by: Jirka Borovec <jirka.borovec@seznam.cz>\nCo-authored-by: chaton <thomas@grid.ai>\nCo-authored-by: Ubuntu <ubuntu@ip-172-31-88-60.ec2.internal>\nCo-authored-by: Sean Naren <sean.narenthiran@gmail.com>\nCo-authored-by: root <root@ip-172-31-88-60.ec2.internal>\nCo-authored-by: Lezwon Castelino <lezwon@gmail.com>\nCo-authored-by: Your Name <you@example.com>\nCo-authored-by: Carlos Mochol\u00ed <carlossmocholi@gmail.com>\nCo-authored-by: Jirka Borovec <Borda@users.noreply.github.com>\nCo-authored-by: mergify[bot] <37929162+mergify[bot]@users.noreply.github.com>\n",
        "label": "",
        "answer": "no",
        "change": [
            "class TrainerDataLoadingMixin(ABC):",
            "dataloader = self._flatten_dl_only(dataloader)",
            "",
            "if self.accelerator_backend is not None:",
            "-            self.accelerator_backend.barrier('get_dataloaders')",
            "+            self.training_type_plugin.barrier('get_dataloaders')",
            "return dataloader",
            "",
            "def _flatten_dl_only(self, dataloaders):"
        ]
    },
    {
        "number": 9156,
        "comments": "",
        "commit_message": "feat: add fp16 inference support (torch/onnx) (#871)\n\n* feat: add fp16 inference in clip_torch\n\n* Revert \"feat: add fp16 inference in clip_torch\"\n\nThis reverts commit 326e2655f423a67a5d6ea5c28eed8d81da037df0.\n\n* feat: add fp16 inference in clip_torch\n\n* fix: device\n\n* fix: str to torch.dtype\n\n* fix: layernorm\n\n* feat: add fp16 inference in clip_trt\n\n* feat: add fp16 inference in clip_onnx\n\n* fix: housekeeping\n\n* fix: ci\n\n* fix: ci\n\n* fix: ci\n\n* fix: ci and get test path\n\n* fix: dtype amp and gpu test dependency\n\n* fix: layernorm\n\n* fix: cast dtype in visiontransformer\n\n* fix: clip_onnx\n\n* fix: clip_onnx\n\n* fix: convert onnx to fp16\n\n* fix: dtype in preproc images\n\n* fix: dtype in preproc images\n\n* fix: typo\n\n* fix: dtype in clip_torch and fp16 in trt\n\n* fix: remove plain text in trt_test\n\n* fix: test\n\n* fix: typo\n\n* fix: stash\n\n* Revert \"fix: stash\"\n\nThis reverts commit f72fd99f4333443e998edbf4be352fe81557f611.\n\n* fix: for test\n\n* fix: onnx\n\n* fix: for test\n\n* fix: for test\n\n* fix: trt\n\n* fix: convert onnx to fp16 before convert trt\n\n* fix: discard changes in trt\n\n* fix: optimize fp16 test\n\n* fix: move __cast_dtype__\n\n* Revert \"fix: move __cast_dtype__\"\n\nThis reverts commit edf46292f144aee1150cd1f16565a2236a5ce5fe.\n\n* fix: ci\n",
        "label": "",
        "answer": "no",
        "change": [
            "def preproc_image(",
            "if drop_image_content:",
            "d.pop('blob', 'tensor')",
            "",
            "-    tensors_batch = torch.stack(tensors_batch).type(torch.float32)",
            "+    tensors_batch = torch.stack(tensors_batch).type(dtype)",
            "",
            "if return_np:",
            "tensors_batch = tensors_batch.cpu().numpy()"
        ]
    },
    {
        "number": 9163,
        "comments": "",
        "commit_message": "Should be fixed finally\n\n",
        "label": "",
        "answer": "no",
        "change": [
            "def main():",
            "# train",
            "logging.info('backend = ' + args.backend)",
            "if args.backend == \"chainer\":",
            "-        from espnet.lmchainer.lm_chainer import train",
            "+        from espnet.lm.chainer.lm_chainer import train",
            "train(args)",
            "elif args.backend == \"pytorch\":",
            "-        from espnet.lmpytorch.lm_pytorch import train",
            "+        from espnet.lm.pytorch.lm_pytorch import train",
            "train(args)",
            "else:",
            "raise ValueError(\"Only chainer and pytorch are supported.\")"
        ]
    },
    {
        "number": 9165,
        "comments": "",
        "commit_message": "fix get cuda device test error\n\nSummary:\nCuda test failing on circle with the error `random_ expects 'from' to be less than 'to', but got from=0 >= to=0`\n\nThis is because the `high` value in `torch.randint` is 1 more than the highest value in the distribution from which a value is drawn. So if there is only 1 cuda device available then the low and high are 0.\n\nReviewed By: gkioxari\n\nDifferential Revision: D21236669\n\nfbshipit-source-id: 46c312d431c474f1f2c50747b1d5e7afbd7df3a9\n\n",
        "label": "",
        "answer": "no",
        "change": [
            "def get_random_cuda_device() -> str:",
            "any device without having to set the device explicitly.",
            "\"\"\"",
            "num_devices = torch.cuda.device_count()",
            "-    rand_device_id = torch.randint(high=num_devices, size=(1,)).item()",
            "-    return \"cuda:%d\" % rand_device_id",
            "+    device_id = (",
            "+        torch.randint(high=num_devices, size=(1,)).item() if num_devices > 1 else 0",
            "+    )",
            "+    return \"cuda:%d\" % device_id",
            "",
            "",
            "class TestCaseMixin(unittest.TestCase):"
        ]
    },
    {
        "number": 9171,
        "comments": "",
        "commit_message": "fixed loading\n\n",
        "label": "",
        "answer": "no",
        "change": [
            "def torch_resume(snapshot_path, trainer):",
            "# retore optimizer states",
            "trainer.updater.get_optimizer('main').load_state_dict(snapshot_dict['optimizer'])",
            "",
            "-    return trainer",
            "+    # delete opened snapshot",
            "+    del snapshot_dict"
        ]
    },
    {
        "number": 9177,
        "comments": "",
        "commit_message": "fixed ornstein-uhlenbeck exploration variable; pass action_spec instead of action_shape to tf_exploration\n\n",
        "label": "",
        "answer": "no",
        "change": [
            "class OrnsteinUhlenbeckProcess(Exploration):",
            "",
            "super(OrnsteinUhlenbeckProcess, self).__init__(scope=scope, summary_labels=summary_labels)",
            "",
            "-    def tf_explore(self, episode, timestep, action_shape):",
            "-        normal_sample = tf.random_normal(shape=action_shape.shape, mean=0.0, stddev=1.0)",
            "+    def tf_explore(self, episode, timestep, action_spec):",
            "+        normal_sample = tf.random_normal(shape=action_spec['shape'], mean=0.0, stddev=1.0)",
            "state = tf.get_variable(",
            "name='ornstein_uhlenbeck',",
            "dtype=util.tf_dtype('float'),",
            "-            shape=action_shape.shape,",
            "+            shape=action_spec['shape'],",
            "initializer=tf.constant_initializer(self.mu)",
            ")",
            "return tf.assign_add(ref=state, value=(self.theta * (self.mu - state) + self.sigma * normal_sample))"
        ]
    },
    {
        "number": 9178,
        "comments": "",
        "commit_message": "Fix inference benchmark (#5341)\n\n* update\n\n* changelog\n\n* update\n\n* update\n",
        "label": "",
        "answer": "no",
        "change": [
            "class BasicGNN(torch.nn.Module):",
            "pbar.set_description('Inference')",
            "",
            "x_all = loader.data.x.cpu()",
            "-        x_all = x_all.to(dtype)",
            "loader.data.n_id = torch.arange(x_all.size(0))",
            "",
            "for i in range(self.num_layers):"
        ]
    },
    {
        "number": 9184,
        "comments": "",
        "commit_message": "bug fix for predict on multi modal data (#1452)\n\n\n",
        "label": "",
        "answer": "no",
        "change": [
            "class AutoModel(object):",
            "pipeline = self.tuner.get_best_pipeline()",
            "model = self.tuner.get_best_model()",
            "dataset = pipeline.transform_x(dataset)",
            "+        dataset = tf.data.Dataset.zip((dataset, dataset))",
            "y = model.predict(dataset, **kwargs)",
            "y = utils.predict_with_adaptive_batch_size(",
            "model=model, batch_size=batch_size, x=dataset, **kwargs"
        ]
    },
    {
        "number": 9185,
        "comments": "",
        "commit_message": "Fix TF bad words filter with XLA (#18286)\n\n* Fix bad words filter in XLA generation\n\n* Remove my cool debug breakpoints (again)\n",
        "label": "",
        "answer": "no",
        "change": [
            "class TFNoBadWordsLogitsProcessor(TFLogitsProcessor):",
            "def _len_greater_than_cur_len():",
            "# Otherwise, if the bad sequence is longer than the current length they can't ever match",
            "return tf.cond(",
            "-                    tf.math.greater(self.bad_word_seqs_len[bad_word_seq_number], row_input_ids.shape[0]),",
            "+                    tf.math.greater(self.bad_word_seqs_len[bad_word_seq_number], tf.shape(row_input_ids)[0]),",
            "lambda: tf.zeros((), dtype=tf.bool),",
            "_match_found,",
            ")"
        ]
    },
    {
        "number": 9188,
        "comments": "",
        "commit_message": "Option to provide seed to random generators to ensure reproducibility (#1572)\n\n* Option to provide seed to random generators to ensure reproducibility\n\nI added small function in utilities which imports torch, numpy, python\nrandom and sets seed for all of the libraries to ensure reproducibility\nof results.\n\n* Apply recommendations from core contributors on seeding\n\n1. Moved the seeding code to another file\n2. Make deterministic as a parameter for trainer class\n3. Add assertions for seeding numpy\n4. Added warnings\n5. torch.manual_seed should be enough for seeding torch\n\n* Revert \"Apply recommendations from core contributors on seeding\"\n\nThis reverts commit a213c8e6882eec8a9e7408b9418926d2db7c5461.\n\n* Revert \"Revert \"Apply recommendations from core contributors on seeding\"\"\n\nThis reverts commit 59b2da53c62878de7aab0aa3feb3115e105eea06.\n\n* Change in test, for correct seeding\n\n* Allow seed equal to 0\n\n* Allow seed to be uint32.max\n\n* Added deterministic to benchmarks\n\n* Cuda manual seed as in benchmark seeding\n\n* Seeding should be done before model initialization\n\n* cuda manual_seed is not necessary\n\n* Fixing seed test_cpu_lbfgs\n\nOn some seeds seems like lbfgs doesn't converge.\nSo I fixed the seed during testing.\n\n* rebasing issue with old reproducibility.py\n\n* Improved documentation and ability to seed before initializing Train\nclass\n\n* Change in docs\n\n* Removed seed from trainer, update for documentation\n\n* Typo in the docs\n\n* Added seed_everything to _all_\n\n* Fixing old changes\n\n* Model initialization should be earlier then Trainer\n\n* Update pytorch_lightning/trainer/__init__.py\n\nFrom Example to testcode\n\nCo-authored-by: Jirka Borovec <Borda@users.noreply.github.com>\n\n* Fixing according to the contributors suggestions\n\n* Moving horovod deterministic to Trainer class\n\n* deterministic flag affects horovod docs update\n\n* Improved static typing\n\n* Added deterministic to test runners of horovod\n\nIt is failing on some versions, not very predictable\n\n* static seeds for horovod tests\n\n* Change for reset_seed function in tests\n\n* Seeding horovod using reset_seed from tutils\n\n* Update pytorch_lightning/trainer/__init__.py\n\n* chlog\n\n* Update trainer.py\n\n* change \"testcode\" to \"Example\" in trainer init documentation\n\n* Update pytorch_lightning/trainer/seed.py, first line in comment\n\nCo-authored-by: Jirka Borovec <Borda@users.noreply.github.com>\n\nCo-authored-by: Jirka Borovec <Borda@users.noreply.github.com>\nCo-authored-by: Jirka <jirka.borovec@seznam.cz>\nCo-authored-by: William Falcon <waf2107@columbia.edu>\n",
        "label": "",
        "answer": "no",
        "change": [
            "def assert_ok_model_acc(trainer, key='test_acc', thr=0.5):",
            "",
            "def reset_seed():",
            "seed = RANDOM_SEEDS.pop()",
            "-    torch.manual_seed(seed)",
            "-    np.random.seed(seed)",
            "+    seed_everything(seed)",
            "",
            "",
            "def set_random_master_port():"
        ]
    },
    {
        "number": 9189,
        "comments": "",
        "commit_message": "[rllib] Fix APPO + continuous spaces, feed prev_rew/act to A3C properly (#4286)\n\n\n",
        "label": "",
        "answer": "no",
        "change": [
            "class AsyncPPOPolicyGraph(LearningRateSchedule, TFPolicyGraph):",
            "existing_state_in = existing_inputs[9:-1]",
            "existing_seq_lens = existing_inputs[-1]",
            "else:",
            "-            actions = tf.placeholder(tf.int64, actions_shape, name=\"ac\")",
            "+            actions = ModelCatalog.get_action_placeholder(action_space)",
            "dones = tf.placeholder(tf.bool, [None], name=\"dones\")",
            "rewards = tf.placeholder(tf.float32, [None], name=\"rewards\")",
            "behaviour_logits = tf.placeholder("
        ]
    },
    {
        "number": 9190,
        "comments": "",
        "commit_message": "Fixes to enable dev branch to move to pytorch-1.2 (#2001)\n\n* Fixes to enable dev branch to move to pytorch-1.2\n\n* change name for published cpu wheels\n\n* fix failing unit tests\n\n* change docs conf\n\n* change tracking example\n\n",
        "label": "",
        "answer": "no",
        "change": [
            "def test_mask_invalid_shape(batch_shape, mask_shape):",
            "",
            "",
            "def test_kl_divergence():",
            "-    mask = torch.tensor([[0, 1], [1, 1]]).byte()",
            "+    mask = torch.tensor([[0, 1], [1, 1]]).bool()",
            "p = Normal(torch.randn(2, 2), torch.randn(2, 2).exp())",
            "q = Normal(torch.randn(2, 2), torch.randn(2, 2).exp())",
            "expected = kl_divergence(p.to_event(2), q.to_event(2))"
        ]
    },
    {
        "number": 9191,
        "comments": "",
        "commit_message": "fix average emb inp for py3 / update imdb fast text example for TF 1.1\n\n",
        "label": "",
        "answer": "no",
        "change": [
            "class FastTextClassifier(object):",
            "self.prediction_probs = tf.nn.softmax(self.network.outputs)",
            "self.predictions = tf.argmax(",
            "self.network.outputs, axis=1, output_type=tf.int32)",
            "+        # self.predictions = tf.cast(tf.argmax(             # for TF < 1.2",
            "+        #     self.network.outputs, axis=1), tf.int32)",
            "",
            "# Evaluation",
            "are_predictions_correct = tf.equal(self.predictions, self.labels)"
        ]
    },
    {
        "number": 9197,
        "comments": "",
        "commit_message": "Fix variable naming\n\n",
        "label": "",
        "answer": "yes",
        "change": [
            "class Seq2SeqModel(ModelBase):",
            "if \"embedding\" in variable.name:",
            "tmp = tf.clip_by_norm(",
            "gradient.values, self.params[\"optimizer.clip_embed_gradients\"])",
            "-        grad = tf.IndexedSlices(tmp, gradient.indices, gradient.dense_shape)",
            "+        gradient = tf.IndexedSlices(tmp, gradient.indices, gradient.dense_shape)",
            "clipped_gradients.append(gradient)",
            "variables.append(variable)",
            "return list(zip(clipped_gradients, variables))"
        ]
    },
    {
        "number": 9199,
        "comments": "",
        "commit_message": "[PyTorch][TF] Fix L2Loss 1/2 factor minibatch-sgd (#1987)\n\n\n",
        "label": "",
        "answer": "no",
        "change": [
            "def train_concise_ch11(trainer_fn, hyperparams, data_iter, num_epochs=4):",
            "optimizer.zero_grad()",
            "out = net(X)",
            "y = y.reshape(out.shape)",
            "-            l = loss(out, y)/2",
            "-            l.backward()",
            "+            l = loss(out, y)",
            "+            l.mean().backward()",
            "optimizer.step()",
            "n += X.shape[0]",
            "if n % 200 == 0:",
            "timer.stop()",
            "animator.add(n/X.shape[0]/len(data_iter),",
            "-                             (d2l.evaluate_loss(net, data_iter, loss)/2,))",
            "+                             (d2l.evaluate_loss(net, data_iter, loss),))",
            "timer.start()",
            "print(f'loss: {animator.Y[0][-1]:.3f}, {timer.avg():.3f} sec/epoch')"
        ]
    },
    {
        "number": 9204,
        "comments": "",
        "commit_message": "upgrade to pytorch 0.4.0 (#1126)\n\n* bump pytorch to 0.4 + fix sanitize\n\n* remove check for Variable in block_orthogonal\n\n* rename parameter split_size=\n\n* remove checks for Variable\n\n* fix more tests\n\n* fixes\n\n* get tests to pass\n\n* fix warnings\n\n* get rid of some of the Variables\n\n* more tests passing\n\n* more elimination of variables\n\n* finish removing all Variables\n\n* pylint and such\n\n* a few fixes\n\n* move torch.no_grad into model.forward_on_instances\n\n* more pytorch 0.4 changes\n\n* detach() -> data\n\n* pylint\n\n* fix bad tensor creation\n\n* fix types\n\n* remove print statement\n\n* more 0.4 goodness\n\n* factor out is_tensor\n\n* add no_grad to elmo command\n\n* cleanup\n\n* remove TODO\n\n* address PR feedback\n\n* replace all() with item()\n\n* more cleanup\n\n* further cleanup\n\n* remove Variable\n\n* really fix merge conflict\n\n* fix pylint\n\n",
        "label": "",
        "answer": "no",
        "change": [
            "class SequenceLabelField(Field[torch.Tensor]):",
            "@overrides",
            "def as_tensor(self,",
            "padding_lengths: Dict[str, int],",
            "-                  cuda_device: int = -1,",
            "-                  for_training: bool = True) -> torch.Tensor:",
            "+                  cuda_device: int = -1) -> torch.Tensor:",
            "desired_num_tokens = padding_lengths['num_tokens']",
            "padded_tags = pad_sequence_to_length(self._indexed_labels, desired_num_tokens)",
            "-        tensor = Variable(torch.LongTensor(padded_tags), volatile=not for_training)",
            "+        tensor = torch.LongTensor(padded_tags)",
            "return tensor if cuda_device == -1 else tensor.cuda(cuda_device)",
            "",
            "@overrides"
        ]
    },
    {
        "number": 9216,
        "comments": "",
        "commit_message": "fixed lint errors.\n\n",
        "label": "",
        "answer": "no",
        "change": [
            "def multinomial(",
            ")",
            "/ population_size",
            ")",
            "-    return torch.multinomial(probs.float(),",
            "-                             num_samples,",
            "-                             replace).to(default_device(device))",
            "+    return torch.multinomial(probs.float(), num_samples, replace).to(",
            "+        default_device(device)",
            "+    )",
            "",
            "",
            "def randint("
        ]
    },
    {
        "number": 9221,
        "comments": "",
        "commit_message": "lintfixbot: Auto-commit fixed lint errors in codebase\n\n",
        "label": "",
        "answer": "no",
        "change": [
            "matrix_rank.support_native_out = True",
            "",
            "",
            "def matrix_transpose(",
            "-    x: torch.Tensor,",
            "-    /,",
            "-    *,",
            "-    conjugate: bool = False,",
            "-    out: Optional[torch.Tensor] = None",
            "+    x: torch.Tensor, /, *, conjugate: bool = False, out: Optional[torch.Tensor] = None",
            ") -> torch.Tensor:",
            "if conjugate:",
            "torch.conj(x)"
        ]
    },
    {
        "number": 9223,
        "comments": "",
        "commit_message": "[transformer] Format & Test Refactoring (#1325)\n\n* try PyTorch custom TestCase class\n\n* revert\n\n* initial working example\n\n* update\n\n* data utils\n\n* fix imports\n\n* hardcode backend to nccl\n\n* fix signature\n\n* fix typo\n\n* mapping\n\n* set device\n\n* init\n\n* refactor x entropy\n\n* remove unused import & destroy model parallel\n\n* refactor random\n\n* fix test\n\n* remove migrated tests\n\n* refactor\n\n* init\n\n* separate affine weight init\n\n* init model parallel\n\n* split more\n\n* weight init fix part 1\n\n* use cpu init for consistency btwn native and tensor parallel\n\n* black\n\n* add col parallel\n\n* use a 3D tensor of square matrix for column parallel linear\n\n* skip the failing cases\n\n* migrate layers test\n\n* pipeline parallel forward/backward\n\n* fix typo\n\n* fix typo\n\n* fix\n\n* fix pipeline world size\n\n* black\n\n* rm `run_pipeline_parallel_test` in favor of test_pipeline_parallel_fwd_bwd.py\n\n* stop logging\n\n* set log level\n\n* black\n\n* license and format\n\n* fix\n\n* skip tf32 as matrices are small\n\n* remove potentially inappropriate license\n\n* Apply suggestions from code review\n\n* remove `TODO` comment\n\n* `torch.testing.assert_allclose` -> `torch.testing.assert_close`\n\n* remove comment-outs\n\n* remote unused import\n\n* minor fix\n",
        "label": "",
        "answer": "no",
        "change": [
            "def _gather(input_):",
            "",
            "tensor_list = [torch.empty_like(input_) for _ in range(world_size)]",
            "tensor_list[rank] = input_",
            "-    torch.distributed.all_gather(tensor_list, input_, group=get_tensor_model_parallel_group())",
            "+    torch.distributed.all_gather(",
            "+        tensor_list, input_, group=get_tensor_model_parallel_group()",
            "+    )",
            "",
            "# Note: torch.cat already creates a contiguous tensor.",
            "output = torch.cat(tensor_list, dim=last_dim).contiguous()"
        ]
    },
    {
        "number": 9224,
        "comments": "",
        "commit_message": "Fix weight init in FastRCNNPredictor (#60)\n\n\n",
        "label": "",
        "answer": "no",
        "change": [
            "class FastRCNNPredictor(nn.Module):",
            "self.bbox_pred = nn.Linear(num_inputs, num_classes * 4)",
            "",
            "nn.init.normal_(self.cls_score.weight, mean=0, std=0.01)",
            "-        nn.init.constant_(self.cls_score.weight, 0)",
            "+        nn.init.constant_(self.cls_score.bias, 0)",
            "",
            "nn.init.normal_(self.bbox_pred.weight, mean=0, std=0.001)",
            "-        nn.init.constant_(self.bbox_pred.weight, 0)",
            "+        nn.init.constant_(self.bbox_pred.bias, 0)",
            "",
            "def forward(self, x):",
            "x = self.avgpool(x)"
        ]
    },
    {
        "number": 9225,
        "comments": "",
        "commit_message": "small bug fix for pytorch stop_gradient method, which was showing new errors after version upgrade.\n\n",
        "label": "",
        "answer": "no",
        "change": [
            "def adam_update(ws, dcdws, lr, mw, vw, step, beta1=0.9, beta2=0.999, epsilon=1e-",
            "",
            "",
            "def stop_gradient(x):",
            "-    return x.detach()",
            "+    # ToDo: work out why _torch.tensor() wrapping is necessary in certain cases, presumably .detach() should be enough.",
            "+    return _torch.tensor(x.detach())"
        ]
    },
    {
        "number": 9226,
        "comments": "",
        "commit_message": "fixed continuous action explorations\n\n",
        "label": "",
        "answer": "no",
        "change": [
            "class OrnsteinUhlenbeckProcess(Exploration):",
            "",
            "def tf_explore(self, episode, timestep, action_shape):",
            "normal_sample = tf.random_normal(shape=action_shape.shape, mean=0.0, stddev=1.0)",
            "-        state = tf.get_variable(name='ornstein_uhlenbeck', dtype=util.tf_dtype('float'), shape=action_shape.shape,",
            "-                                initializer=tf.constant_initializer(self.mu))",
            "+        state = tf.get_variable(",
            "+            name='ornstein_uhlenbeck',",
            "+            dtype=util.tf_dtype('float'),",
            "+            shape=action_shape.shape,",
            "+            initializer=tf.constant_initializer(self.mu)",
            "+        )",
            "return tf.assign_add(ref=state, value=(self.theta * (self.mu - state) + self.sigma * normal_sample))"
        ]
    },
    {
        "number": 9236,
        "comments": "",
        "commit_message": "small fix to median torch backend\n",
        "label": "",
        "answer": "yes",
        "change": [
            "def median(",
            "keepdims: Optional[bool] = False,",
            "out: Optional[torch.tensor] = None,",
            ") -> torch.tensor:",
            "+    temp = input",
            "if hasattr(axis, \"__iter__\"):",
            "for dim in axis:",
            "-            input = torch.median(",
            "-                input,",
            "+            temp = torch.median(",
            "+                temp,",
            "dim=dim,",
            "keepdim=keepdims,",
            ")[0]"
        ]
    },
    {
        "number": 9240,
        "comments": "",
        "commit_message": "Fix torch version comparisons (#18460)\n\nComparisons like\nversion.parse(torch.__version__) > version.parse(\"1.6\")\nare True for torch==1.6.0+cu101 or torch==1.6.0+cpu\n\nversion.parse(version.parse(torch.__version__).base_version) are preferred (and available in pytorch_utils.py\n",
        "label": "",
        "answer": "no",
        "change": [
            "class Pipeline(_ScikitCompat):",
            "",
            "def get_inference_context(self):",
            "inference_context = (",
            "-            torch.inference_mode if version.parse(torch.__version__) >= version.parse(\"1.9.0\") else torch.no_grad",
            "+            torch.inference_mode",
            "+            if version.parse(version.parse(torch.__version__).base_version) >= version.parse(\"1.9.0\")",
            "+            else torch.no_grad",
            ")",
            "return inference_context"
        ]
    },
    {
        "number": 9241,
        "comments": "",
        "commit_message": "small fix to torch argsort\n\n",
        "label": "",
        "answer": "no",
        "change": [
            "def argsort(",
            "out: Optional[torch.Tensor] = None,",
            ") -> torch.Tensor:",
            "if out is not None:",
            "-        out = tuple([torch.zeros(out.shape, dtype=out.dtype), out])",
            "+        out = tuple([torch.zeros(x.shape, dtype=x.dtype), out.long()])",
            "_, sorted_indices = torch.sort(",
            "x, dim=axis, descending=descending, stable=stable, out=out",
            ")"
        ]
    },
    {
        "number": 9243,
        "comments": "",
        "commit_message": "[WIP] - Documentation Cleaning and Coding Style (#516)\n\n* Activation Cleaning Docstring Test\n\n* Requirements Pinned with range to insure tested versions are used. Range are used to prevent updating requirements all the time.\n\n* setup.cfg file added with PEP8 configuration\n\n* activation.py refactored\n\n* docstring fixed - ready for documentation unittest\n\n* Yapf correction for max_line_length: 120\n\n* test yapf refactored\n\n* Requirements conflict solved\n\n* Yapf Style modified and merged in file \"setup.cfg\"\n\n* Yapf Confiuguration Updated\n\n* Code Refactored with new YAPF formating style\n\n* Code Refactored with new YAPF formating style\n\n* Code Refactored with new YAPF formating style\n\n* tl.layers.pooling YAPF reformat\n\n* yapf updated\n\n* gitignore updated\n\n* YAPF Style Fixing Attempt\n\n* Space Error Fix\n\n* Style Correction\n\n* Assertion Codacy Errors Corrected\n\n* Error Fix\n\n* Assertion Refactored\n\n* YAPF Style Applied to Master\n\n",
        "label": "",
        "answer": "no",
        "change": [
            "class SpatialTransformer2dAffineLayer(Layer):",
            "if out_size is None:",
            "out_size = [40, 40]",
            "",
            "-        logging.info(\"SpatialTransformer2dAffineLayer %s: in_size:%s out_size:%s\" % (name, self.inputs.get_shape().as_list(), out_size))",
            "+        logging.info(",
            "+            \"SpatialTransformer2dAffineLayer %s: in_size:%s out_size:%s\" %",
            "+            (name, self.inputs.get_shape().as_list(), out_size)",
            "+        )",
            "",
            "with tf.variable_scope(name) as vs:",
            "# 1. make the localisation network to [batch, 6] via Flatten and Dense."
        ]
    },
    {
        "number": 9245,
        "comments": "",
        "commit_message": "add diff command (#5109)\n\n* add diff command\n\n* fix docs\n\n* no silly geese\n\n* update CHANGELOG\n\n* move 'load_state_dict' to nn.util\n\n* normalize by size\n\n* handle different checkpoint types\n\n* add integration tests\n\n* add 'scale' and 'threshold' params\n\n* HuggingFace Hub support\n\n* support '_/' as well, add test\n\n* revert some changes\n\n* fix\n\n* Update CHANGELOG.md\n\n* Update codecov.yml\n\nCo-authored-by: Dirk Groeneveld <dirkg@allenai.org>\n",
        "label": "",
        "answer": "no",
        "change": [
            "class Model(torch.nn.Module, Registrable):",
            "",
            "# Load state dict. We pass `strict=False` so PyTorch doesn't raise a RuntimeError",
            "# if the state dict is missing keys because we handle this case below.",
            "-        model_state = torch.load(weights_file, map_location=util.device_mapping(cuda_device))",
            "+        model_state = util.load_state_dict(weights_file, cuda_device=cuda_device)",
            "missing_keys, unexpected_keys = model.load_state_dict(model_state, strict=False)",
            "",
            "# Modules might define a class variable called `authorized_missing_keys`,"
        ]
    },
    {
        "number": 9246,
        "comments": "",
        "commit_message": "fixed dropout, changed parameter dtype handling\n\n",
        "label": "",
        "answer": "yes",
        "change": [
            "class Dropout(Layer):",
            "",
            "skip_dropout = tf.math.logical_not(x=Module.retrieve_tensor(name='update'))",
            "zero = tf.constant(value=0.0, dtype=util.tf_dtype(dtype='float'))",
            "-        skip_dropout = tf.math.logical_or(x=apply_dropout, y=tf.math.equal(x=rate, y=zero))",
            "+        skip_dropout = tf.math.logical_or(x=skip_dropout, y=tf.math.equal(x=rate, y=zero))",
            "return self.cond(pred=skip_dropout, true_fn=no_dropout, false_fn=apply_dropout)"
        ]
    },
    {
        "number": 9255,
        "comments": "",
        "commit_message": "fixes\n\n",
        "label": "",
        "answer": "no",
        "change": [
            "def test_dnn_beamformer(use_frontend, use_beamformer, bnmask, num_spkrs, m_str):",
            "ws2 = b.get_mvdr_vector(psd_speech2, psd_speech1 + psd_noise, u2)",
            "",
            "enhanced1 = b.apply_beamforming_vector(ws1, feat).transpose(-1, -2)",
            "-    enhanced2 = b.apply_beamforming_vector(ws1, feat).transpose(-1, -2)",
            "+    enhanced2 = b.apply_beamforming_vector(ws2, feat).transpose(-1, -2)",
            "",
            "assert torch.equal(enhanced1.real, enhanced[0].real)",
            "assert torch.equal(enhanced2.real, enhanced[1].real)",
            "assert torch.equal(enhanced1.imag, enhanced[0].imag)",
            "-    assert torch.equal(enhanced2.imag, enhanced[1].imag)",
            "\\ No newline at end of file",
            "+    assert torch.equal(enhanced2.imag, enhanced[1].imag)"
        ]
    },
    {
        "number": 9256,
        "comments": "",
        "commit_message": "Fixes to enable dev branch to move to pytorch-1.2 (#2001)\n\n* Fixes to enable dev branch to move to pytorch-1.2\n\n* change name for published cpu wheels\n\n* fix failing unit tests\n\n* change docs conf\n\n* change tracking example\n\n",
        "label": "",
        "answer": "no",
        "change": [
            "def _sample_tree_approx(edge_logits):",
            "# the complete graph. The id of an edge (v1,v2) is k = v1+v2*(v2-1)/2.",
            "edge_ids = torch.empty((E,), dtype=torch.long)",
            "# This maps each vertex to whether it is a member of the cumulative tree.",
            "-    components = torch.zeros(V, dtype=torch.uint8)",
            "+    components = torch.zeros(V, dtype=torch.bool)",
            "",
            "# Sample the first edge at random.",
            "probs = (edge_logits - edge_logits.max()).exp()"
        ]
    },
    {
        "number": 9260,
        "comments": "",
        "commit_message": "Fix broken `test_cpu_amp_precision_context_manager` (#9809)\n\n* @RunIf(min_gpus=1)\n\n* dtype -> fast_dtype\n",
        "label": "",
        "answer": "yes",
        "change": [
            "def test_cpu_amp_precision_context_manager(tmpdir):",
            "assert not hasattr(plugin, \"scaler\")",
            "context_manager = plugin.autocast_context_manager()",
            "assert isinstance(context_manager, torch.cpu.amp.autocast)",
            "-    assert context_manager.dtype == torch.bfloat16",
            "+    assert context_manager.fast_dtype == torch.bfloat16",
            "",
            "",
            "@pytest.mark.skipif(not _TORCH_CPU_AMP_AVAILABLE, reason=\"Torch CPU AMP is not available.\")"
        ]
    },
    {
        "number": 9265,
        "comments": "",
        "commit_message": "upgrade to pytorch 1.2 (#3182)\n\n* first attempt at pytorch 1.2\n\n* explicit is better than implicit\n\n* more explicit\n\n* attempt to fix flaky tests\n\n* pylint\n\n* no disable dropout\n\n* disable dropout by default\n\n* restore dropout, don't deepcopy\n\n* change batch size for biaffine_dependency_parser_multilang_test, maybe that will make it pass? :(\n\n* try batch size 10\n\n* ignore bad gradient parameter\n\n* cleanup\n\n",
        "label": "",
        "answer": "no",
        "change": [
            "class LanguageModel(Model):",
            "mask: torch.Tensor,",
            "direction: int) -> torch.Tensor:",
            "# Need to shift the mask in the correct direction",
            "-        zero_col = token_embeddings.new_zeros(mask.size(0), 1).byte()",
            "+        zero_col = token_embeddings.new_zeros(mask.size(0), 1).to(dtype=torch.bool)",
            "if direction == 0:",
            "# forward direction, get token to right",
            "shifted_mask = torch.cat([zero_col, mask[:, 0:-1]], dim=1)"
        ]
    },
    {
        "number": 9270,
        "comments": "",
        "commit_message": "fix TF deprecation of concat/split/pack/unpack\n\n",
        "label": "",
        "answer": "yes",
        "change": [
            "class Model(ModelDesc):",
            "zc = tf.one_hot(ids, 10, name='zc_train')",
            "zc = tf.placeholder_with_default(zc, [None, 10], name='zc')",
            "",
            "-        z = tf.random_uniform(tf.pack([tf.shape(zc)[0], 90]), -1, 1, name='z_train')",
            "+        z = tf.random_uniform(tf.stack([tf.shape(zc)[0], 90]), -1, 1, name='z_train')",
            "z = tf.placeholder_with_default(z, [None, 90], name='z')",
            "-        z = tf.concat(1, [zc, z], name='fullz')",
            "+        z = tf.concat_v2([zc, z], 1, name='fullz')",
            "",
            "with argscope([Conv2D, Deconv2D, FullyConnected],",
            "W_init=tf.truncated_normal_initializer(stddev=0.02)):"
        ]
    },
    {
        "number": 9276,
        "comments": "",
        "commit_message": "Update text_sentiment_ngrams_tutorial.py (#2246)\n\nFixes #2245\n",
        "label": "",
        "answer": "no",
        "change": [
            "class TextClassificationModel(nn.Module):",
            "",
            "def __init__(self, vocab_size, embed_dim, num_class):",
            "super(TextClassificationModel, self).__init__()",
            "-        self.embedding = nn.EmbeddingBag(vocab_size, embed_dim, sparse=True)",
            "+        self.embedding = nn.EmbeddingBag(vocab_size, embed_dim, sparse=False)",
            "self.fc = nn.Linear(embed_dim, num_class)",
            "self.init_weights()"
        ]
    },
    {
        "number": 9277,
        "comments": "",
        "commit_message": "fix example about dropout\n\n",
        "label": "",
        "answer": "no",
        "change": [
            "def get_model(inputs, is_training):",
            "cost: the cost to minimize. scalar variable",
            "\"\"\"",
            "is_training = bool(is_training)",
            "-    keep_prob = tf.constant(0.5 if is_training else 1.0)",
            "+    keep_prob = tf.constant(0.5 if is_training else 0.0)",
            "",
            "image, label = inputs",
            "image = tf.expand_dims(image, 3)    # add a single channel"
        ]
    },
    {
        "number": 9280,
        "comments": "",
        "commit_message": "New modular metric interface (#2528)\n\n* new base structure\n\n* missing packages\n\n* updated interface\n\n* revert some changes\n\n* fixes\n\n* add changelog\n\n* fix bug\n\n* added description\n\n* test for pickable\n\n* fixing test\n\n* fixing test\n\n* fix pickle issue\n\n* reduceop typehints back\n\n* remove redundant module arg\n\n* add save/load test\n\n* add aggregate method\n\n* text clarification\n\n* fix doctest\n\n* Apply suggestions from code review\n\n* change test to results obj\n\n* fix docs\n\n* formatting\n\nCo-authored-by: Rohit Gupta <rohitgr1998@gmail.com>\n\n* formatting\n\n* pep\n\n* Update CHANGELOG.md\n\n* suggestions\n\n* fix tests\n\n* fix pep8\n\n* fix tests\n\nCo-authored-by: Nicki Skafte <nugginea@gmail.com>\nCo-authored-by: Adrian W\u00e4lchli <aedu.waelchli@gmail.com>\nCo-authored-by: Jirka Borovec <Borda@users.noreply.github.com>\nCo-authored-by: Rohit Gupta <rohitgr1998@gmail.com>\n",
        "label": "",
        "answer": "no",
        "change": [
            "def confusion_matrix(",
            "\"\"\"",
            "num_classes = get_num_classes(pred, target, None)",
            "",
            "-    unique_labels = target.view(-1) * num_classes + pred.view(-1)",
            "+    unique_labels = (target.view(-1) * num_classes + pred.view(-1)).to(torch.int)",
            "",
            "bins = torch.bincount(unique_labels, minlength=num_classes ** 2)",
            "cm = bins.reshape(num_classes, num_classes).squeeze().float()"
        ]
    },
    {
        "number": 9284,
        "comments": "",
        "commit_message": "fix async test (#2820)\n\n* fix async test\n\n* minor fix\n",
        "label": "",
        "answer": "no",
        "change": [
            "def test_ga_anchor_head_loss():",
            "gt_bboxes = [",
            "torch.Tensor([[23.6667, 23.8757, 238.6326, 151.8874]]).cuda(),",
            "]",
            "-        gt_labels = [torch.LongTensor([2])]",
            "+        gt_labels = [torch.LongTensor([2]).cuda()]",
            "one_gt_losses = head.loss(cls_scores, bbox_preds, shape_preds,",
            "loc_preds, gt_bboxes, gt_labels, img_metas,",
            "gt_bboxes_ignore)"
        ]
    },
    {
        "number": 9287,
        "comments": "",
        "commit_message": "Squashed commit of the following:\n\ncommit 047d0c474c18a87c205e566948410be16787e477\nMerge: 9396ed37d bfe7bca3a\nAuthor: Shinji Watanabe <sw005320@gmail.com>\nDate:   Thu May 19 09:50:02 2022 -0400\n\n    Merge pull request #4378 from akreal/fix-check_short_utt\n\n    Fix minimum input length for Conv2dSubsampling2 in check_short_utt\n\ncommit bfe7bca3a98da52714e1c45906cf826704464b7c\nAuthor: Pavel Denisov <pavel.denisov@ims.uni-stuttgart.de>\nDate:   Thu May 19 13:41:59 2022 +0200\n\n    Fix minimum input length for Conv2dSubsampling2 in check_short_utt\n\ncommit 9396ed37deb8b101fd064d46c85975ad9047bf87\nMerge: c54b585c1 e047156ec\nAuthor: Naoyuki Kamo <naoyuki.kamo829@gmail.com>\nDate:   Thu May 19 14:50:56 2022 +0900\n\n    Merge pull request #4376 from kamo-naoyuki/libsndfile\n\n    Remove the restriction for libsndfile version\n\ncommit c54b585c1ca6693ae7ba7e299a48af762eda6adf\nMerge: 9ca49caed 88465607c\nAuthor: Tomoki Hayashi <hayashi.tomoki@g.sp.m.is.nagoya-u.ac.jp>\nDate:   Thu May 19 12:29:02 2022 +0900\n\n    Merge pull request #4374 from YosukeHiguchi/master\n\n    Minor fixes for the intermediate loss usage and Mask-CTC decoding\n\ncommit e047156ec8df3266259aed03742ac798e365f648\nAuthor: kamo-naoyuki <naoyuki.kamo829@gmail.com>\nDate:   Thu May 19 10:11:08 2022 +0900\n\n    remove version restiction for libsndfile\n\ncommit 9ca49caed98410cd7d2c71e4781819a1e92b35d9\nMerge: b008ac7d5 2952c3bca\nAuthor: Naoyuki Kamo <naoyuki.kamo829@gmail.com>\nDate:   Thu May 19 09:38:33 2022 +0900\n\n    Merge pull request #4375 from espnet/kamo-naoyuki-patch-1\n\n    Update .mergify.yml\n\ncommit 88465607cf5e899b8ce1b93c5c9fe09b69a2ab83\nAuthor: Yosuke Higuchi <wasapon.dev@gmail.com>\nDate:   Thu May 19 07:05:29 2022 +0900\n\n    fix for test\n\ncommit 2952c3bca26a70723094d5a160387b7936f71769\nAuthor: Naoyuki Kamo <naoyuki.kamo829@gmail.com>\nDate:   Thu May 19 06:59:02 2022 +0900\n\n    Update .mergify.yml\n\ncommit b008ac7d58e9ced1a9f8c89cc85ee69d9e9461ab\nMerge: 3c96908ed 4203c9c9c\nAuthor: Naoyuki Kamo <naoyuki.kamo829@gmail.com>\nDate:   Thu May 19 06:32:44 2022 +0900\n\n    Merge pull request #4372 from kamo-naoyuki/isort\n\n    Add isort checking to the CI tests\n\ncommit 4de7aa562f74c596e5b616fd8278a50a707d0198\nAuthor: Yosuke Higuchi <wasapon.dev@gmail.com>\nDate:   Thu May 19 06:19:20 2022 +0900\n\n    fix for test\n\ncommit 9c83ddb46404334914764a8e4356ea8a4c3c806c\nAuthor: Yosuke Higuchi <wasapon.dev@gmail.com>\nDate:   Thu May 19 05:05:01 2022 +0900\n\n    support gpu decoding for mask-ctc\n\ncommit 49100e4f1b3fc389c5672dc2ca17973525c4bf02\nAuthor: Yosuke Higuchi <wasapon.dev@gmail.com>\nDate:   Thu May 19 05:03:29 2022 +0900\n\n    fix bug for returning intermediate states\n\ncommit 4203c9c9c9d5a68cd13d464290cead3738ed003d\nAuthor: kamo-naoyuki <naoyuki.kamo829@gmail.com>\nDate:   Wed May 18 17:47:22 2022 +0900\n\n    apply isort\n\ncommit d0f2eac70a5521adf59618ba3ce6603e2863f0c5\nAuthor: kamo-naoyuki <naoyuki.kamo829@gmail.com>\nDate:   Wed May 18 17:46:47 2022 +0900\n\n    modified for isort options\n\ncommit 8f73b73d23d34bf5f3e8ed2f625dca1916ea8683\nAuthor: kamo-naoyuki <naoyuki.kamo829@gmail.com>\nDate:   Wed May 18 16:38:34 2022 +0900\n\n    apply black\n\ncommit 6974dd4efc11e465d4a3d1a34190c7ed782dacee\nAuthor: kamo-naoyuki <naoyuki.kamo829@gmail.com>\nDate:   Wed May 18 16:35:15 2022 +0900\n\n    Add descriptions for isort\n\ncommit 24c3676a8d4c2e60d2726e9bcd9bdbed740610e0\nAuthor: kamo-naoyuki <naoyuki.kamo829@gmail.com>\nDate:   Wed May 18 16:16:53 2022 +0900\n\n    Apply isort\n\ncommit 3c96908edc5c592c9c99bba0640428613dc7c3cb\nMerge: c173c3093 aa5d6ffff\nAuthor: Jiatong <728307998@qq.com>\nDate:   Tue May 17 18:00:40 2022 -0700\n\n    Merge pull request #4341 from chintu619/st_bugfix\n\n    bug fixes in ST recipes\n\ncommit c173c30930631731e6836c274a591ad571749741\nMerge: e0e0620ac d38188cc3\nAuthor: Naoyuki Kamo <naoyuki.kamo829@gmail.com>\nDate:   Tue May 17 15:20:31 2022 +0900\n\n    Merge pull request #4371 from espnet/kamo-naoyuki-patch-1\n\n    Update .mergify.yml\n\ncommit d38188cc30af6cffc4ad0233e7e705e93511c11d\nAuthor: Naoyuki Kamo <naoyuki.kamo829@gmail.com>\nDate:   Tue May 17 13:43:40 2022 +0900\n\n    Update .mergify.yml\n\ncommit e0e0620acca0df345cf317a13c839d7d4d5c773f\nMerge: df053b8c1 2cfbbd337\nAuthor: Tomoki Hayashi <hayashi.tomoki@g.sp.m.is.nagoya-u.ac.jp>\nDate:   Tue May 17 13:01:02 2022 +0900\n\n    Merge pull request #4369 from kan-bayashi/minor_fix_jets\n\ncommit 2cfbbd337d64f68e1f937e37feeb544d972c4e0b\nAuthor: kan-bayashi <hayashi.tomoki@g.sp.m.is.nagoya-u.ac.jp>\nDate:   Tue May 17 11:06:00 2022 +0900\n\n    updated jets test\n\ncommit 17ab7747fe7e0d4d6885847f2c738253a859dedf\nAuthor: kan-bayashi <hayashi.tomoki@g.sp.m.is.nagoya-u.ac.jp>\nDate:   Tue May 17 11:05:52 2022 +0900\n\n    updated README\n\ncommit 6ec8c27815c6fded4c13b01b8d2707016e9e8e95\nAuthor: kan-bayashi <hayashi.tomoki@g.sp.m.is.nagoya-u.ac.jp>\nDate:   Tue May 17 09:25:41 2022 +0900\n\n    updated README\n\ncommit b1e6c752b0d94f3209593e0cdbd5b43d79e8076d\nAuthor: kan-bayashi <hayashi.tomoki@g.sp.m.is.nagoya-u.ac.jp>\nDate:   Tue May 17 09:19:54 2022 +0900\n\n    shorten jets test\n\ncommit df053b8c13c26fe289fc882751801fd781e9d43e\nMerge: afa8f8ec5 5aa543a9f\nAuthor: Tomoki Hayashi <hayashi.tomoki@g.sp.m.is.nagoya-u.ac.jp>\nDate:   Tue May 17 08:13:36 2022 +0900\n\n    Merge pull request #4364 from imdanboy/master\n\n    add e2e tts model: JETS\n\ncommit 5aa543a9ff6c329f5fc601f3aa053ffd4afb19ba\nAuthor: Tomoki Hayashi <hayashi.tomoki@g.sp.m.is.nagoya-u.ac.jp>\nDate:   Mon May 16 21:13:30 2022 +0900\n\n    minor fix of docstrings and comments\n\ncommit a82e78d18aca9c00bcf8f378c42e78a0de24940e\nAuthor: imdanboy <imdanboy@gmail.com>\nDate:   Fri May 13 22:28:31 2022 +0900\n\n    JETS; e2e tts model\n\ncommit afa8f8ec5b8ec77deb1a3c1531915ebbee7b80e6\nMerge: fffb3444f cd77501a8\nAuthor: Shinji Watanabe <sw005320@gmail.com>\nDate:   Fri May 13 17:36:30 2022 -0400\n\n    Merge pull request #4349 from pyf98/quantization\n\n    Add quantization in ESPnet2 for asr inference\n\ncommit fffb3444fe4d8ef2630a22dd145d6f1fb0caab46\nMerge: f840b8114 5331890e6\nAuthor: Naoyuki Kamo <naoyuki.kamo829@gmail.com>\nDate:   Fri May 13 20:36:39 2022 +0900\n\n    Merge pull request #4361 from espnet/kamo-naoyuki-patch-1\n\n    Update README.md\n\ncommit aa5d6ffff67079f2cbe6a7e1eba852e459f0f6a4\nAuthor: Chaitanya Narisetty <cnariset@andrew.cmu.edu>\nDate:   Fri May 13 05:15:32 2022 -0400\n\n    fix lm tag names\n\ncommit 3cac7bb7f732a694f4b87007271d394a9ee3838e\nAuthor: Chaitanya Narisetty <cnariset@andrew.cmu.edu>\nDate:   Fri May 13 05:07:55 2022 -0400\n\n    resolve conflicts and fix lm_train filenames\n\ncommit ea44663e8a24ebfcaa03f3bba149e561e970fdf3\nAuthor: Chaitanya Narisetty <cnariset@andrew.cmu.edu>\nDate:   Fri May 13 04:43:18 2022 -0400\n\n    review suggested changes\n\ncommit 650c733437da32627f88fe369555ce1955536087\nMerge: 6d1bd3a8e f840b8114\nAuthor: Chaitanya Narisetty <cnariset@andrew.cmu.edu>\nDate:   Fri May 13 03:18:08 2022 -0400\n\n    Merge branch 'espnet_master' into st_bugfix\n\ncommit 5331890e6a6a61a3006e5e2c13d47172f5587a29\nAuthor: Naoyuki Kamo <naoyuki.kamo829@gmail.com>\nDate:   Fri May 13 13:15:40 2022 +0900\n\n    Update README.md\n\ncommit f840b8114452b4803b8fb25c1f22a93da146e9ba\nMerge: 1b1241040 9cfd6af64\nAuthor: Naoyuki Kamo <naoyuki.kamo829@gmail.com>\nDate:   Fri May 13 13:13:34 2022 +0900\n\n    Merge pull request #4348 from kamo-naoyuki/1.11.0\n\n    Add pytorch=1.10.2 and 1.11.0 to ci configurations\n\ncommit 9cfd6af64a28237019196cd495fbd2943790ce21\nAuthor: kamo-naoyuki <naoyuki.kamo829@gmail.com>\nDate:   Fri May 13 09:58:04 2022 +0900\n\n    fix\n\ncommit 2625be71a722e7eb030dff4f71d8dc9599a33844\nAuthor: kamo-naoyuki <naoyuki.kamo829@gmail.com>\nDate:   Fri May 13 03:46:24 2022 +0900\n\n    remove warning\n\ncommit 9a2001fac56dddf5ba1c2eaec092cb420f83f7c9\nAuthor: kamo-naoyuki <naoyuki.kamo829@gmail.com>\nDate:   Fri May 13 03:44:11 2022 +0900\n\n    fix for pytorch1.11 (+= became inplace op)\n\ncommit 5518b6ba0af0bba9e9d59d6c47607656f49c9988\nAuthor: kamo-naoyuki <naoyuki.kamo829@gmail.com>\nDate:   Thu May 12 22:04:42 2022 +0900\n\n    fix import order\n\ncommit 98689a5f0bfd88efffdbbcdd5d924e186d563a91\nAuthor: kamo-naoyuki <naoyuki.kamo829@gmail.com>\nDate:   Thu May 12 21:17:35 2022 +0900\n\n    change to show the error logs when jobs are failed\n\ncommit bb0d0aaa9e9f9076ac88aad425ad2f2caef369a7\nAuthor: kamo-naoyuki <naoyuki.kamo829@gmail.com>\nDate:   Thu May 12 20:40:39 2022 +0900\n\n    fix code style\n\ncommit 934b161f1f714637c3d7d47c14f8c810a9df6fe2\nAuthor: kamo-naoyuki <naoyuki.kamo829@gmail.com>\nDate:   Thu May 12 20:33:58 2022 +0900\n\n    change to show the error logs when jobs are failed\n\ncommit 5c474b96c543c3d26e95b432355bcfd2bf8dc116\nAuthor: kamo-naoyuki <naoyuki.kamo829@gmail.com>\nDate:   Thu May 12 20:20:18 2022 +0900\n\n    remove verbosity options\n\ncommit 005aad11b37acf388c6b70143ab40a5231bc7a39\nAuthor: kamo-naoyuki <naoyuki.kamo829@gmail.com>\nDate:   Thu May 12 20:04:57 2022 +0900\n\n    fix\n\ncommit 5c4b966a957062e4de298bcb69fe8cf6f1365fd1\nAuthor: kamo-naoyuki <naoyuki.kamo829@gmail.com>\nDate:   Thu May 12 19:36:11 2022 +0900\n\n    remove tests for python=3.10.0 temporary\n\ncommit 809ac3741814b7d9ebdd351b9e0e9343e236977c\nAuthor: kamo-naoyuki <naoyuki.kamo829@gmail.com>\nDate:   Thu May 12 19:27:20 2022 +0900\n\n    fix\n\ncommit 86186b744fb2bfc259909c49cc906fb0856d15bf\nAuthor: kamo-naoyuki <naoyuki.kamo829@gmail.com>\nDate:   Thu May 12 19:10:18 2022 +0900\n\n    add installation for packaging\n\ncommit 8fbac77268906075043cbecfb3e1c5625b145fce\nAuthor: kamo-naoyuki <naoyuki.kamo829@gmail.com>\nDate:   Thu May 12 18:59:17 2022 +0900\n\n    fix\n\ncommit b0050d97da3d0545b62a5d21b029ddd016ce6ca1\nAuthor: kamo-naoyuki <naoyuki.kamo829@gmail.com>\nDate:   Thu May 12 18:56:52 2022 +0900\n\n    fix\n\ncommit 6e9035d42eea31cad87a7c8b87fc79635a6df7c2\nAuthor: kamo-naoyuki <naoyuki.kamo829@gmail.com>\nDate:   Thu May 12 18:32:33 2022 +0900\n\n    fix\n\ncommit 1c344a95ceb83b4b44675aee5326afeb9284d8e8\nAuthor: kamo-naoyuki <naoyuki.kamo829@gmail.com>\nDate:   Thu May 12 18:25:35 2022 +0900\n\n    change LooseVersion to parse\n\ncommit f899a05768436cc38fb432d6f002ab667983abbd\nAuthor: kamo-naoyuki <naoyuki.kamo829@gmail.com>\nDate:   Thu May 12 18:09:33 2022 +0900\n\n    fix\n\ncommit 7d5242212403e740c4d5b8ebd9a346a991ea50a9\nAuthor: kamo-naoyuki <naoyuki.kamo829@gmail.com>\nDate:   Thu May 12 18:09:15 2022 +0900\n\n    fix\n\ncommit b7cfdd9a70559271e45de103e242228f94e837ff\nAuthor: kamo-naoyuki <naoyuki.kamo829@gmail.com>\nDate:   Thu May 12 18:05:41 2022 +0900\n\n    Change LooseVersion to parse\n\ncommit d234b9ab30bbc2bb6fd42d6335421a6f8a9ed637\nAuthor: kamo-naoyuki <naoyuki.kamo829@gmail.com>\nDate:   Thu May 12 17:10:40 2022 +0900\n\n    fix\n\ncommit 1b1241040e1e30e575a182b6be8b8e4602badeb8\nMerge: 39bae01e4 52c238d02\nAuthor: Shinji Watanabe <sw005320@gmail.com>\nDate:   Wed May 11 13:00:13 2022 -0400\n\n    Merge pull request #4352 from espnetUser/master\n\n    Add unit test to streaming ASR inference\n\ncommit 52c238d02d50fcfb2c4e2a5058c743c7db913eec\nAuthor: espnetUser <81252087+espnetUser@users.noreply.github.com>\nDate:   Wed May 11 16:10:04 2022 +0200\n\n    Applied black formating to test_asr_inference.py for PR\n\ncommit 87c7573874aeec096dd1e902478d3dd6e2c83ad2\nAuthor: espnetUser <81252087+espnetUser@users.noreply.github.com>\nDate:   Wed May 11 15:43:01 2022 +0200\n\n    Update asr_inference_streaming.py\n\n    Fix CI error on mismatch in Tensor dtypes\n\ncommit 39bae01e4a132da69b9b0d025da8c579a5f38b77\nMerge: dd24d7d41 71f3c8813\nAuthor: Tomoki Hayashi <hayashi.tomoki@g.sp.m.is.nagoya-u.ac.jp>\nDate:   Wed May 11 17:53:04 2022 +0900\n\n    Merge pull request #4355 from kan-bayashi/fix_lid_in_gan_tts\n\ncommit dd24d7d41517202b308afb186f466c8006ae4c14\nMerge: 2dde7734b f7b390582\nAuthor: Tomoki Hayashi <hayashi.tomoki@g.sp.m.is.nagoya-u.ac.jp>\nDate:   Wed May 11 17:52:09 2022 +0900\n\n    Merge pull request #4206 from WeiGodHorse/master\n\ncommit 2dde7734bade874d4f8cfe7df4be069e64259fd5\nMerge: beb336027 ec7e2b07b\nAuthor: Tomoki Hayashi <hayashi.tomoki@g.sp.m.is.nagoya-u.ac.jp>\nDate:   Wed May 11 16:27:55 2022 +0900\n\n    Merge pull request #4356 from kan-bayashi/fix_mixed_precision_vits\n\n    fix loss = NaN in VITS with mixed precision\n\ncommit 7a590ccd0da4897ef283486776f134eabe865ce0\nAuthor: espnetUser <81252087+espnetUser@users.noreply.github.com>\nDate:   Wed May 11 09:25:03 2022 +0200\n\n    Applied black formating to test_asr_inference.py for PR\n\ncommit ec7e2b07bfa85c8a2292de7a2edbf1c2cd956d99\nAuthor: kan-bayashi <hayashi.tomoki@g.sp.m.is.nagoya-u.ac.jp>\nDate:   Wed May 11 14:48:36 2022 +0900\n\n    fixed black\n\ncommit 2be9ddc5a2c0a7c4aad2b155fa1450222ca0c7a3\nAuthor: kan-bayashi <hayashi.tomoki@g.sp.m.is.nagoya-u.ac.jp>\nDate:   Wed May 11 14:28:05 2022 +0900\n\n    fixed mixed_precision NaN (#4236)\n\ncommit 71f3c88133c7a29db54baa7eaa3b4fdf329cbdf5\nAuthor: kan-bayashi <hayashi.tomoki@g.sp.m.is.nagoya-u.ac.jp>\nDate:   Wed May 11 13:39:59 2022 +0900\n\n    fixed optional data names for TTS\n\ncommit ee57ff94dfa2c3ced30c1b103076b4ae18fa9199\nAuthor: espnetUser <81252087+espnetUser@users.noreply.github.com>\nDate:   Tue May 10 22:37:18 2022 +0200\n\n    Update asr_inference_streaming.py\n\n    Fix dtype CI error\n\ncommit 272d5d015f89f1520c82c31bd309fdce89d88f50\nAuthor: espnetUser <81252087+espnetUser@users.noreply.github.com>\nDate:   Tue May 10 21:52:21 2022 +0200\n\n    Update test_asr_inference.py\n\n    Remove streaming=true parameter\n\ncommit c96e0d7f79e6e94e568b22156eb61004d5d8cf8c\nAuthor: espnetUser <81252087+espnetUser@users.noreply.github.com>\nDate:   Tue May 10 21:25:57 2022 +0200\n\n    Aplied black formating to test_asr_inference.py for PR\n\ncommit cd77501a8f09b5b11bf5422b0e24b8316820af77\nAuthor: Yifan Peng <pengyf21@gmail.com>\nDate:   Tue May 10 12:02:07 2022 -0400\n\n    fix error for rnn encoders flatten_parameters\n\ncommit 3aafdb9d92c8c61d62be72f0907da957d177aa8c\nAuthor: espnetUser <81252087+espnetUser@users.noreply.github.com>\nDate:   Tue May 10 17:05:48 2022 +0200\n\n    Update asr_inference_streaming.py\n\n    Bugfix in streaming inference #4216\n\ncommit 61b50138b7e8828506a18067cc2f482e745e83d7\nAuthor: espnetUser <81252087+espnetUser@users.noreply.github.com>\nDate:   Tue May 10 16:58:14 2022 +0200\n\n    Update test_asr_inference.py\n\n    Added edge test case for streaming asr unit test and increased execution time out\n\ncommit 052dd603900362048675f65058b7a6f4bd94bc7d\nAuthor: Yifan Peng <pengyf21@gmail.com>\nDate:   Mon May 9 23:27:41 2022 -0400\n\n    fix ci\n\ncommit 06e2a7a16a06cda326035d03c84734d18c852cd3\nAuthor: Yifan Peng <pengyf21@gmail.com>\nDate:   Mon May 9 23:10:14 2022 -0400\n\n    apply black\n\ncommit a48423fda5ab75d1205396ca5f744dc8ca98df00\nAuthor: Yifan Peng <pengyf21@gmail.com>\nDate:   Mon May 9 22:59:57 2022 -0400\n\n    add test for espnet2 quantization\n\ncommit acb24c886f47fec7a00063cb66423e7bd52ea0bc\nAuthor: Yifan Peng <pengyf21@gmail.com>\nDate:   Mon May 9 22:59:39 2022 -0400\n\n    add quantization to asr_inference\n\ncommit b98fc861939310b73b50f959bc45176da10ef493\nAuthor: kamo-naoyuki <naoyuki.kamo829@gmail.com>\nDate:   Tue May 10 11:52:27 2022 +0900\n\n    fix\n\ncommit 3428f032d58c73902b5e6fe80307eb08cfc64ff6\nMerge: 4ff2ce124 beb336027\nAuthor: Naoyuki Kamo <naoyuki.kamo829@gmail.com>\nDate:   Tue May 10 11:42:23 2022 +0900\n\n    Merge branch 'master' into 1.11.0\n\ncommit 4ff2ce1244e0af72439deaa59226eba434a70618\nAuthor: kamo-naoyuki <naoyuki.kamo829@gmail.com>\nDate:   Tue May 10 11:34:31 2022 +0900\n\n    add pytorch=1.10.1, 1.11.0 to ci configurations\n\ncommit beb3360276aa9ff65fe84f4c5e99c0c063c2a6be\nMerge: 537f9b6c1 79cda74ba\nAuthor: Shinji Watanabe <sw005320@gmail.com>\nDate:   Mon May 9 16:27:37 2022 -0400\n\n    Merge pull request #4347 from YosukeHiguchi/espnet2_maskctc2\n\n    Minor fix for Mask-CTC forward function\n\ncommit 79cda74ba20f0b795251e23a9cb9fd624e2be02d\nAuthor: Yosuke Higuchi <wasapon.dev@gmail.com>\nDate:   Mon May 9 22:43:29 2022 +0900\n\n    add kwargs in forward argument\n\ncommit 537f9b6c14ab195cdcd21c404656c8534295f15d\nMerge: 793b999a5 9e8e75315\nAuthor: Shinji Watanabe <sw005320@gmail.com>\nDate:   Sun May 8 17:34:55 2022 -0400\n\n    Merge pull request #4343 from Emrys365/complex_support\n\n    Fix a bug in stats aggregation when PITSolver is used\n\ncommit 9e8e753154f5f71c9cb26217483427adb278759c\nAuthor: Wangyou Zhang <C0me_On@163.com>\nDate:   Sat May 7 13:16:35 2022 +0800\n\n    Apply black\n\ncommit 5ea4e087a311ab7c798950e68ae92e10b1bb41d8\nAuthor: Wangyou Zhang <C0me_On@163.com>\nDate:   Sat May 7 12:05:49 2022 +0800\n\n    Fix a bug in stats aggregation when PITSolver is used\n\ncommit 6d1bd3a8ef695a75358d019cc1b33100817c0dad\nMerge: eb6dc2d55 793b999a5\nAuthor: Chaitanya Narisetty <cnariset@andrew.cmu.edu>\nDate:   Fri May 6 10:51:14 2022 -0400\n\n    Merge branch 'espnet:master' into st_bugfix\n\ncommit eb6dc2d55faac7e62742d0b7791d8f3a991e91d1\nAuthor: Chaitanya Narisetty <cnariset@andrew.cmu.edu>\nDate:   Fri May 6 10:08:19 2022 -0400\n\n    typo fix\n\ncommit 8c56ee817867358f2a8130372fd914c136bd7a5b\nAuthor: Chaitanya Narisetty <cnariset@andrew.cmu.edu>\nDate:   Fri May 6 08:59:26 2022 -0400\n\n    bug fixes in ST recipes\n\n    * Change sampling frequency in `fbank.conf` and `pitch.conf` in Covost2 recipe\n    * In `run.sh`, if language is low resource, then have more speed perturbations. Fix typos for test sets\n    * In `st.sh`\n      * fix directory naming issues to avoid replacement for different language pairs\n      * Replace `>>` with `>` to replace previous inference results\n      * Fix removing of empty text in stage 4\n      * When removing utterance-ID in `ref.trn.org` or `hyp.trn.org`, the current implementation removes all words in parenthesis instead of removing just the utterance-ID from the end of each line. Fixed this by changing `perl -pe 's/\\([^\\)]+\\)//g;'` to `perl -pe 's/\\([^\\)]+\\)$//g;'`\n\ncommit f7b390582d2d77b113a92a5e52f907d5832d6f04\nAuthor: \u9b4f\u5baa\u8c6a <weixianhao@bytedance.com>\nDate:   Fri May 6 20:18:05 2022 +0800\n\n    change a test file to conform new pypinyin package\n\ncommit b83128fafc913e775a49d37a5cad24a893718020\nAuthor: \u9b4f\u5baa\u8c6a <weixianhao@bytedance.com>\nDate:   Fri May 6 17:54:20 2022 +0800\n\n    Fix missing punctuation\n\ncommit 931fd226babe69b35c6e3a6a288e5e0c901736a1\nAuthor: \u9b4f\u5baa\u8c6a <weixianhao@bytedance.com>\nDate:   Fri May 6 16:54:31 2022 +0800\n\n    reformat\n\ncommit 793b999a50af484a5eaf6227ef7556b48514ef15\nMerge: 4f41a1a06 6d0672882\nAuthor: Shinji Watanabe <sw005320@gmail.com>\nDate:   Thu May 5 21:54:27 2022 -0400\n\n    Merge pull request #4330 from pyf98/show_translation_result\n\n    Update show_translation_result.sh to show all decoding results under the given exp directory\n\ncommit 4f41a1a06ecd96af567bc73d1d6734531dd3cb44\nMerge: a49cc60cd f0d7cc2bf\nAuthor: Shinji Watanabe <sw005320@gmail.com>\nDate:   Thu May 5 21:53:10 2022 -0400\n\n    Merge pull request #4329 from roshansh-cmu/wandb\n\n    Wandb Minor Fix for Model Resume\n\ncommit a49cc60cda690e448d925c3e2bfdc5a85b3f5cd3\nMerge: de624ed58 21fba33c6\nAuthor: Shinji Watanabe <sw005320@gmail.com>\nDate:   Thu May 5 21:51:43 2022 -0400\n\n    Merge pull request #4338 from espnet/ftshijt-patch-1\n\n    Fix typo\n\ncommit 21fba33c69d9199c6897ffc6da8433ab94b7051d\nAuthor: Jiatong <728307998@qq.com>\nDate:   Thu May 5 21:25:10 2022 -0400\n\n    Fix typo\n\ncommit de624ed58953d17907fb241c5cb6514f27510162\nMerge: b757b89d4 fe288000d\nAuthor: Shinji Watanabe <sw005320@gmail.com>\nDate:   Thu May 5 16:10:44 2022 -0400\n\n    Merge pull request #4332 from simpleoier/chime6\n\n    add chime6 recipe\n\ncommit c504336661fa3cefa60b2214da39fbf0118fce49\nMerge: 50269e8b4 b757b89d4\nAuthor: \u9b4f\u5baa\u8c6a <weixianhao@bytedance.com>\nDate:   Wed May 4 21:58:43 2022 +0800\n\n    Merge remote-tracking branch 'upstream/master'\n\ncommit fe288000dbde339b4c386408af488af4bac423b6\nAuthor: simpleoier <netnetchangxk@gmail.com>\nDate:   Tue May 3 17:51:36 2022 -0400\n\n    add egs2/chime6/asr1 recipe\n\ncommit 6d06728820576ed96a729b3477a29ccab12542f1\nAuthor: Yifan Peng <pengyf21@gmail.com>\nDate:   Sat Apr 30 20:53:52 2022 -0400\n\n    fix ci\n\ncommit 72333a892d16ef913633111120f159008812795e\nAuthor: Yifan Peng <pengyf21@gmail.com>\nDate:   Sat Apr 30 20:34:06 2022 -0400\n\n    fix ci\n\ncommit f15e6adaafaca380ea152cf2b38d604eea3603d3\nAuthor: Yifan Peng <pengyf21@gmail.com>\nDate:   Sat Apr 30 18:54:37 2022 -0400\n\n    quote expansion\n\ncommit f6731cd97565bf4108f1064a83f1fffea4ca351b\nAuthor: Yifan Peng <pengyf21@gmail.com>\nDate:   Sat Apr 30 18:43:49 2022 -0400\n\n    update mt.sh\n\ncommit 552060a1d5670d0fd838bd8e10fc9e47a1122346\nAuthor: Yifan Peng <pengyf21@gmail.com>\nDate:   Sat Apr 30 18:41:41 2022 -0400\n\n    update show translation result\n\ncommit f0d7cc2bfbc8f68c42820262a8ca6e4906f3818b\nAuthor: Roshan S Sharma <36464960+roshansh-cmu@users.noreply.github.com>\nDate:   Fri Apr 29 20:57:18 2022 -0400\n\n    Delete resnet.py\n\ncommit 79c071e9ecd268a1963e8ca3863a2f5eaf34a525\nAuthor: roshansh-cmu <roshansh@andrew.cmu.edu>\nDate:   Fri Apr 29 20:54:37 2022 -0400\n\n    Wandb minor fix for model resume\n\ncommit ffe7c58ac8a255769f6952b8c7225a5158a00068\nMerge: 835033c70 b757b89d4\nAuthor: Roshan S Sharma <36464960+roshansh-cmu@users.noreply.github.com>\nDate:   Fri Apr 29 20:45:47 2022 -0400\n\n    Merge branch 'espnet:master' into master\n\ncommit b757b89d45d5574cebf44e225cbe32e3e9e4f522\nMerge: 930b380de 664414c8f\nAuthor: Tomoki Hayashi <hayashi.tomoki@g.sp.m.is.nagoya-u.ac.jp>\nDate:   Fri Apr 29 16:11:56 2022 +0900\n\n    Merge pull request #4320 from cadia-lvl/add-progress-bar\n\ncommit 930b380de02b31f8d2da4144d471e60ed41d70fc\nMerge: 2a48371b8 de81cf979\nAuthor: Shinji Watanabe <sw005320@gmail.com>\nDate:   Thu Apr 28 16:30:34 2022 -0400\n\n    Merge pull request #4316 from simpleoier/enh_s2t\n\n    add egs2/chime4/enh_asr1 recipe and results\n\ncommit de81cf979fd61ab13e0ab0fe0432fbbaa4776be3\nAuthor: simpleoier <netnetchangxk@gmail.com>\nDate:   Thu Apr 28 11:54:10 2022 -0400\n\n    update egs2/chime4/enh_asr1/README.md and related enh1, asr1 configs.\n\ncommit 664414c8f27d5148377ffa733c7f8369eaf7ebd4\nAuthor: kan-bayashi <hayashi.tomoki@g.sp.m.is.nagoya-u.ac.jp>\nDate:   Thu Apr 28 21:31:45 2022 +0900\n\n    fixed flake8\n\ncommit 2a48371b8ceffd4899dc08f2fc5df092ed1d8a93\nMerge: 72c1d8f2b 5a9178236\nAuthor: Shinji Watanabe <sw005320@gmail.com>\nDate:   Thu Apr 28 07:40:31 2022 -0400\n\n    Merge pull request #4243 from D-Keqi/master\n\n    Add streaming ST/SLU\n\ncommit 72c1d8f2bde996febde895c603722dba1634cf20\nMerge: b7f0a5a6f 406656cdc\nAuthor: Shinji Watanabe <sw005320@gmail.com>\nDate:   Thu Apr 28 07:37:23 2022 -0400\n\n    Merge pull request #4110 from earthmanylf/dpclanddan\n\n    Merge Deep Clustering and Deep Attractor Network to enh separator\n\ncommit b7f0a5a6fc227049c1b8735d8ac4362c27333022\nMerge: 44971ff96 2d950f962\nAuthor: Shinji Watanabe <sw005320@gmail.com>\nDate:   Thu Apr 28 07:33:11 2022 -0400\n\n    Merge pull request #4328 from Emrys365/egs2_aishell4\n\n    Rename egs2/clarity21/enh_2021 to egs2/clarity21/enh1\n\ncommit 2d950f96223fd4823203b6a4e9afdc86b2357e7e\nAuthor: Wangyou Zhang <C0me_On@163.com>\nDate:   Thu Apr 28 16:58:26 2022 +0800\n\n    Rename egs2/clarity21/enh_2021/\n\ncommit 2b663318cd1773fb8685b1e03295b6bc6889c283\nAuthor: simpleoier <netnetchangxk@gmail.com>\nDate:   Thu Apr 28 00:59:22 2022 -0400\n\n    fix small bugs and add CHiME4 enh_asr1 recipe & results\n\ncommit 406656cdcb668a77910074b4382b557b6f845c54\nAuthor: earthmanylf <411214987@qq.com>\nDate:   Thu Apr 28 11:10:11 2022 +0800\n\n    Add custom name in __init__ in tf_domain.py; Merge test_dpcl_loss.py to test_tf_domain.py\n\ncommit 5a9178236bc1a7a4a5db82ad84773d9c43199c81\nAuthor: D-Keqi <61508571+D-Keqi@users.noreply.github.com>\nDate:   Thu Apr 28 10:31:29 2022 +0800\n\n    use the another st_inference\n\ncommit 9e4bb7fa88e8c63e69712e77c5b783c64181fbc2\nAuthor: D-Keqi <61508571+D-Keqi@users.noreply.github.com>\nDate:   Thu Apr 28 10:13:59 2022 +0800\n\n    fix conflict\n\ncommit 21d2ac6331ec0779b8ec2d3265ccdfabfaacbd61\nMerge: b801ddc96 44971ff96\nAuthor: D-Keqi <61508571+D-Keqi@users.noreply.github.com>\nDate:   Thu Apr 28 10:12:15 2022 +0800\n\n    Merge pull request #17 from espnet/master\n\n    merge the latest espnet\n\ncommit b801ddc96aedd2a9b4e63d2e3612c3cf7417799a\nAuthor: D-Keqi <61508571+D-Keqi@users.noreply.github.com>\nDate:   Thu Apr 28 10:11:11 2022 +0800\n\n    Add files via upload\n\ncommit 316cf02340a627548b71317ba04afac457f68101\nAuthor: D-Keqi <61508571+D-Keqi@users.noreply.github.com>\nDate:   Thu Apr 28 10:04:29 2022 +0800\n\n    fix conflict\n\ncommit 9b33b791d7c7b509f514b7540a8ec5dd7fff9d0b\nAuthor: earthmanylf <411214987@qq.com>\nDate:   Wed Apr 27 23:22:22 2022 +0800\n\n    Fix format\n\ncommit 346a42467881e5bbd9414200dd3c915935eb56dd\nAuthor: earthmanylf <411214987@qq.com>\nDate:   Wed Apr 27 22:37:22 2022 +0800\n\n    Fix format\n\ncommit 44971ff962aae30c962226f1ba3d87de057ac00e\nMerge: 0ae377389 c4b93e8fd\nAuthor: Jiatong <728307998@qq.com>\nDate:   Wed Apr 27 10:13:03 2022 -0400\n\n    Merge pull request #4324 from ftshijt/master\n\n    Add Test Functions for ST Train and Inference\n\ncommit 0d3be31602306650fee44c367cbc788e0b0462db\nAuthor: earthmanylf <411214987@qq.com>\nDate:   Wed Apr 27 22:09:12 2022 +0800\n\n    Fix format\n\ncommit b24d108b0d7d501b2faa1971feca5a281198d351\nMerge: 4c679c061 f1312a8b2\nAuthor: earthmanylf <411214987@qq.com>\nDate:   Wed Apr 27 21:29:33 2022 +0800\n\n    Fix conflict\n\ncommit 4c679c061c1a0be411f613bdbdeb7849af19edf4\nMerge: a90e2ecef 0ae377389\nAuthor: earthmanylf <411214987@qq.com>\nDate:   Wed Apr 27 21:15:33 2022 +0800\n\n    Fix conflict\n\ncommit 10e6c7ea2e5783442631213dfc20dd7b9543839d\nAuthor: Gunnar Thor <ornolfsson@gmail.com>\nDate:   Wed Apr 27 09:30:47 2022 +0000\n\n    split docstring to conform with linter\n\ncommit c4b93e8fd870954ec2649abc3fc6172d78d92166\nAuthor: ftshijt <728307998@qq.com>\nDate:   Wed Apr 27 01:49:00 2022 -0400\n\n    apply black\n\ncommit 04d0cd84878701a0ff5e09933581c98ef7e0adac\nMerge: 72b6b21d5 4a12ab320\nAuthor: ftshijt <728307998@qq.com>\nDate:   Wed Apr 27 01:27:36 2022 -0400\n\n    Merge branch 'master' of https://github.com/ftshijt/espnet\n\ncommit 72b6b21d509a26d30a454525811c3530ee6b297b\nAuthor: ftshijt <728307998@qq.com>\nDate:   Wed Apr 27 01:27:09 2022 -0400\n\n    add st unit test\n\ncommit d1e8ac3d8717f8717fb645592c25ee8cafc4060c\nAuthor: ftshijt <728307998@qq.com>\nDate:   Wed Apr 27 01:15:18 2022 -0400\n\n    update test\n\ncommit 5fb7dd619293dcd1cc02c6371c4079c22a40a23b\nAuthor: ftshijt <728307998@qq.com>\nDate:   Wed Apr 27 00:53:46 2022 -0400\n\n    remove requirement for src_token_list\n\ncommit 4118b1b21f25fc7d8aa56658cd7ff691684884be\nAuthor: D-Keqi <61508571+D-Keqi@users.noreply.github.com>\nDate:   Wed Apr 27 10:31:42 2022 +0800\n\n    fix conflict\n\ncommit 5436784241eaa4f60e0990627758a841e7927651\nAuthor: D-Keqi <61508571+D-Keqi@users.noreply.github.com>\nDate:   Wed Apr 27 10:06:19 2022 +0800\n\n    Update test_integration_espnet2.sh\n\ncommit 469168b4451b4922306b3393598d199a514acd50\nAuthor: D-Keqi <61508571+D-Keqi@users.noreply.github.com>\nDate:   Wed Apr 27 10:04:56 2022 +0800\n\n    fix issue\n\ncommit 06ddfe19a346f1ea8b620e4eb5bf61bfdcfc3309\nAuthor: D-Keqi <61508571+D-Keqi@users.noreply.github.com>\nDate:   Wed Apr 27 10:01:38 2022 +0800\n\n    fix conflict\n\ncommit 5a81f91ce6734745272e6d960261797cfcb3dd41\nAuthor: D-Keqi <61508571+D-Keqi@users.noreply.github.com>\nDate:   Wed Apr 27 09:57:18 2022 +0800\n\n    fix conflict\n\ncommit 91d48d920c229af3902fc05c361ba1b5f1636c67\nAuthor: Gunnar Thor <ornolfsson@gmail.com>\nDate:   Tue Apr 26 22:21:13 2022 +0000\n\n    applied black\n\ncommit ec518ccc74b85e3b50304ab70ae5a1f069df0038\nAuthor: Gunnar Thor <ornolfsson@gmail.com>\nDate:   Wed Feb 23 11:31:56 2022 +0000\n\n    Add progress bar to phonemization\n\ncommit f1312a8b2eeecf57f740b963b832dc4a806ac5f8\nAuthor: earthmanylf <43513215+earthmanylf@users.noreply.github.com>\nDate:   Mon Apr 25 10:37:19 2022 +0800\n\n    Update README.md\n\n    Co-authored-by: Wangyou Zhang <C0me_On@163.com>\n\ncommit a90e2ecef4854884dc525345a466f33fce79bd0a\nAuthor: earthmanylf <411214987@qq.com>\nDate:   Sun Apr 24 22:55:54 2022 +0800\n\n    Fix format problems\n\ncommit be0112bf99c7caf787feba50c7dbc47a1879dbfb\nAuthor: earthmanylf <411214987@qq.com>\nDate:   Sun Apr 24 22:06:45 2022 +0800\n\n    Fix format problems\n\ncommit 16acdadb6dba56d0f91a3132b540a01c9bd25c89\nMerge: feb28baf9 f6a2522ad\nAuthor: earthmanylf <411214987@qq.com>\nDate:   Sun Apr 24 21:14:02 2022 +0800\n\n    Fix conflict\n\ncommit 95be28ab0e48415922677a92639833d648f3844c\nAuthor: D-Keqi <61508571+D-Keqi@users.noreply.github.com>\nDate:   Sat Apr 23 14:47:11 2022 +0800\n\n    Fix CI\n\ncommit a0966f61701041228c96924359b8e6678960a31a\nAuthor: D-Keqi <61508571+D-Keqi@users.noreply.github.com>\nDate:   Sat Apr 23 14:46:10 2022 +0800\n\n    Fix CI\n\ncommit 1daecd4570f477da905e4365ff30e4c0be53ca44\nAuthor: D-Keqi <61508571+D-Keqi@users.noreply.github.com>\nDate:   Sat Apr 23 14:44:21 2022 +0800\n\n    fix CI\n\ncommit 7261735b82173ae5ac377844fad2f3b9289e08ec\nMerge: 809106e2a f6a2522ad\nAuthor: D-Keqi <61508571+D-Keqi@users.noreply.github.com>\nDate:   Sat Apr 23 14:21:06 2022 +0800\n\n    Merge pull request #15 from espnet/master\n\n    Merging the latest ESPnet\n\ncommit 809106e2a512990b30fd1afcf2c7bf897d185d58\nAuthor: D-Keqi <61508571+D-Keqi@users.noreply.github.com>\nDate:   Sat Apr 23 12:33:18 2022 +0800\n\n    show the log result\n\ncommit 65b53563cac0fdc09d653112f85dd735313cb650\nAuthor: D-Keqi <61508571+D-Keqi@users.noreply.github.com>\nDate:   Sat Apr 23 11:10:41 2022 +0800\n\n    show the error report in the log\n\ncommit 36bdfcbfd0731e543db130b6fb756e140f9f2cb2\nAuthor: D-Keqi <61508571+D-Keqi@users.noreply.github.com>\nDate:   Thu Apr 21 15:21:07 2022 +0800\n\n    fix ci\n\ncommit c8e05efd90ea4c9f775b149916d05f0f74092157\nAuthor: D-Keqi <61508571+D-Keqi@users.noreply.github.com>\nDate:   Thu Apr 21 11:30:54 2022 +0800\n\n    fix ci\n\ncommit 4831a6671728e52f0b2a0766a7c4cb60dd3d470f\nAuthor: D-Keqi <61508571+D-Keqi@users.noreply.github.com>\nDate:   Wed Apr 20 20:34:26 2022 +0800\n\n    fix CI\n\ncommit 26fc7e1b41c57dc5c6a6882fe20a8847ee5a055c\nAuthor: D-Keqi <61508571+D-Keqi@users.noreply.github.com>\nDate:   Wed Apr 20 16:37:29 2022 +0800\n\n    Add files via upload\n\ncommit b7c7bf13f9df6d9c09888c21c5c071c15f1023bc\nAuthor: D-Keqi <61508571+D-Keqi@users.noreply.github.com>\nDate:   Wed Apr 20 15:19:37 2022 +0800\n\n    fix ci\n\ncommit 2b1b6bbef15553a11862a9c74352bed95412337d\nAuthor: D-Keqi <61508571+D-Keqi@users.noreply.github.com>\nDate:   Wed Apr 20 11:33:40 2022 +0800\n\n    fix fbank_pitch issue\n\ncommit 0d5736fc393332465ae49a620392735a22312c97\nAuthor: D-Keqi <61508571+D-Keqi@users.noreply.github.com>\nDate:   Wed Apr 20 11:33:21 2022 +0800\n\n    fix fbank_pitch issue\n\ncommit 835033c70cb2821340481b6e3f695d3afe6cbcd0\nMerge: fcf13c412 42eb3108a\nAuthor: Roshan S Sharma <36464960+roshansh-cmu@users.noreply.github.com>\nDate:   Tue Apr 19 07:36:09 2022 -0400\n\n    Merge branch 'espnet:master' into master\n\ncommit 70c1980b7c8d396bd5d05d8eba50bf90a84bff55\nAuthor: D-Keqi <462975470@qq.com>\nDate:   Tue Apr 19 19:01:41 2022 +0800\n\n    fix CI\n\ncommit fabb3a1fd17b10cbcf252240e0c40243a8c2f971\nAuthor: D-Keqi <61508571+D-Keqi@users.noreply.github.com>\nDate:   Tue Apr 19 16:39:39 2022 +0800\n\n    update the test_integration_espnet2\n\ncommit c08e023e429ad90399f3722d825ccaa33c84b291\nAuthor: D-Keqi <61508571+D-Keqi@users.noreply.github.com>\nDate:   Tue Apr 19 16:36:09 2022 +0800\n\n    Update and rename tmp to path.sh\n\ncommit 838d2ecfa767585a3df0161388f5dd5de426695a\nAuthor: D-Keqi <61508571+D-Keqi@users.noreply.github.com>\nDate:   Tue Apr 19 16:35:08 2022 +0800\n\n    Add files via upload\n\ncommit 62162ae8938d71f0f9040ee1e27eb40c83882808\nAuthor: D-Keqi <61508571+D-Keqi@users.noreply.github.com>\nDate:   Tue Apr 19 16:33:31 2022 +0800\n\n    Create tmp\n\ncommit 9a5585e282b68d44921879385f5a3796bacd1fdb\nAuthor: D-Keqi <61508571+D-Keqi@users.noreply.github.com>\nDate:   Tue Apr 19 16:33:00 2022 +0800\n\n    Delete t\n\ncommit 349f4ab3498bc296d46ad4b42a77fda25d5e2286\nAuthor: D-Keqi <61508571+D-Keqi@users.noreply.github.com>\nDate:   Tue Apr 19 16:31:43 2022 +0800\n\n    add conf\n\ncommit e3486d24210cb53491518d913df2268a2f03eded\nAuthor: D-Keqi <61508571+D-Keqi@users.noreply.github.com>\nDate:   Tue Apr 19 16:28:12 2022 +0800\n\n    Create t\n\ncommit 652cf1774dd442d55082652713bbadbc4b6946a6\nAuthor: D-Keqi <61508571+D-Keqi@users.noreply.github.com>\nDate:   Tue Apr 19 16:27:47 2022 +0800\n\n    Delete tmp\n\ncommit 48fcab7a8d8b0ad1a97798fa823d315aa7708d3d\nAuthor: D-Keqi <61508571+D-Keqi@users.noreply.github.com>\nDate:   Tue Apr 19 16:27:12 2022 +0800\n\n    add st1 of mini_an4\n\ncommit 1800b0be298111842ab2a3cf5f39a9ac79c3a86f\nAuthor: D-Keqi <61508571+D-Keqi@users.noreply.github.com>\nDate:   Tue Apr 19 16:25:21 2022 +0800\n\n    Create tmp\n\ncommit 0a1d05b61d611ca8a7b7ca1815ae089781cbdfde\nMerge: 73ca6e4e4 952a70a70\nAuthor: D-Keqi <61508571+D-Keqi@users.noreply.github.com>\nDate:   Wed Apr 13 10:20:46 2022 +0800\n\n    Merge pull request #14 from espnet/master\n\n    Merge the latest ESPnet\n\ncommit 73ca6e4e4baddd5f3fb6075788ed3e902021b9c8\nAuthor: D-Keqi <61508571+D-Keqi@users.noreply.github.com>\nDate:   Thu Apr 7 17:59:52 2022 +0800\n\n    fix ci\n\n    fix ci\n\ncommit acd3e0acdc4d4c6eadfa531711906aa29ffb01a0\nAuthor: D-Keqi <61508571+D-Keqi@users.noreply.github.com>\nDate:   Thu Apr 7 17:58:34 2022 +0800\n\n    fix CI\n\n    fix CI\n\ncommit e6da9baea12c6383282bdb716745060be5011a08\nAuthor: D-Keqi <61508571+D-Keqi@users.noreply.github.com>\nDate:   Thu Apr 7 17:16:45 2022 +0800\n\n    Add files via upload\n\ncommit fc45fa368bc55b92f94e9ae6f9a6953728f3c894\nAuthor: D-Keqi <61508571+D-Keqi@users.noreply.github.com>\nDate:   Thu Apr 7 17:13:53 2022 +0800\n\n    Delete README.md\n\ncommit 5b8c0b567f6b172e2112c5460c45e44b934478a6\nAuthor: D-Keqi <61508571+D-Keqi@users.noreply.github.com>\nDate:   Thu Apr 7 17:13:11 2022 +0800\n\n    Delete egs2/chime4/asr1/exp/asr_train_asr_streaming_transformer_raw_en_char/decode_asr_streamindt05_real_beamformit_2micsg_lm_lm_train_lm_en_char_valid.loss.ave_asr_model_valid.acc.ave directory\n\ncommit 87ac110aaf70e2c339bac6ed7c5b60a856acc535\nAuthor: D-Keqi <61508571+D-Keqi@users.noreply.github.com>\nDate:   Thu Apr 7 17:10:14 2022 +0800\n\n    streaming slu\n\ncommit 7b7fde9752cd9cd4905d642996215a158bf8d026\nAuthor: D-Keqi <61508571+D-Keqi@users.noreply.github.com>\nDate:   Thu Apr 7 17:09:27 2022 +0800\n\n    streaming slu\n\ncommit fcd129620bbbc063dd918b83961d568ad694e45a\nAuthor: D-Keqi <61508571+D-Keqi@users.noreply.github.com>\nDate:   Thu Apr 7 17:08:55 2022 +0800\n\n    streaming st\n\ncommit 17fe79ca89b496e4f9b6b4caaa2497816d4855b3\nAuthor: D-Keqi <61508571+D-Keqi@users.noreply.github.com>\nDate:   Thu Apr 7 17:07:28 2022 +0800\n\n    streaming st\n\ncommit 812a527bb836a2fbd12ceb6d3bcabcc728d88427\nAuthor: D-Keqi <61508571+D-Keqi@users.noreply.github.com>\nDate:   Thu Apr 7 17:06:31 2022 +0800\n\n    streaming st\n\ncommit e69a6d8efcd1ae57aca6315d70a20e484d360f7f\nAuthor: D-Keqi <61508571+D-Keqi@users.noreply.github.com>\nDate:   Thu Apr 7 17:05:25 2022 +0800\n\n    streaming st\n\ncommit e488037b8d9b3e46476874f62b095ae5b7323e19\nMerge: 9fb445053 189e1593d\nAuthor: D-Keqi <61508571+D-Keqi@users.noreply.github.com>\nDate:   Thu Apr 7 15:32:57 2022 +0800\n\n    Merge pull request #13 from espnet/master\n\n    Update lastest espnet\n\ncommit fcf13c412842d57cf48580dd89ff0d1fc5e6c3e0\nMerge: 39700a054 c4aba12f9\nAuthor: Roshan S Sharma <36464960+roshansh-cmu@users.noreply.github.com>\nDate:   Wed Apr 6 13:35:13 2022 -0400\n\n    Merge branch 'espnet:master' into master\n\ncommit feb28baf9dd6af564fe30920c1c6e70c2258e0de\nMerge: 3e6167c51 c4aba12f9\nAuthor: earthmanylf <411214987@qq.com>\nDate:   Wed Apr 6 19:24:06 2022 +0800\n\n    Add deep clustering end-to-end training method\n\ncommit 50269e8b4dd0696d02e5da9f70c2d7952a26f392\nAuthor: WeiGodHorse <weigodhorse@gmail.com>\nDate:   Fri Mar 25 22:58:41 2022 +0800\n\n    fix a bug in Mandarin pypinyin_g2p_phone\n\ncommit 39700a054ac5ed718a1eb74cef9b64b2144b727c\nMerge: aa706c512 14c635069\nAuthor: Roshan S Sharma <36464960+roshansh-cmu@users.noreply.github.com>\nDate:   Thu Mar 24 17:42:11 2022 -0400\n\n    Merge branch 'espnet:master' into master\n\ncommit aa706c5122391feee57d4db121a403dfd8ea0ab0\nMerge: ab2fa25af 350af365f\nAuthor: Roshan S Sharma <36464960+roshansh-cmu@users.noreply.github.com>\nDate:   Wed Mar 23 23:34:17 2022 -0400\n\n    Merge branch 'espnet:master' into master\n\ncommit ab2fa25af6dffce3ecdf3e92adaa171d3d156d50\nMerge: de5e7139b cb8181a99\nAuthor: Roshan S Sharma <36464960+roshansh-cmu@users.noreply.github.com>\nDate:   Tue Mar 8 16:03:38 2022 -0500\n\n    Merge branch 'espnet:master' into master\n\ncommit de5e7139b65549adfcac58cb0ee23c32c50634ea\nMerge: 5ef36bcae 1bac0f080\nAuthor: Roshan S Sharma <36464960+roshansh-cmu@users.noreply.github.com>\nDate:   Tue Mar 8 15:09:20 2022 -0500\n\n    Merge branch 'espnet:master' into master\n\ncommit 5ef36bcae3fac1792ccc2aae6b7dbab715f094fe\nMerge: 597cd7bd8 0c246e23c\nAuthor: Roshan S Sharma <36464960+roshansh-cmu@users.noreply.github.com>\nDate:   Tue Mar 8 13:35:27 2022 -0500\n\n    Merge branch 'espnet:master' into master\n\ncommit 597cd7bd8a0efbe82733d19774297ab90f5c659f\nMerge: 6625f9056 f16e579e2\nAuthor: Roshan S Sharma <36464960+roshansh-cmu@users.noreply.github.com>\nDate:   Mon Mar 7 21:54:06 2022 -0500\n\n    Merge branch 'espnet:master' into master\n\ncommit 6625f9056b5087aeb13a2214c770d586c067f5e3\nMerge: 5f237866b 5e070668e\nAuthor: Roshan S Sharma <36464960+roshansh-cmu@users.noreply.github.com>\nDate:   Mon Mar 7 13:35:03 2022 -0500\n\n    Merge branch 'espnet:master' into master\n\ncommit 3e6167c51df23b7629d7830e81e8cf4ea52032fc\nAuthor: earthmanylf <411214987@qq.com>\nDate:   Mon Mar 7 20:03:31 2022 +0800\n\n    Fixed format in some files\n\ncommit 294373a121cf0766efe623dc56b12d0990a77c93\nAuthor: earthmanylf <411214987@qq.com>\nDate:   Mon Mar 7 18:26:49 2022 +0800\n\n    Update code and add comments in separator\n\ncommit 5f86c1104cbce4275043e11050b69191834ddbc0\nMerge: 7aa90b584 6f429608b\nAuthor: earthmanylf <411214987@qq.com>\nDate:   Mon Mar 7 18:06:10 2022 +0800\n\n    Add experiment result in egs2/wsj0_2mix/enh1/README.md; Update code in some files\n\ncommit 5f237866b360028676c7b9e903d15839cdaa0113\nMerge: 66c1a798d 6f429608b\nAuthor: Roshan S Sharma <36464960+roshansh-cmu@users.noreply.github.com>\nDate:   Sun Mar 6 19:26:35 2022 -0500\n\n    Merge branch 'espnet:master' into master\n\ncommit 66c1a798d15f531b4c4b4c1e02cfd1eda6813f92\nMerge: 5c5eb0292 a04a98c98\nAuthor: Roshan S Sharma <36464960+roshansh-cmu@users.noreply.github.com>\nDate:   Thu Mar 3 18:14:47 2022 -0500\n\n    Merge branch 'espnet:master' into master\n\ncommit 7aa90b5844ba1d0050cfd737b2a2fabe9abd5d62\nMerge: 5f7e2e714 b274c4ea6\nAuthor: earthmanylf <411214987@qq.com>\nDate:   Thu Mar 3 16:20:25 2022 +0800\n\n    Merge branch 'master' of github.com:espnet/espnet into dpclanddan\n\ncommit 5c5eb0292e28c19345fc71d456348f6353f2e2a4\nMerge: bd8e400fa 9863980d2\nAuthor: Roshan S Sharma <36464960+roshansh-cmu@users.noreply.github.com>\nDate:   Wed Mar 2 12:13:35 2022 -0500\n\n    Merge branch 'espnet:master' into master\n\ncommit bd8e400fa37ebc1b77f7a938ae9275bb18de6fe5\nMerge: 58aec432d 7999009d5\nAuthor: Roshan S Sharma <36464960+roshansh-cmu@users.noreply.github.com>\nDate:   Mon Feb 28 20:37:32 2022 -0500\n\n    Merge branch 'espnet:master' into master\n\ncommit 5f7e2e7140cc7204acecda90a6ff1d5379967da6\nMerge: d3acdcc3b 637d8c333\nAuthor: earthmanylf <411214987@qq.com>\nDate:   Sun Feb 27 13:19:45 2022 +0800\n\n    Merge branch 'master' of github.com:espnet/espnet into dpclanddan\n\ncommit d3acdcc3bd537cf3f50c8d5c4642dfc488daa656\nAuthor: earthmanylf <411214987@qq.com>\nDate:   Fri Feb 25 18:32:30 2022 +0800\n\n    fix bugs of test_dan_separator.py\n\ncommit c54d9a4087106b56ab5ce4ec9758aeb74bca0b4c\nAuthor: earthmanylf <411214987@qq.com>\nDate:   Fri Feb 25 16:00:30 2022 +0800\n\n    add subs to the abs_separator.py\n\ncommit c1d9be5f4f9eb32bc75fb7a8b2fe406aa997946c\nAuthor: earthmanylf <411214987@qq.com>\nDate:   Fri Feb 25 15:30:46 2022 +0800\n\n    update for dpcl and dan\n\ncommit 58aec432d97300ec12494676a19900a08a950827\nMerge: 23a537e2a 9c24b3add\nAuthor: Roshan S Sharma <36464960+roshansh-cmu@users.noreply.github.com>\nDate:   Wed Feb 23 16:17:09 2022 -0500\n\n    Merge branch 'espnet:master' into master\n\ncommit 23a537e2ad1ee9af7e8016054208d5ce1cc572fd\nAuthor: roshansh-cmu <roshansh@andrew.cmu.edu>\nDate:   Tue Feb 22 06:50:03 2022 -0500\n\n    black fix\n\ncommit 8572a57af47ef72e9f010601483b31eb96baf03f\nMerge: 969b333d9 650472b45\nAuthor: roshansh-cmu <roshansh@andrew.cmu.edu>\nDate:   Mon Feb 21 22:35:49 2022 -0500\n\n    Mergefix\n\ncommit ee20e18a5f0eef55c8b0709e1e6b9bcddf10e4e6\nMerge: 63f88c02b a3e1543e9\nAuthor: earthmanylf <43513215+earthmanylf@users.noreply.github.com>\nDate:   Wed Feb 16 14:29:36 2022 +0800\n\n    Merge pull request #1 from espnet/master\n\n    Merge from upstream\n\ncommit 9fb445053f999b64350e5e7a56a1699a727ed125\nAuthor: D-Keqi <61508571+D-Keqi@users.noreply.github.com>\nDate:   Wed Sep 15 00:30:05 2021 +0800\n\n    Update README.md\n\ncommit 8c6d3e1614a247b78f1b17ff2c6ef3b3725b166a\nAuthor: D-Keqi <61508571+D-Keqi@users.noreply.github.com>\nDate:   Wed Sep 15 00:29:31 2021 +0800\n\n    Update README.md\n\ncommit 2411dbb82b08aee182df0738a47d7f6f44bdcea8\nAuthor: D-Keqi <61508571+D-Keqi@users.noreply.github.com>\nDate:   Mon Sep 13 13:08:52 2021 +0800\n\n    Update README.md\n\ncommit 3edc1a6d816428b3e4e099271dc51c117b9c8d3b\nAuthor: D-Keqi <61508571+D-Keqi@users.noreply.github.com>\nDate:   Mon Sep 13 13:08:25 2021 +0800\n\n    Update README.md\n\ncommit d4d4b7e450992867bc0ee91ffb467ec38ad6981c\nAuthor: D-Keqi <61508571+D-Keqi@users.noreply.github.com>\nDate:   Sat Sep 11 23:11:39 2021 +0800\n\n    Update README.md\n\ncommit 885ab0552dc26076b0b581eb88813f426179fdcb\nAuthor: D-Keqi <61508571+D-Keqi@users.noreply.github.com>\nDate:   Sat Sep 4 10:48:05 2021 +0800\n\n    add results\n\ncommit dfba960da5e60cd9d78c439b7fa0e400332fbe46\nAuthor: D-Keqi <61508571+D-Keqi@users.noreply.github.com>\nDate:   Sat Sep 4 10:43:36 2021 +0800\n\n    create exp\n\ncommit 391d7c78f310313ca78abc1b3341183a15336579\nAuthor: D-Keqi <61508571+D-Keqi@users.noreply.github.com>\nDate:   Sat Sep 4 10:40:23 2021 +0800\n\n    steaming results\n\n",
        "label": "",
        "answer": "no",
        "change": [
            "class Reporter:",
            "seconds=time.perf_counter() - sub_reporter.start_time",
            ")",
            "stats[\"total_count\"] = sub_reporter.total_count",
            "-        if LooseVersion(torch.__version__) >= LooseVersion(\"1.4.0\"):",
            "+        if V(torch.__version__) >= V(\"1.4.0\"):",
            "if torch.cuda.is_initialized():",
            "stats[\"gpu_max_cached_mem_GB\"] = (",
            "torch.cuda.max_memory_reserved() / 2**30"
        ]
    },
    {
        "number": 9289,
        "comments": "",
        "commit_message": "Summaries completely changed, distributed mode incompletely changed, various fixes\n\n",
        "label": "",
        "answer": "no",
        "change": [
            "class TFOptimizer(Optimizer):",
            "loss = fn_loss()",
            "",
            "with tf.control_dependencies(control_inputs=(loss,)):",
            "-            vars_before = [tf.add(x=var, y=0.0) for var in variables]",
            "+            vars_before = [var + 0.0 for var in variables]",
            "",
            "with tf.control_dependencies(control_inputs=vars_before):",
            "applied = self.optimizer.minimize(loss=loss, var_list=variables)"
        ]
    },
    {
        "number": 9290,
        "comments": "",
        "commit_message": "for discussion: incorporate black code formatter (#3308)\n\n* setup files\n\n* run black\n\n* undo\n\n* update CONTRIBUTING.md\n\n* fix quotes in test_other_modules\n\n* make flake8 happy\n\n* set black to 100 characters per line\n\n* move type: ignore to where mypy wants them\n\n* more flake8\n\n",
        "label": "",
        "answer": "no",
        "change": [
            "from allennlp.modules.attention.cosine_attention import CosineAttention",
            "",
            "",
            "class TestCosineAttention(AllenNlpTestCase):",
            "-",
            "def test_can_init_cosine(self):",
            "legacy_attention = Attention.from_params(Params({\"type\": \"cosine\"}))",
            "isinstance(legacy_attention, CosineAttention)",
            "",
            "def test_cosine_similarity(self):",
            "linear = CosineAttention(normalize=False)",
            "-        output = linear(torch.FloatTensor([[0, 0, 0], [1, 1, 1]]),",
            "-                        torch.FloatTensor([[[1, 2, 3], [4, 5, 6]], [[7, 8, 9], [10, 11, 12]]]))",
            "+        output = linear(",
            "+            torch.FloatTensor([[0, 0, 0], [1, 1, 1]]),",
            "+            torch.FloatTensor([[[1, 2, 3], [4, 5, 6]], [[7, 8, 9], [10, 11, 12]]]),",
            "+        )",
            "",
            "assert_almost_equal(output.numpy(), numpy.array([[0.0, 0.0], [0.9948, 0.9973]]), decimal=2)"
        ]
    },
    {
        "number": 9301,
        "comments": "",
        "commit_message": "fix all tests\n\n",
        "label": "",
        "answer": "yes",
        "change": [
            "class ShaDowKHopSampler(torch.utils.data.DataLoader):",
            "sparse_sizes=(n_id.numel(), n_id.numel()),",
            "is_sorted=True)",
            "",
            "-        batch = Batch(torch.ops.torch_sparse.ptr2ind(ptr, n_id.numel()), ptr)",
            "+        batch = Batch(batch=torch.ops.torch_sparse.ptr2ind(ptr, n_id.numel()),",
            "+                      ptr=ptr)",
            "batch.root_n_id = root_n_id",
            "",
            "if self.is_sparse_tensor:"
        ]
    },
    {
        "number": 9302,
        "comments": "",
        "commit_message": "formatting, fixes, etc\n\n",
        "label": "",
        "answer": "no",
        "change": [
            "class Clip(Preprocessor):",
            "Clip by min/max.",
            "\"\"\"",
            "",
            "-    def __init__(self, min, max, scope='clip', summary_labels=()):",
            "-        self.min = min",
            "-        self.max = max",
            "-        super(Clip, self).__init__(scope, summary_labels)",
            "+    def __init__(self, min_value, max_value, scope='clip', summary_labels=()):",
            "+        self.min_value = min_value",
            "+        self.max_value = max_value",
            "+        super(Clip, self).__init__(scope=scope, summary_labels=summary_labels)",
            "",
            "def tf_process(self, tensor):",
            "-        return tf.clip_by_value(t=tensor, clip_value_min=self.min, clip_value_max=self.max)",
            "+        return tf.clip_by_value(t=tensor, clip_value_min=self.min_value, clip_value_max=self.max_value)"
        ]
    },
    {
        "number": 9327,
        "comments": "",
        "commit_message": "fixed dtype\n\n",
        "label": "",
        "answer": "no",
        "change": [
            "class DeepQNetwork(ValueFunction):",
            "",
            "with tf.name_scope(\"update\"):",
            "self.q_targets = tf.placeholder(tf.float32, [None], name='q_targets')",
            "-            self.actions = tf.placeholder(tf.float32, [None, self.action_count], name='actions')",
            "+            self.actions = tf.placeholder(tf.int32, [None, self.action_count], name='actions')",
            "",
            "# Q values for actions taken in batch",
            "+            print(self.actions)",
            "actions_one_hot = tf.one_hot(self.actions, self.action_count, 1.0, 0.0, name='action_one_hot')",
            "q_values_actions_taken = tf.reduce_sum(self.training_output * actions_one_hot, reduction_indices=1,",
            "name='q_acted')"
        ]
    },
    {
        "number": 9328,
        "comments": "",
        "commit_message": "updated tune script, other fixes\n\n",
        "label": "",
        "answer": "yes",
        "change": [
            "class SignatureDict(NestedDict):",
            "assert isinstance(arg, TensorDict)",
            "args.append(spec.kwargs_to_args(kwargs=arg))",
            "else:",
            "-                assert isinstance(arg, (tf.IndexedSlices, tf.Tensor, tf.Variable))",
            "+                assert isinstance(arg, (tf.IndexedSlices, tf.Tensor, tf.Variable)), (name, spec, arg)",
            "args.append(arg)",
            "return args"
        ]
    },
    {
        "number": 9335,
        "comments": "",
        "commit_message": "enable black in the precommit (#1777)\n\n* enable black in the precommit\n\n* [pre-commit.ci] auto fixes from pre-commit.com hooks\n\nfor more information, see https://pre-commit.ci\n\n* add some fixes\n\n* update libface detection url\n\n* added url from kornia checkpoint\n\nCo-authored-by: pre-commit-ci[bot] <66853113+pre-commit-ci[bot]@users.noreply.github.com>\n",
        "label": "",
        "answer": "no",
        "change": [
            "class TestRGBShift:",
            "",
            "def test_rgb_shift(self, device, dtype):",
            "r_shift, g_shift, b_shift = 0.1, 0.2, -0.3",
            "-        image = torch.tensor([[[[0.2, 0.]], [[0.3, 0.5]], [[0.4, 0.7]]]], device=device, dtype=dtype)",
            "+        image = torch.tensor([[[[0.2, 0.0]], [[0.3, 0.5]], [[0.4, 0.7]]]], device=device, dtype=dtype)",
            "shifted = kornia.enhance.shift_rgb(image, r_shift, g_shift, b_shift)",
            "expected = torch.tensor([[[[0.3, 0.1]], [[0.5, 0.7]], [[0.1, 0.4]]]], device=device, dtype=dtype)"
        ]
    },
    {
        "number": 9346,
        "comments": "",
        "commit_message": "Fix typo in the comment in _info function (#1149)\n\n\n",
        "label": "",
        "answer": "no",
        "change": [
            "class NewDataset(datasets.GeneratorBasedBuilder):",
            "DEFAULT_CONFIG_NAME = \"first_domain\"  # It's not mandatory to have a default configuration. Just use one if it make sense.",
            "",
            "def _info(self):",
            "-        # TODO: This method pecifies the datasets.DatasetInfo object which contains informations and typings for the dataset",
            "+        # TODO: This method specifies the datasets.DatasetInfo object which contains informations and typings for the dataset",
            "if self.config.name == \"first_domain\":  # This is the name of the configuration selected in BUILDER_CONFIGS above",
            "features = datasets.Features(",
            "{"
        ]
    },
    {
        "number": 9352,
        "comments": "",
        "commit_message": "Add before_batch_transfer and after_batch_transfer hooks (#3671)\n\n* add hooks\n\n* comment\n\n* docs\n\n* add tests\n\n* make it private\n\n* fix tests\n\n* docs\n\n* chlog\n\n* testcode\n\n* codefactor\n\n* fix doctest\n\n* fix doctest\n\n* suggestions\n\n* is always overriden\n\n* pep and BoringModel\n\n* BoringModel\n\n* docs\n\n* docs\n\n* docs\n\n* fix\n\n* rebase\n\n* rebase\n\n* suggestions\n\n* docs\n\n* suggestions\n\n* try fix docs\n\n* docs\n\n* update name\n\n* yapf\n\n* docs\n\n* rebase\n\n* yapf\n",
        "label": "",
        "answer": "no",
        "change": [
            "class Accelerator(object):",
            ":paramref:`~pytorch_lightning.trainer.trainer.Trainer.truncated_bptt_steps` > 0.",
            "",
            "\"\"\"",
            "-        batch = self.to_device(args[0])",
            "-",
            "-        args[0] = batch",
            "+        args[0] = self.to_device(args[0])",
            "",
            "with self.precision_plugin.train_step_context(), self.training_type_plugin.train_step_context():",
            "return self.training_type_plugin.training_step(*args)"
        ]
    },
    {
        "number": 9355,
        "comments": "",
        "commit_message": "update pytorch ci matrix 1.10.2 and 1.11.0 (#1771)\n\n* update pytorch ci matrix 1.10.2 and 1.11.0\n\n* Update tests_cpu.yml\n\n* fix mypy\n\n* Update tests_cpu.yml\n",
        "label": "",
        "answer": "no",
        "change": [
            "class ZCAWhitening(nn.Module):",
            "T, mean, T_inv = zca_mean(x, self.dim, self.unbiased, self.eps, self.compute_inv)",
            "",
            "self.mean_vector = mean",
            "-        self.transform_matrix: torch.Tensor = T",
            "+        self.transform_matrix = T",
            "if T_inv is None:",
            "-            self.transform_inv: Optional[torch.Tensor] = torch.empty([0])",
            "+            self.transform_inv = torch.empty([0])",
            "else:",
            "self.transform_inv = T_inv"
        ]
    },
    {
        "number": 9359,
        "comments": "",
        "commit_message": "lintfixbot: Auto-commit fixed lint errors in codebase\n\n",
        "label": "",
        "answer": "no",
        "change": [
            "def quantile(",
            "# backends the quantile has to be in range [0, 1].",
            "q = q * 100",
            "",
            "-    # The quantile instance method in other backends is equivalent of",
            "+    # The quantile instance method in other backends is equivalent of",
            "# percentile instance method in tensorflow_probability",
            "result = tfp.stats.percentile(",
            "-        a,",
            "-        q,",
            "-        axis=axis,",
            "-        interpolation=interpolation,",
            "-        keepdims=keepdims",
            "+        a, q, axis=axis, interpolation=interpolation, keepdims=keepdims",
            ")",
            "return result"
        ]
    },
    {
        "number": 9361,
        "comments": "",
        "commit_message": "style: code style fixes (#1046)\n\n* fix: automatic code style correction\n\n* fix: squad_iterator\n\n* fix: delete document_bert_ner_iterator\n\n* fix: revert json files to dev version\n\n* fix: removed from registry\n\n* refactor: fix merge mistakes\n\n",
        "label": "",
        "answer": "no",
        "change": [
            "class SquadModel(LRScheduledTFModel):",
            "self.cc_ph = tf.placeholder(shape=(None, None, self.char_limit), dtype=tf.int32, name='cc_ph')",
            "self.q_ph = tf.placeholder(shape=(None, None), dtype=tf.int32, name='q_ph')",
            "self.qc_ph = tf.placeholder(shape=(None, None, self.char_limit), dtype=tf.int32, name='qc_ph')",
            "-        self.y1_ph = tf.placeholder(shape=(None, ), dtype=tf.int32, name='y1_ph')",
            "-        self.y2_ph = tf.placeholder(shape=(None, ), dtype=tf.int32, name='y2_ph')",
            "+        self.y1_ph = tf.placeholder(shape=(None,), dtype=tf.int32, name='y1_ph')",
            "+        self.y2_ph = tf.placeholder(shape=(None,), dtype=tf.int32, name='y2_ph')",
            "",
            "self.lear_rate_ph = tf.placeholder_with_default(0.0, shape=[], name='learning_rate')",
            "self.keep_prob_ph = tf.placeholder_with_default(1.0, shape=[], name='keep_prob_ph')"
        ]
    },
    {
        "number": 9362,
        "comments": "",
        "commit_message": "More TF int dtype fixes (#20384)\n\n* Add a test to ensure int dummy inputs are int64\n\n* Move the test into the existing int64 test and update a lot of existing dummies\n\n* Fix remaining dummies\n\n* Fix remaining dummies\n\n* Test for int64 serving sigs as well\n\n* Update core tests to use tf.int64\n\n* Add better messages to the assertions\n\n* Update all serving sigs to int64\n\n* More sneaky hiding tf.int32s\n\n* Add an optional int32 signature in save_pretrained\n\n* make fixup\n\n* Add Amy's suggestions\n\n* Switch all serving sigs back to tf.int32\n\n* Switch all dummies to tf.int32\n\n* Adjust tests to check for tf.int32 instead of tf.int64\n\n* Fix base dummy_inputs dtype\n\n* Start casting to tf.int32 in input_processing\n\n* Change dtype for unpack_inputs test\n\n* Add proper tf.int32 test\n\n* Make the alternate serving signature int64\n",
        "label": "",
        "answer": "no",
        "change": [
            "class TFTapasPreTrainedModel(TFPreTrainedModel):",
            "@tf.function(",
            "input_signature=[",
            "{",
            "-                \"input_ids\": tf.TensorSpec((None, None), tf.int64, name=\"input_ids\"),",
            "+                \"input_ids\": tf.TensorSpec((None, None), tf.int32, name=\"input_ids\"),",
            "\"attention_mask\": tf.TensorSpec((None, None), tf.float32, name=\"attention_mask\"),",
            "-                \"token_type_ids\": tf.TensorSpec((None, None, None), tf.int64, name=\"token_type_ids\"),",
            "+                \"token_type_ids\": tf.TensorSpec((None, None, None), tf.int32, name=\"token_type_ids\"),",
            "}",
            "]",
            ")"
        ]
    },
    {
        "number": 9363,
        "comments": "",
        "commit_message": "fix torch einsum\n\n",
        "label": "",
        "answer": "no",
        "change": [
            "def einsum(",
            "out: Optional[torch.Tensor] = None,",
            ") -> torch.Tensor:",
            "dtype = _get_promoted_type_of_operands(operands)",
            "-    operands = (ivy.astype(operand, torch.float32, copy=False) for operand in operands)",
            "+    operands = (",
            "+        ivy.astype(operand, torch.float32, copy=False).to_native()",
            "+        for operand in operands",
            "+    )",
            "return ivy.astype(torch.einsum(equation, *operands), dtype, copy=False)"
        ]
    },
    {
        "number": 9367,
        "comments": "",
        "commit_message": "fix memory issue of exporter for bi-transformer\n\nSummary: Before word_feat for bi-transformer is a required input feature, which makes a lot of stuff inefficient for bi-transformer fine-tuning model. So that we met memory issues when exporting hate speech models, eg f105928516. This diff is to fix the inefficiencies for bi-transformer fine-tuning model.\n\nDifferential Revision: D14694641\n\nfbshipit-source-id: 85d183033b0490720bfb248756c4a3ae8395bc79\n\n",
        "label": "",
        "answer": "no",
        "change": [
            "class PureDocAttention(RepresentationBase):",
            "self.representation_dim = self.dense.out_dim",
            "",
            "def forward(",
            "-        self, embedded_tokens: torch.Tensor, seq_lengths: torch.Tensor, *args",
            "+        self, embedded_tokens: torch.Tensor, seq_lengths: torch.Tensor = None, *args",
            ") -> Any:",
            "rep = self.dropout(embedded_tokens)"
        ]
    },
    {
        "number": 9370,
        "comments": "",
        "commit_message": "[RLlib] fix preprocessor test (#33719)\n\nSigned-off-by: Artur Niederfahrenhorst <artur@anyscale.com>\n",
        "label": "",
        "answer": "no",
        "change": [
            "class TestPreprocessors(unittest.TestCase):",
            "if __name__ == \"__main__\":",
            "# Call this on startup to prevet TF from complaining further down the line about",
            "# not calling in on startup.",
            "-    tf.enable_eager_execution()",
            "import pytest",
            "import sys"
        ]
    },
    {
        "number": 9373,
        "comments": "",
        "commit_message": "fix flake8 style in tensorpack/\n\n",
        "label": "",
        "answer": "no",
        "change": [
            "class QueueInputTrainer(SimpleFeedfreeTrainer):",
            "\"\"\"",
            "config.data = QueueInput(config.dataset, input_queue)",
            "if predict_tower is not None:",
            "-            logger.warn(\"[Deprecated] Argument `predict_tower` is deprecated for trainer. Use TrainConfig.predict_tower instead!\")",
            "+            logger.warn(\"[Deprecated] Argument `predict_tower` is deprecated for trainer. \"",
            "+                        \"Use TrainConfig.predict_tower instead!\")",
            "config.predict_tower = predict_tower",
            "assert len(config.tower) == 1, \\",
            "\"QueueInputTrainer doesn't support multigpu! Use Sync/AsyncMultiGPUTrainer instead.\""
        ]
    },
    {
        "number": 9375,
        "comments": "",
        "commit_message": "simplify WGAN. fix bug in viz.\n\n",
        "label": "",
        "answer": "no",
        "change": [
            "class PostProcessOptimizer(ProxyOptimizer):",
            "for _, var in grads_and_vars:",
            "with self._maybe_colocate(var):",
            "op = self._func(var)",
            "-                    assert isinstance(op, tf.Operation), op",
            "if op is not None:",
            "+                        assert isinstance(op, tf.Operation), op",
            "ops.append(op)",
            "update_op = tf.group(update_op, *ops, name=name)",
            "return update_op"
        ]
    },
    {
        "number": 9381,
        "comments": "",
        "commit_message": "Upgrade to latest pytorch master (#890)\n\n* Upgrade to latest pytorch master\n\n* fix to double tensor for profiling\n\n",
        "label": "",
        "answer": "no",
        "change": [
            "from pyro.distributions import (Bernoulli, Beta, Categorical, Cauchy, Dirichlet,",
            "",
            "",
            "def T(arr):",
            "-    return Variable(torch.Tensor(arr))",
            "+    return Variable(torch.DoubleTensor(arr))",
            "",
            "",
            "TOOL = 'timeit'"
        ]
    },
    {
        "number": 9387,
        "comments": "",
        "commit_message": "Change all masks to type torch.bool (#3890)\n\n* get_text_field_mask\n\n* masked_softmax\n\n* masked_log_softmax\n\n* masked_max/mean\n\n* get_lengths_from_binary_sequence_mask\n\n* get_final_encoder_states\n\n* replace_masked_values\n\n* batched_span_select\n\n* sequence_cross_entropy_with_logits\n\n* add_sentence_boundary_token_ids/remove_sentence_boundaries\n\n* scalar mix\n\n* More changes\n\n* Fix tests\n\n* More changes, mostly in tests\n\n* Test fix\n\n* black\n\n* More changes\n\n* More cahnges\n\n",
        "label": "",
        "answer": "no",
        "change": [
            "class CrfTagger(Model):",
            "class_probabilities[i, j, tag_id] = 1",
            "",
            "for metric in self.metrics.values():",
            "-                metric(class_probabilities, tags, mask.float())",
            "+                metric(class_probabilities, tags, mask)",
            "if self.calculate_span_f1:",
            "-                self._f1_metric(class_probabilities, tags, mask.float())",
            "+                self._f1_metric(class_probabilities, tags, mask)",
            "if metadata is not None:",
            "output[\"words\"] = [x[\"words\"] for x in metadata]",
            "return output"
        ]
    },
    {
        "number": 9389,
        "comments": "",
        "commit_message": "Fix failing CUDA tests on dev (#1277)\n\n\n",
        "label": "",
        "answer": "no",
        "change": [
            "def test_dynamic_lr(scheduler, num_steps):",
            "assert opt.state_dict()['param_groups'][0]['lr'] == 0.02",
            "assert opt.state_dict()['param_groups'][0]['initial_lr'] == 0.01",
            "assert abs(pyro.param('loc').item()) > 1e-5",
            "-            assert abs(pyro.param('scale').item()) - 0.5 > 1e-5",
            "+            assert abs(pyro.param('scale').item() - 0.5) > 1e-5",
            "",
            "",
            "@pytest.mark.parametrize('factory', [optim.Adam, optim.ClippedAdam, optim.RMSprop, optim.SGD])"
        ]
    },
    {
        "number": 9406,
        "comments": "",
        "commit_message": "Adapt image datasets (#3362)\n\n* Initial commit\n\n* Add basic decoding\n\n* Replace features.Audio with Audio\n\n* Add Image to package reference\n\n* Use np.array\n\n* Update error msg\n\n* Add mode and channel decoding\n\n* Fix return value\n\n* Finish decoding\n\n* Make CI happy\n\n* Some more fixes\n\n* Minor doc fix\n\n* Remove animated option\n\n* Pin version\n\n* Remove unused imports in setup.py\n\n* Add vision requirements to setup.py\n\n* Add initial tests\n\n* Delete other formats\n\n* Make Image feature hashable\n\n* Add more tests\n\n* Support numpy array in alter data check in TypedSequence\n\n* Fix TypedSequence converion\n\n* Finish tests\n\n* Update Image - add ImageExtensionType and supporting functions\n\n* Update encoding functions\n\n* Add support in TypedSequence for ImageExtensionType\n\n* Add tests\n\n* Remove unused import\n\n* Fix doc and style\n\n* Fix doc indentation\n\n* Improve comment\n\n* Return single image instead of dict\n\n* Return PIL Image and not dict\n\n* Encode dict\n\n* Update tests\n\n* Style\n\n* np.ndarray encoding/decoding\n\n* Minor improvements\n\n* PIL Image support in cast_to_python_objects\n\n* Test cast\n\n* Doc fix\n\n* Extension type fixes\n\n* Style\n\n* Use types_mapper in Dataset.to_pandas\n\n* Add pandas extension array for image type\n\n* Update tests\n\n* image type inference\n\n* Remvoe cast_to_python test after Quentin's change\n\n* Improve tests\n\n* Add storage type\n\n* Improve tests\n\n* Test map that returns np.ndarray\n\n* Rename functions\n\n* Add streaming test\n\n* Use image struct in all situations\n\n* Update src/datasets/features/image.py - encode_example type hint\n\nCo-authored-by: Quentin Lhoest <42851186+lhoestq@users.noreply.github.com>\n\n* Update src/datasets/features/image.py -list_image_compression_formats type hint\n\nCo-authored-by: Quentin Lhoest <42851186+lhoestq@users.noreply.github.com>\n\n* Use Image feature in ImageClassification task\n\n* Adapt cats_vs_dogs\n\n* Adapt beans\n\n* Adapt cifar10\n\n* Adapt cifar100\n\n* Add task templates to cifar10 and cifar100\n\n* Adapt FashionMNIST\n\n* Adapt food101\n\n* Adapt mnist datasets\n\n* Adapt head_qa\n\n* Update example in head_qa readme\n\n* Update head_qa dummy data\n\n* Fix streaming in beans and cats_vs_dogs\n\nCo-authored-by: Quentin Lhoest <lhoest.q@gmail.com>\nCo-authored-by: Quentin Lhoest <42851186+lhoestq@users.noreply.github.com>\n",
        "label": "",
        "answer": "no",
        "change": [
            "class Food101(datasets.GeneratorBasedBuilder):",
            "if file_path[len(_IMAGES_DIR) : -len(\".jpg\")] in files_to_keep:",
            "label = file_path.split(\"/\")[2]",
            "yield file_path, {",
            "-                        \"image\": {\"filename\": file_path.split(\"/\")[-1], \"data\": file_obj.read()},",
            "+                        \"image\": {\"path\": file_path, \"bytes\": file_obj.read()},",
            "\"label\": label,",
            "}"
        ]
    },
    {
        "number": 9408,
        "comments": "",
        "commit_message": "fix some errors\n\n",
        "label": "",
        "answer": "no",
        "change": [
            "class ParamRestore(SessionInit):",
            "self.prms = param_dict",
            "",
            "def init(self, sess):",
            "+        sess.run(tf.initialize_all_variables())",
            "variables = tf.get_collection(tf.GraphKeys.TRAINABLE_VARIABLES)",
            "var_dict = dict([v.name, v] for v in variables)",
            "for name, value in self.prms.iteritems():"
        ]
    },
    {
        "number": 9409,
        "comments": "",
        "commit_message": "[RLlib] Fix `use_lstm` flag for ModelV2 (w/o ModelV1 wrapping) and add it for PyTorch. (#8734)\n\n\n",
        "label": "",
        "answer": "no",
        "change": [
            "def build_vtrace_loss(policy, model, dist_class, train_batch):",
            "values = model.value_function()",
            "",
            "if policy.is_recurrent():",
            "-        max_seq_len = torch.max(train_batch[\"seq_lens\"]) - 1",
            "-        mask = sequence_mask(train_batch[\"seq_lens\"], max_seq_len)",
            "-        mask = torch.reshape(mask, [-1])",
            "+        max_seq_len = torch.max(train_batch[\"seq_lens\"])",
            "+        mask_orig = sequence_mask(train_batch[\"seq_lens\"], max_seq_len)",
            "+        mask = torch.reshape(mask_orig, [-1])",
            "else:",
            "mask = torch.ones_like(rewards)"
        ]
    },
    {
        "number": 9411,
        "comments": "",
        "commit_message": "Fix some failing tests (#1041)\n\n* up\n\n* up\n\n* up\n\n* Update src/diffusers/pipelines/stable_diffusion/pipeline_stable_diffusion.py\n\n* Apply suggestions from code review\n",
        "label": "",
        "answer": "no",
        "change": [
            "class StableDiffusionPipelineIntegrationTests(unittest.TestCase):",
            "pipeline_id = \"CompVis/stable-diffusion-v1-4\"",
            "prompt = \"Andromeda galaxy in a bottle\"",
            "",
            "-        pipeline = StableDiffusionPipeline.from_pretrained(",
            "-            pipeline_id, revision=\"fp16\", torch_dtype=torch.float16, device_map=\"auto\"",
            "-        )",
            "+        pipeline = StableDiffusionPipeline.from_pretrained(pipeline_id, revision=\"fp16\", torch_dtype=torch.float16)",
            "pipeline.enable_attention_slicing(1)",
            "pipeline.enable_sequential_cpu_offload()"
        ]
    },
    {
        "number": 9412,
        "comments": "",
        "commit_message": "add pat change (#3414)\n\n* add pat change\n\n* fix grid roi head\n\n* fix comments\n\n* clean\n\n* revert change\n",
        "label": "",
        "answer": "yes",
        "change": [
            "def collect_env():",
            "env_info['GCC'] = gcc",
            "",
            "env_info['PyTorch'] = torch.__version__",
            "-    env_info['PyTorch compiling details'] = torch.__config__.show()",
            "+    env_info['PyTorch compiling details'] = get_build_config()",
            "",
            "env_info['TorchVision'] = torchvision.__version__"
        ]
    },
    {
        "number": 9426,
        "comments": "",
        "commit_message": "refactor: fix import (#1769)\n\n\n",
        "label": "",
        "answer": "no",
        "change": [
            "class KerasModel(ModelArtifact):",
            "",
            "if os.path.isfile(cls.__get_model_json__path(path)):",
            "# load keras model via json and weights since json file are in path",
            "-            with cls.sess.as_default():",
            "+            with cls.sess.as_default():  # pylint: disable=not-context-manager",
            "with open(cls.__get_model_json__path(path), 'r') as json_file:",
            "model_json = json_file.read()",
            "obj = tfk.models.model_from_json("
        ]
    },
    {
        "number": 9428,
        "comments": "",
        "commit_message": "add pytest fixture as workaround for set_grad_enabled\n\n",
        "label": "",
        "answer": "no",
        "change": [
            "def test_lm():",
            "# numpy.testing.assert_equal(rnnlm_ch.predictor.lo.W.data, rnnlm_th.predictor.lo.weight.data.numpy())",
            "",
            "# test prediction equality",
            "-    if torch.__version__.startswith(\"0.3.\"):",
            "+    if torch_is_old:",
            "x = torch.autograd.Variable(",
            "torch.from_numpy(numpy.random.randint(n_vocab, size=(batchsize))),",
            "volatile=True).long()"
        ]
    },
    {
        "number": 9430,
        "comments": "",
        "commit_message": "Fix: Shape must not have repeated dimensions\n\nUse differently named singletons instead\n\n",
        "label": "",
        "answer": "no",
        "change": [
            "def conv1d(x, scope, nf, *, w_init_stdev=0.02, params=None, scale=False):",
            "c = mtf.layers.conv1d(x, nf, name=scope, filter_size=1, stride=1,",
            "filter_initializer=tf.random_normal_initializer(stddev=w_init_stdev, dtype=dt))",
            "with tf.variable_scope(scope):",
            "-        singleton = mtf.Dimension('singleton', 1)",
            "+        singletona = mtf.Dimension('singletona', 1)",
            "+        singletonb = mtf.Dimension('singletonb', 1)",
            "",
            "b = mtf.get_variable(x.mesh, 'b', [nf], initializer=tf.constant_initializer(0, dtype=tf.bfloat16), dtype=dt)",
            "# NWC",
            "-        b = mtf.reshape(b, [singleton, singleton, nf])",
            "+        b = mtf.reshape(b, [singletona, singletonb, nf])",
            "",
            "c += b",
            "return c"
        ]
    },
    {
        "number": 9438,
        "comments": "",
        "commit_message": "Fix jit compilation of HMM examples (#1596)\n\n\n\n",
        "label": "",
        "answer": "no",
        "change": [
            "class Dice(object):",
            "prob = probs[key]",
            "prob._pyro_dims = queries[key]._pyro_dims",
            "mask = prob > 0",
            "-                    if not mask.all():",
            "+                    if torch._C._get_tracing_state() or not mask.all():",
            "mask._pyro_dims = prob._pyro_dims",
            "cost, prob, mask = packed.broadcast_all(cost, prob, mask)",
            "prob = prob[mask]"
        ]
    },
    {
        "number": 9444,
        "comments": "",
        "commit_message": "modified logspace to also include the dtype argument, fixing the failing unit test.\n\n",
        "label": "",
        "answer": "no",
        "change": [
            "def logspace(",
            "base=10.0,",
            "axis=None,",
            "*,",
            "+    dtype: tf.DType,",
            "device: str,",
            "out: Union[tf.Tensor, tf.Variable] = None",
            "):",
            "-    power_seq = linspace(start, stop, num, axis, dtype=None, device=device)",
            "+    power_seq = ivy.linspace(start, stop, num, axis, dtype=dtype, device=device)",
            "return base**power_seq"
        ]
    },
    {
        "number": 9445,
        "comments": "",
        "commit_message": "fix for live progress breaking lowvram and medvram optimizations\n\n",
        "label": "",
        "answer": "no",
        "change": [
            "def check_progress_call():",
            "else:",
            "preview_visibility = gr_show(True)",
            "",
            "-    shared.state.current_progress_index += 1",
            "-",
            "return f\"<span style='display: none'>{time.time()}</span><p>{progressbar}</p>\", preview_visibility, image"
        ]
    },
    {
        "number": 9448,
        "comments": "",
        "commit_message": "update cifar number & fix multigpu restore bug\n\n",
        "label": "",
        "answer": "no",
        "change": [
            "def get_config():",
            "optimizer=tf.train.MomentumOptimizer(lr, 0.9),",
            "callbacks=Callbacks([",
            "StatPrinter(),",
            "-            PeriodicSaver(),",
            "-            ValidationError(dataset_test, prefix='test'),",
            "+            ModelSaver(),",
            "+            ClassificationError(dataset_test, prefix='validation'),",
            "ScheduledHyperParamSetter('learning_rate',",
            "[(1, 0.1), (20, 0.01), (33, 0.001), (60, 0.0001)])",
            "]),"
        ]
    },
    {
        "number": 9449,
        "comments": "",
        "commit_message": "[FIX] Soft-argmax test fixes, renaming and enables jit (#553)\n\n* Rename spatial_softargmax_2d to spatial_expectation_2d\n\n* Add JIT to some core DSNT operations\n\n* Add jit.script support to render_gaussian_2d\n\n* Rename DSNT functions from *_2d to *2d\n\n* Fix jit.script for meshgrid functions by removing incorrect usage of Optional\n\n* Add check_is_tensor function\n\nCo-authored-by: Edgar Riba <edgar.riba@gmail.com>\n",
        "label": "",
        "answer": "no",
        "change": [
            "def spatial_soft_argmax2d(",
            ">>> coords = kornia.spatial_soft_argmax2d(input, False)",
            "tensor([[[1.0000, 1.0000]]])",
            "\"\"\"",
            "-    input_soft: torch.Tensor = dsnt.spatial_softmax_2d(input, temperature)",
            "-    output: torch.Tensor = dsnt.spatial_softargmax_2d(input_soft,",
            "-                                                      normalized_coordinates)",
            "+    input_soft: torch.Tensor = dsnt.spatial_softmax2d(input, temperature)",
            "+    output: torch.Tensor = dsnt.spatial_expectation2d(input_soft, normalized_coordinates)",
            "return output"
        ]
    },
    {
        "number": 9467,
        "comments": "",
        "commit_message": "fix dtype, device in `sum`, `prod`, `to_dev` (#1358)\n\n* fix dtype, device in `sum`, `prod`, `to_dev`\n\n* make `device` have `None` as default\n\n* add `dtype = ivy.as_native_dtype(dtype)` and make `copy` positional\n\n* `to_dev` conform to array API\n\n* `astype` fixes to signature\n\n* black\n",
        "label": "",
        "answer": "no",
        "change": [
            "def unique_values(x: torch.Tensor) -> torch.Tensor:",
            "return ret",
            "",
            "",
            "-def unique_counts(",
            "-    x: torch.Tensor",
            "-) -> Tuple[torch.Tensor, torch.Tensor]:",
            "+def unique_counts(x: torch.Tensor) -> Tuple[torch.Tensor, torch.Tensor]:",
            "v, c = torch.unique(torch.reshape(x, [-1]), return_counts=True)",
            "nan_idx = torch.where(torch.isnan(v))",
            "c[nan_idx] = 1"
        ]
    },
    {
        "number": 9472,
        "comments": "",
        "commit_message": "fix\n\n",
        "label": "",
        "answer": "no",
        "change": [
            "class Stft(torch.nn.Module, InversibleInterface):",
            "pad = self.n_fft // 2",
            "ilens = ilens + 2 * pad",
            "",
            "-            olens = (",
            "-                torch.div((ilens - self.n_fft), self.hop_length, rounding_mode=\"floor\")",
            "-                + 1",
            "-            )",
            "+            olens = (ilens - self.n_fft) // self.hop_length + 1",
            "output.masked_fill_(make_pad_mask(olens, output, 1), 0.0)",
            "else:",
            "olens = None"
        ]
    },
    {
        "number": 9473,
        "comments": "",
        "commit_message": "fixing various parts of model conversion, loading and weights sharing\n\n",
        "label": "",
        "answer": "no",
        "change": [
            "def convert_transfo_xl_checkpoint_to_pytorch(tf_checkpoint_path,",
            "model = TransfoXLModel(config)",
            "",
            "# Build TF to PyTorch weights loading map",
            "-        tf_to_pt_map = build_tf_to_pytorch_map(model.transformer, config)",
            "+        tf_to_pt_map = build_tf_to_pytorch_map(model, config)",
            "",
            "# Load weights from TF model",
            "init_vars = tf.train.list_variables(tf_path)"
        ]
    },
    {
        "number": 9475,
        "comments": "",
        "commit_message": "fix lint failure\n\n",
        "label": "",
        "answer": "no",
        "change": [
            "def inv(",
            "return ret",
            "else:",
            "cofactor = tf.transpose(tf.linalg.inv(x)) * tf.linalg.det(x)",
            "-            inverse = tf.math.multiply(tf.math.divide(",
            "-                1, tf.linalg.det(x)), tf.transpose(cofactor))",
            "+            inverse = tf.math.multiply(",
            "+                tf.math.divide(1, tf.linalg.det(x)), tf.transpose(cofactor)",
            "+            )",
            "ret = inverse",
            "return ret"
        ]
    },
    {
        "number": 9477,
        "comments": "",
        "commit_message": "Fix unused variable found (#1250)\n\n* Fix Unused variable found\n\n* more fixes\n\n* Update kornia/enhance/histogram.py\n",
        "label": "",
        "answer": "no",
        "change": [
            "def triangulate_points(",
            "# 1. Solve the system Ax=0 with smallest eigenvalue",
            "# 2. Return homogeneous coordinates",
            "",
            "-    U, S, V = torch.svd(X)",
            "+    _, _, V = torch.svd(X)",
            "",
            "points3d_h = V[..., -1]",
            "points3d: torch.Tensor = kornia.convert_points_from_homogeneous(points3d_h)"
        ]
    },
    {
        "number": 9480,
        "comments": "",
        "commit_message": "fix gpu test errors\n\n",
        "label": "",
        "answer": "no",
        "change": [
            "def match_snn(desc1: torch.Tensor, desc2: torch.Tensor,",
            "match_dists = ratio[mask]",
            "idxs_in1 = torch.arange(0, idxs_in_2.size(0), device=dm.device)[mask]",
            "idxs_in_2 = idxs_in_2[:, 0][mask]",
            "-    matches_idxs = torch.cat([idxs_in1.view(-1, 1), idxs_in_2.cpu().view(-1, 1)], dim=1)",
            "+    matches_idxs = torch.cat([idxs_in1.view(-1, 1), idxs_in_2.view(-1, 1)], dim=1)",
            "return match_dists.view(-1, 1), matches_idxs.view(-1, 2)"
        ]
    },
    {
        "number": 9482,
        "comments": "",
        "commit_message": "small fix for solve with torch backend.\n\n",
        "label": "",
        "answer": "no",
        "change": [
            "slogdet.support_native_out = True",
            "",
            "",
            "def solve(",
            "-    x1: torch.Tensor, x2: torch.Tensor, *, out: Optional[torch.Tensor]",
            "+    x1: torch.Tensor,",
            "+    x2: torch.Tensor,",
            "+    *,",
            "+    out: Optional[torch.Tensor] = None,",
            ") -> torch.Tensor:",
            "if x1.dtype != torch.float:",
            "x1 = x1.type(torch.float)"
        ]
    },
    {
        "number": 9486,
        "comments": "",
        "commit_message": "Reproducibility 3/3 (#1924)\n\n* make tests deterministic\n\n* run slow tests\n\n* prepare for testing\n\n* finish\n\n* refactor\n\n* add print statements\n\n* finish more\n\n* correct some test failures\n\n* more fixes\n\n* set up to correct tests\n\n* more corrections\n\n* up\n\n* fix more\n\n* more prints\n\n* add\n\n* up\n\n* up\n\n* up\n\n* uP\n\n* uP\n\n* more fixes\n\n* uP\n\n* up\n\n* up\n\n* up\n\n* up\n\n* fix more\n\n* up\n\n* up\n\n* clean tests\n\n* up\n\n* up\n\n* up\n\n* more fixes\n\n* Apply suggestions from code review\n\nCo-authored-by: Suraj Patil <surajp815@gmail.com>\n\n* make\n\n* correct\n\n* finish\n\n* finish\n\nCo-authored-by: Suraj Patil <surajp815@gmail.com>\n",
        "label": "",
        "answer": "no",
        "change": [
            "class VersatileDiffusionImageVariationPipelineIntegrationTests(unittest.TestCase",
            "image_slice = image[0, 253:256, 253:256, -1]",
            "",
            "assert image.shape == (1, 512, 512, 3)",
            "-        expected_slice = np.array([0.1205, 0.1914, 0.2289, 0.0883, 0.1595, 0.1683, 0.0703, 0.1493, 0.1298])",
            "+        expected_slice = np.array([0.0441, 0.0469, 0.0507, 0.0575, 0.0632, 0.0650, 0.0865, 0.0909, 0.0945])",
            "+",
            "assert np.abs(image_slice.flatten() - expected_slice).max() < 1e-2"
        ]
    },
    {
        "number": 9490,
        "comments": "",
        "commit_message": "fix nan in full-fp16 label_smoothing eval (#10815)\n\n\n",
        "label": "",
        "answer": "yes",
        "change": [
            "class LabelSmoother:",
            "# will ignore them in any case.",
            "labels.clamp_min_(0)",
            "nll_loss = log_probs.gather(dim=-1, index=labels)",
            "-        smoothed_loss = log_probs.sum(dim=-1, keepdim=True)",
            "+        # works for fp16 input tensor too, by internally upcasting it to fp32",
            "+        smoothed_loss = log_probs.sum(dim=-1, keepdim=True, dtype=torch.float32)",
            "",
            "nll_loss.masked_fill_(padding_mask, 0.0)",
            "smoothed_loss.masked_fill_(padding_mask, 0.0)"
        ]
    },
    {
        "number": 9497,
        "comments": "",
        "commit_message": "lintfixbot: Auto-commit fixed lint errors in codebase\n\n",
        "label": "",
        "answer": "no",
        "change": [
            "def fmod(",
            ") -> Union[tf.Tensor, tf.Variable]:",
            "result = tf.math.floormod(x1, x2, name=None)",
            "temp = [result, x1]",
            "-    return tf.map_fn(lambda x: x[0] if (x[0] * x[1] >= 0) else (-1 * x[0]), temp, fn_output_signature=result.dtype)",
            "+    return tf.map_fn(",
            "+        lambda x: x[0] if (x[0] * x[1] >= 0) else (-1 * x[0]),",
            "+        temp,",
            "+        fn_output_signature=result.dtype,",
            "+    )",
            "",
            "",
            "def fmax("
        ]
    },
    {
        "number": 9500,
        "comments": "",
        "commit_message": "fixed tests\n\n",
        "label": "",
        "answer": "no",
        "change": [
            "def test_gae():",
            "loss = model.loss(z, data.train_pos_edge_index, data.train_neg_adj_mask)",
            "assert loss.item() > 0",
            "",
            "-    auc, ap = model.evaluate(z, data.val_pos_edge_index,",
            "-                             data.val_neg_edge_index)",
            "+    auc, ap = model.test(z, data.val_pos_edge_index, data.val_neg_edge_index)",
            "assert auc >= 0 and auc <= 1 and ap >= 0 and ap <= 1"
        ]
    },
    {
        "number": 9505,
        "comments": "",
        "commit_message": "Fix typing errors (#2012)\n\n\n",
        "label": "",
        "answer": "no",
        "change": [
            "def one_hot(",
            "raise ValueError(\"The number of classes must be bigger than one.\" \" Got: {}\".format(num_classes))",
            "",
            "shape = labels.shape",
            "-    one_hot = torch.zeros((shape[0], num_classes) + shape[1:], device=device, dtype=dtype)",
            "+    one_hot = zeros((shape[0], num_classes) + shape[1:], device=device, dtype=dtype)",
            "",
            "return one_hot.scatter_(1, labels.unsqueeze(1), 1.0) + eps"
        ]
    },
    {
        "number": 9513,
        "comments": "",
        "commit_message": "fix: bug with loading model from scratch\n\n",
        "label": "",
        "answer": "no",
        "change": [
            "class TFModel(Trainable, Inferable, metaclass=TfModelMeta):",
            "print('\\n:: Model saved to {} \\n'.format(self.model_path_.as_posix()))",
            "",
            "def get_checkpoint_state(self):",
            "-        return tf.train.get_checkpoint_state(self.model_path_.as_posix())",
            "+        return tf.train.get_checkpoint_state(self.model_path_.parent)",
            "",
            "@check_path_exists()",
            "def load(self):"
        ]
    },
    {
        "number": 9518,
        "comments": "",
        "commit_message": "Fix Torchscript for exclusively binary feature inputs (#2103)\n\n* Fix torchscript binary feature only inputs\n\n* change binary preproc output to float32 dtype\n\n* cleanup after merge\n\n* cleanup after merge\n\n* confirm tests still pass\n\n* revert changes to torchscript\n",
        "label": "",
        "answer": "no",
        "change": [
            "class _BinaryPreprocessing(torch.nn.Module):",
            "v = torch.stack(v)",
            "",
            "if torch.jit.isinstance(v, torch.Tensor):",
            "-            return v.to(dtype=torch.bool)",
            "+            return v.to(dtype=torch.float32)",
            "",
            "v = [s.strip() for s in v]",
            "if self.should_lower:",
            "v = [s.lower() for s in v]",
            "indices = [self.str2bool.get(s, False) for s in v]",
            "-        return torch.tensor(indices, dtype=torch.bool)",
            "+        return torch.tensor(indices, dtype=torch.float32)",
            "",
            "",
            "class _BinaryPostprocessing(torch.nn.Module):"
        ]
    },
    {
        "number": 9524,
        "comments": "",
        "commit_message": "Fixed deprecated squeeze_dims argument\n\nPiperOrigin-RevId: 194048599\n\n",
        "label": "",
        "answer": "no",
        "change": [
            "def add_input_distortions(flip_left_right, random_crop, random_scale,",
            "precrop_shape_as_int = tf.cast(precrop_shape, dtype=tf.int32)",
            "precropped_image = tf.image.resize_bilinear(decoded_image_4d,",
            "precrop_shape_as_int)",
            "-  precropped_image_3d = tf.squeeze(precropped_image, squeeze_dims=[0])",
            "+  precropped_image_3d = tf.squeeze(precropped_image, axis=[0])",
            "cropped_image = tf.random_crop(precropped_image_3d,",
            "[input_height, input_width, input_depth])",
            "if flip_left_right:"
        ]
    },
    {
        "number": 9531,
        "comments": "",
        "commit_message": "Merge PyG master (#48)\n\n* avoid the 'inf'\n\n* Create GATv2Conv\n\n* Update gatv2_conv.py\n\n* Update gatv2_conv.py\n\n* Update gatv2_conv.py\n\n* More doc\n\n* Update gatv2_conv.py\n\n* Update gatv2_conv.py\n\n* Update README.md\n\n* Update README.md\n\n* Create test_gatv2_conv.py\n\n* Update test_gatv2_conv.py\n\n* fixed gatv2 test\n\n* Fixed types\n\n* Update gatv2_conv.py\n\n* fix types\n\n* remove script folder\n\n* update test CI\n\n* fixed comments\n\n* lint + type\n\n* lint\n\n* Update test_gatv2_conv.py\n\n* Update test_gatv2_conv.py\n\n* fixed gatv2 test+ types\n\n* Update gatv2_conv.py\n\n* Update gatv2_conv.py\n\n* pytorch 1.9.0 support\n\n* typo\n\n* The dataset was introduced in the MUSAE paper\n\nDear Matthias,\n\nThese datasets were introduced in the Multi-scale Attributed Node Embedding paper.\n\nhttps://arxiv.org/abs/1909.13021\n\nBenedek\n\n* Github Dataset\n\n* Github Dataset\n\n* Github Dataset\n\n* Revert \"Merge branch 'master' into master\"\n\nThis reverts commit ef38f142465f736692c7c251a315ada287d7f104, reversing\nchanges made to d86de00a98173653a6158fc40238d34d0fb57cc1.\n\n* clean up\n\n* fix doc\n\n* fix gnn explainer\n\n* remove OGB-LSC\n\nCo-authored-by: Ethanzjp <13810907+Ethanzjp@users.noreply.github.com>\nCo-authored-by: shakedbr <shakedbr@campus.technion.ac.il>\nCo-authored-by: Uri Alon <urialon1@gmail.com>\nCo-authored-by: Shaked Brody <shakedbr@gmail.com>\nCo-authored-by: Benedek Rozemberczki <benedek.rozemberczki@gmail.com>\n",
        "label": "",
        "answer": "no",
        "change": [
            "class ShaDowKHopSampler(torch.utils.data.DataLoader):",
            "batch.edge_index = torch.stack([row, col], dim=0)",
            "",
            "for k, v in self.data:",
            "-            if k in ['edge_index', 'adj_t', 'num_nodes']:",
            "+            if k in ['edge_index', 'adj_t']:",
            "continue",
            "if k == 'y' and v.size(0) == self.data.num_nodes:",
            "batch[k] = v[n_id][root_n_id]"
        ]
    },
    {
        "number": 9535,
        "comments": "",
        "commit_message": "fix tensorflow prod\n\n",
        "label": "",
        "answer": "yes",
        "change": [
            "def prod(",
            "dtype = tf.uint64",
            "if ivy.exists(out):",
            "return ivy.inplace_update(",
            "-            out, tf.experimental.numpy.prod(x, axis=axis, keepdims=keepdims)",
            "+            out,",
            "+            tf.experimental.numpy.prod(x, axis=axis, dtype=dtype, keepdims=keepdims),",
            ")",
            "else:",
            "return tf.experimental.numpy.prod(x, axis, dtype, keepdims)"
        ]
    },
    {
        "number": 9550,
        "comments": "",
        "commit_message": "Added general model parameter 'variable_noise', plus bug fix in q_model\n\n",
        "label": "",
        "answer": "no",
        "change": [
            "class PGProbRatioModel(PGModel):",
            "log_probs.append(log_prob)",
            "log_prob = tf.reduce_mean(input_tensor=tf.concat(values=log_probs, axis=1), axis=1)",
            "prob_ratio = tf.exp(x=(log_prob - reference))",
            "-        return tf.reduce_mean(input_tensor=(-prob_ratio * reward), axis=0)",
            "+        return tf.reduce_mean(input_tensor=(prob_ratio * reward), axis=0)",
            "",
            "def get_optimizer_kwargs(self, states, actions, terminal, reward, internals):",
            "kwargs = super(PGProbRatioModel, self).get_optimizer_kwargs("
        ]
    },
    {
        "number": 9555,
        "comments": "",
        "commit_message": "fix for self conditioning in diffusion prior network https://github.com/lucidrains/DALLE2-pytorch/issues/273\n\n",
        "label": "",
        "answer": "no",
        "change": [
            "class DiffusionPriorNetwork(nn.Module):",
            "learned_queries = repeat(self.learned_query, 'd -> b 1 d', b = batch)",
            "",
            "if self.self_cond:",
            "-            learned_queries = torch.cat((image_embed, self_cond), dim = -2)",
            "+            learned_queries = torch.cat((self_cond, learned_queries), dim = -2)",
            "",
            "tokens = torch.cat((",
            "text_encodings,"
        ]
    },
    {
        "number": 9558,
        "comments": "",
        "commit_message": "Upgrade `pydoc-markdown` & refactor GitHub Actions (#2117)\n\n* Upgrade pydoc-markdown and fix the YAMLs to work with it\n\n* Pin pydoc-markdown to major version\n\n* Generalize pydoc-markdown workflow\n\n* Make a single Action to perform all tasks that require committing into the local branch\n\n* Merge the code updates and the docs in the Linux CI to prevent the bot from always show the pipeline as green\n\n* Installing Jupyter deps for Black\n\n* Build cache before running generation tasks\n\n* Add check not to run the code generation on master\n\n* Simplify push action\n\n* Add more test deps in setup.cfg and remove from GH Action workflow\n\n* Remove forced upgrades on pip install\n\nCo-authored-by: github-actions[bot] <41898282+github-actions[bot]@users.noreply.github.com>\n",
        "label": "",
        "answer": "no",
        "change": [
            "class TriAdaptiveModel(nn.Module):",
            ":param global_step: number of current training step.",
            ":param kwargs: Placeholder for passing generic parameters.",
            "Note: Contains the batch (as dict of tensors), when called from Trainer.train().",
            "-        :return loss: torch.Tensor that is the per sample loss (len: batch_size)",
            "+        :return: loss: torch.Tensor that is the per sample loss (len: batch_size)",
            "\"\"\"",
            "all_losses = self.logits_to_loss_per_head(logits, **kwargs)",
            "# This aggregates the loss per sample across multiple prediction heads"
        ]
    },
    {
        "number": 9559,
        "comments": "",
        "commit_message": "fix nms bug (sorted)\n\n",
        "label": "",
        "answer": "no",
        "change": [
            "def loss(self, net_out):",
            "loss = tf.multiply(loss, wght)",
            "loss = tf.reshape(loss, [-1, H*W*B*(4 + 1 + C)])",
            "loss = tf.reduce_sum(loss, 1)",
            "-    self.loss = .5 * tf.reduce_mean(loss)",
            "-",
            "-",
            "+    self.loss = .5 * tf.reduce_mean(loss)",
            "\\ No newline at end of file"
        ]
    },
    {
        "number": 9561,
        "comments": "",
        "commit_message": "bugfix in ori\n\n",
        "label": "",
        "answer": "no",
        "change": [
            "class TestLAFOrienter:",
            "def test_toy(self, device):",
            "ori = LAFOrienter(32).to(device)",
            "inp = torch.zeros(1, 1, 19, 19, device=device)",
            "-        inp[:, :, :10, :] = 1",
            "+        inp[:, :, :, :10] = 1",
            "laf = torch.tensor([[[[0, 5., 8.], [5.0, 0., 8.]]]], device=device)",
            "new_laf = ori(laf, inp)",
            "-        expected = torch.tensor([[[[5., 0., 8.], [0., 5., 8.]]]], device=device)",
            "+        expected = torch.tensor([[[[0., 5., 8.], [-5.0, 0, 8.]]]], device=device)",
            "assert_allclose(new_laf, expected)",
            "",
            "def test_gradcheck(self, device):"
        ]
    },
    {
        "number": 9574,
        "comments": "",
        "commit_message": "kl loss fix\n\n",
        "label": "",
        "answer": "no",
        "change": [
            "class ARGVA(ARGA):",
            "def loss(self, mu, logvar, pos_edge_index, neg_adj_mask):",
            "z = self.sample(mu, logvar)",
            "recon_loss = self.reconstruction_loss(z, pos_edge_index, neg_adj_mask)",
            "-        kl_loss = self.kl_loss(z, mu, logvar)",
            "+        kl_loss = self.kl_loss(mu, logvar)",
            "d_loss = self.discriminator_loss(*self.discriminate(z))",
            "return recon_loss + kl_loss + d_loss"
        ]
    },
    {
        "number": 9575,
        "comments": "",
        "commit_message": "Fix device parser logic to avoid creating CUDA context (#14319)\n\n* let environment disable forking\n\n* add helper function and error messages\n\n* tests\n\n* changelog\n\nCo-authored-by: Justus Schock <12886177+justusschock@users.noreply.github.com>\nCo-authored-by: Jirka Borovec <Borda@users.noreply.github.com>\n",
        "label": "",
        "answer": "yes",
        "change": [
            "def is_cuda_available() -> bool:",
            "Unlike :func:`torch.cuda.is_available`, this function will do its best not to create a CUDA context for fork",
            "support, if the platform allows it.",
            "\"\"\"",
            "-    if \"fork\" not in torch.multiprocessing.get_all_start_methods():",
            "+    if \"fork\" not in torch.multiprocessing.get_all_start_methods() or _is_forking_disabled():",
            "return torch.cuda.is_available()",
            "with multiprocessing.get_context(\"fork\").Pool(1) as pool:",
            "return pool.apply(torch.cuda.is_available)"
        ]
    },
    {
        "number": 9579,
        "comments": "",
        "commit_message": "fixed scale\n\n",
        "label": "",
        "answer": "no",
        "change": [
            "from .random_scale import RandomScale",
            "",
            "class RandomScaleTest(TestCase):",
            "def test_random_scale(self):",
            "-        position = [[1, 2, 3], [2, 3, 4], [3, 4, 5], [4, 5, 6], [5, 6, 7]]",
            "-        position = torch.FloatTensor(position)",
            "+        position = [[0, 0, 0], [1, 1, 1], [2, 2, 2], [3, 3, 3], [4, 4, 4]]",
            "+        position = torch.FloatTensor(position) - 2",
            "data = Data(None, None, position, None)",
            "-        data = RandomScale(1)(data)",
            "+        data = RandomScale(2)(data)"
        ]
    },
    {
        "number": 9584,
        "comments": "",
        "commit_message": "fix function that defines masks in XLM\n\nthe definition of `get_masks` would blow with the proper combination of\narguments. It was just a matter of moving a definition outside of a\ncontrol structure.\n\n",
        "label": "",
        "answer": "no",
        "change": [
            "def get_masks(slen, lengths, causal, padding_mask=None):",
            "\"\"\"",
            "Generate hidden states mask, and optionally an attention mask.",
            "\"\"\"",
            "-    bs = lengths.size(0)",
            "+    alen = torch.arange(slen, dtype=torch.long, device=lengths.device)",
            "if padding_mask is not None:",
            "mask = padding_mask",
            "else:",
            "assert lengths.max().item() <= slen",
            "-        alen = torch.arange(slen, dtype=torch.long, device=lengths.device)",
            "mask = alen < lengths[:, None]",
            "",
            "# attention mask is the same as mask, or triangular inferior attention (causal)",
            "if causal:",
            "+        bs = lengths.size(0)",
            "attn_mask = alen[None, None, :].repeat(bs, slen, 1) <= alen[None, :, None]",
            "else:",
            "attn_mask = mask"
        ]
    },
    {
        "number": 9588,
        "comments": "",
        "commit_message": "CDN urls (#4030)\n\n* [file_utils] use_cdn + documentation\n\n* Move to cdn. urls for weights\n\n* [urls] Hotfix for bert-base-japanese\n",
        "label": "",
        "answer": "no",
        "change": [
            "from .modeling_tf_utils import TFPreTrainedModel, TFSharedEmbeddings, shape_list",
            "logger = logging.getLogger(__name__)",
            "",
            "TF_T5_PRETRAINED_MODEL_ARCHIVE_MAP = {",
            "-    \"t5-small\": \"https://s3.amazonaws.com/models.huggingface.co/bert/t5-small-tf_model.h5\",",
            "-    \"t5-base\": \"https://s3.amazonaws.com/models.huggingface.co/bert/t5-base-tf_model.h5\",",
            "-    \"t5-large\": \"https://s3.amazonaws.com/models.huggingface.co/bert/t5-large-tf_model.h5\",",
            "-    \"t5-3b\": \"https://s3.amazonaws.com/models.huggingface.co/bert/t5-3b-tf_model.h5\",",
            "-    \"t5-11b\": \"https://s3.amazonaws.com/models.huggingface.co/bert/t5-11b-tf_model.h5\",",
            "+    \"t5-small\": \"https://cdn.huggingface.co/t5-small-tf_model.h5\",",
            "+    \"t5-base\": \"https://cdn.huggingface.co/t5-base-tf_model.h5\",",
            "+    \"t5-large\": \"https://cdn.huggingface.co/t5-large-tf_model.h5\",",
            "+    \"t5-3b\": \"https://cdn.huggingface.co/t5-3b-tf_model.h5\",",
            "+    \"t5-11b\": \"https://cdn.huggingface.co/t5-11b-tf_model.h5\",",
            "}",
            "",
            "####################################################"
        ]
    },
    {
        "number": 9589,
        "comments": "",
        "commit_message": "Fixes to enable dev branch to move to pytorch-1.2 (#2001)\n\n* Fixes to enable dev branch to move to pytorch-1.2\n\n* change name for published cpu wheels\n\n* fix failing unit tests\n\n* change docs conf\n\n* change tracking example\n\n",
        "label": "",
        "answer": "no",
        "change": [
            "def setup(app):",
            "",
            "# @jpchen's hack to get rtd builder to install latest pytorch",
            "if 'READTHEDOCS' in os.environ:",
            "-    os.system('pip install https://download.pytorch.org/whl/cpu/torch-1.1.0-cp36-cp36m-linux_x86_64.whl')",
            "+    os.system('pip install torch==1.2.0+cpu -f https://download.pytorch.org/whl/torch_stable.html')"
        ]
    },
    {
        "number": 9599,
        "comments": "",
        "commit_message": "fix issue of image_histogram2d (#1295)\n\n* fix https://github.com/kornia/kornia/issues/1294\n\n* update test for image_histogram2d\n\n* update test_histogram.py\n",
        "label": "",
        "answer": "no",
        "change": [
            "def image_histogram2d(",
            "",
            "hist = torch.sum(kernel_values, dim=(-2, -1)).permute(1, 2, 0)",
            "if return_pdf:",
            "-        normalization = torch.sum(hist, dim=-1).unsqueeze(0) + eps",
            "+        normalization = torch.sum(hist, dim=-1, keepdim=True) + eps",
            "pdf = hist / normalization",
            "if image.dim() == 2:",
            "hist = hist.squeeze()"
        ]
    },
    {
        "number": 9607,
        "comments": "",
        "commit_message": "Several micro optimizations (#4833)\n\n* benchmark transfers\n\n* create tensors directl on device when possible\n\n* fix\n",
        "label": "",
        "answer": "no",
        "change": [
            "class SampledSoftmaxLoss(torch.nn.Module):",
            "",
            "if embeddings.shape[0] == 0:",
            "# empty batch",
            "-            return torch.tensor(0.0).to(embeddings.device)",
            "+            return torch.tensor(0.0, device=embeddings.device)",
            "",
            "if not self.training:",
            "return self._forward_eval(embeddings, targets)"
        ]
    },
    {
        "number": 9615,
        "comments": "",
        "commit_message": ":lady_beetle: Fix rgb_to_hsv for onnx (#1329)\n\n* add test_onnx for RgbToHsv\n\n* add new rgb2hsv implementation\n\n* fix issues\n\n* add version checking\n\n* [pre-commit.ci] auto fixes from pre-commit.com hooks\n\nfor more information, see https://pre-commit.ci\n\n* add support function _compute_max_argmax to fix jit issues\n\n* [pre-commit.ci] auto fixes from pre-commit.com hooks\n\nfor more information, see https://pre-commit.ci\n\nCo-authored-by: pre-commit-ci[bot] <66853113+pre-commit-ci[bot]@users.noreply.github.com>\n",
        "label": "",
        "answer": "no",
        "change": [
            "class TestRgbToHsv(BaseTester):",
            "assert_close(kornia.color.rgb_to_hsv(data), expected)",
            "",
            "def test_nan_rgb_to_hsv(self, device, dtype):",
            "-        data = torch.zeros(1, 5, 5, device=device, dtype=dtype)  # 3x5x5",
            "-        data = data.repeat(3, 1, 1)  # 2x3x5x5",
            "-",
            "+        data = torch.zeros(3, 5, 5, device=device, dtype=dtype)  # 3x5x5",
            "expected = torch.zeros_like(data)  # 3x5x5",
            "assert_close(kornia.color.rgb_to_hsv(data), expected)"
        ]
    },
    {
        "number": 9616,
        "comments": "",
        "commit_message": "[RLlib] Curiosity Bug Fix. (#24880)\n\n\n",
        "label": "",
        "answer": "no",
        "change": [
            "class Curiosity(Exploration):",
            "{",
            "SampleBatch.OBS: torch.cat(",
            "[",
            "-                        torch.from_numpy(sample_batch[SampleBatch.OBS]),",
            "-                        torch.from_numpy(sample_batch[SampleBatch.NEXT_OBS]),",
            "+                        torch.from_numpy(sample_batch[SampleBatch.OBS]).to(",
            "+                            policy.device",
            "+                        ),",
            "+                        torch.from_numpy(sample_batch[SampleBatch.NEXT_OBS]).to(",
            "+                            policy.device",
            "+                        ),",
            "]",
            ")",
            "}"
        ]
    },
    {
        "number": 9620,
        "comments": "",
        "commit_message": "fix moving summar name scope\n\n",
        "label": "",
        "answer": "no",
        "change": [
            "def add_moving_summary(*args, **kwargs):",
            "ema_var, c, decay,",
            "zero_debias=True, name=name + '_EMA_apply')",
            "ema_ops.append(ema_op)",
            "-        # cannot add it into colocate group -- will force everything to cpus",
            "-        tf.summary.scalar(name + '-summary', ema_op)    # write the EMA value as a summary",
            "+        with tf.name_scope(None):",
            "+            # cannot add it into colocate group -- will force everything to cpus",
            "+            tf.summary.scalar(name + '-summary', ema_op)    # write the EMA value as a summary",
            "if coll is not None:",
            "for op in ema_ops:",
            "# TODO a new collection to summary every step?"
        ]
    },
    {
        "number": 9625,
        "comments": "",
        "commit_message": "Minor testing related fixes (#1410)\n\n\n",
        "label": "",
        "answer": "no",
        "change": [
            "def train_test_split(pd_dataframe):",
            "Training data - 45 initial at-bats and hits for each player.",
            "Validation data - Full season at-bats and hits for each player.",
            "\"\"\"",
            "-    train_data = torch.tensor(pd_dataframe.as_matrix([\"At-Bats\", \"Hits\"]), dtype=torch.float)",
            "-    test_data = torch.tensor(pd_dataframe.as_matrix([\"SeasonAt-Bats\", \"SeasonHits\"]), dtype=torch.float)",
            "+    train_data = torch.tensor(pd_dataframe[[\"At-Bats\", \"Hits\"]].values, dtype=torch.float)",
            "+    test_data = torch.tensor(pd_dataframe[[\"SeasonAt-Bats\", \"SeasonHits\"]].values, dtype=torch.float)",
            "first_name = pd_dataframe[\"FirstName\"].values",
            "last_name = pd_dataframe[\"LastName\"].values",
            "player_names = [\" \".join([first, last]) for first, last in zip(first_name, last_name)]"
        ]
    },
    {
        "number": 9630,
        "comments": "",
        "commit_message": "Use f-strings in the dataset scripts (#3291)\n\n* Finishes #3257\n\nUsed f-strings to format the .py files in the dataset folder\n\n* Fix style\n\n* Fix hkcancor dataset\n\nCo-authored-by: Mario \u0160a\u0161ko <mario@huggingface.co>\nCo-authored-by: mariosasko <mariosasko777@gmail.com>\n",
        "label": "",
        "answer": "no",
        "change": [
            "class CovidQaUcsd(datasets.GeneratorBasedBuilder):",
            "",
            "if not os.path.exists(path_to_manual_file):",
            "raise FileNotFoundError(",
            "-                \"{} does not exist. Make sure the file is present in the directory specified in the data_dir specified in the input {} `datasets.load_dataset('covid_qa_ucsd', 'en', data_dir=...)`. Manual download instructions: {})\".format(",
            "-                    path_to_manual_file, dl_manager.manual_dir, self.manual_download_instructions",
            "-                )",
            "+                f\"{path_to_manual_file} does not exist. Make sure the file is present in the directory specified in the data_dir specified in the input {dl_manager.manual_dir} `datasets.load_dataset('covid_qa_ucsd', 'en', data_dir=...)`. Manual download instructions: {self.manual_download_instructions})\"",
            ")",
            "",
            "return [datasets.SplitGenerator(name=datasets.Split.TRAIN, gen_kwargs={\"filepath\": path_to_manual_file})]"
        ]
    },
    {
        "number": 9631,
        "comments": "",
        "commit_message": "Fix torch device issues (#20304)\n\n* fix device issue\n\nCo-authored-by: ydshieh <ydshieh@users.noreply.github.com>\n",
        "label": "",
        "answer": "yes",
        "change": [
            "class ConditionalDetrModelIntegrationTests(unittest.TestCase):",
            "results = feature_extractor.post_process_object_detection(",
            "outputs, threshold=0.3, target_sizes=[image.size[::-1]]",
            ")[0]",
            "-        expected_scores = torch.tensor([0.8330, 0.8313, 0.8039, 0.6829, 0.5355])",
            "+        expected_scores = torch.tensor([0.8330, 0.8313, 0.8039, 0.6829, 0.5355]).to(torch_device)",
            "expected_labels = [75, 17, 17, 75, 63]",
            "-        expected_slice_boxes = torch.tensor([38.3089, 72.1022, 177.6293, 118.4512])",
            "+        expected_slice_boxes = torch.tensor([38.3089, 72.1022, 177.6293, 118.4512]).to(torch_device)",
            "",
            "self.assertEqual(len(results[\"scores\"]), 5)",
            "self.assertTrue(torch.allclose(results[\"scores\"], expected_scores, atol=1e-4))"
        ]
    },
    {
        "number": 9632,
        "comments": "",
        "commit_message": "fix flake8 style in tensorpack/\n\n",
        "label": "",
        "answer": "no",
        "change": [
            "class EnqueueThread(threading.Thread):",
            "feed = dict(zip(self.placehdrs, dp))",
            "# print 'qsize:', self.sess.run([self.op, self.size_op], feed_dict=feed)[1]",
            "self.op.run(feed_dict=feed)",
            "-            except tf.errors.CancelledError as e:",
            "+            except tf.errors.CancelledError:",
            "pass",
            "except Exception:",
            "logger.exception(\"Exception in EnqueueThread:\")"
        ]
    },
    {
        "number": 9633,
        "comments": "",
        "commit_message": "fix BN again and mute some compatibility noise\n\n",
        "label": "",
        "answer": "yes",
        "change": [
            "class GraphVarParam(HyperParam):",
            "self._readable_name, self.var_name = get_op_var_name(name)",
            "",
            "def setup_graph(self):",
            "-        all_vars = tf.all_variables()",
            "+        try:",
            "+            all_vars = tf.global_variables()",
            "+        except:",
            "+            # TODO",
            "+            all_vars = tf.all_variables()",
            "+",
            "for v in all_vars:",
            "if v.name == self.var_name:",
            "self.var = v"
        ]
    },
    {
        "number": 9636,
        "comments": "",
        "commit_message": "bugfixes\n\n",
        "label": "",
        "answer": "yes",
        "change": [
            "class FAUST(Dataset):",
            "index = self.index[:, i]",
            "weight = torch.FloatTensor(index.size(1)).fill_(1)",
            "input = torch.FloatTensor(position.size(0)).fill_(1)",
            "-        adj = torch.sparse.FloatTensor(index, weight, torch.Size([75, 75]))",
            "+        adj = torch.sparse.FloatTensor(index, weight, torch.Size([6890, 6890]))",
            "data = (input, adj, position)",
            "",
            "if self.correspondence:"
        ]
    },
    {
        "number": 9642,
        "comments": "",
        "commit_message": "Doc styler examples (#14953)\n\n* Fix bad examples\n\n* Add black formatting to style_doc\n\n* Use first nonempty line\n\n* Put it at the right place\n\n* Don't add spaces to empty lines\n\n* Better templates\n\n* Deal with triple quotes in docstrings\n\n* Result of style_doc\n\n* Enable mdx treatment and fix code examples in MDXs\n\n* Result of doc styler on doc source files\n\n* Last fixes\n\n* Break copy from\n",
        "label": "",
        "answer": "no",
        "change": [
            "class AlbertForPreTraining(AlbertPreTrainedModel):",
            ">>> from transformers import AlbertTokenizer, AlbertForPreTraining",
            ">>> import torch",
            "",
            "-        >>> tokenizer = AlbertTokenizer.from_pretrained('albert-base-v2')",
            "-        >>> model = AlbertForPreTraining.from_pretrained('albert-base-v2')",
            "+        >>> tokenizer = AlbertTokenizer.from_pretrained(\"albert-base-v2\")",
            "+        >>> model = AlbertForPreTraining.from_pretrained(\"albert-base-v2\")",
            "",
            "-        >>> input_ids = torch.tensor(tokenizer.encode(\"Hello, my dog is cute\", add_special_tokens=True)).unsqueeze(0)  # Batch size 1",
            "+        >>> input_ids = torch.tensor(tokenizer.encode(\"Hello, my dog is cute\", add_special_tokens=True)).unsqueeze(",
            "+        ...     0",
            "+        >>> )  # Batch size 1",
            ">>> outputs = model(input_ids)",
            "",
            ">>> prediction_logits = outputs.prediction_logits"
        ]
    },
    {
        "number": 9643,
        "comments": "",
        "commit_message": "enh: Implements `InferenceModule` as a pipelined module with separate preprocessor, predictor, and postprocessor modules (#2105)\n\n* Adding inference pipeline with seperate pre-processing, predict and post-processing modules\n\n* Update to flatten outputs from predict consistent to support triton\n\n* inference module refactor\n\n* add back InferenceLudwigModel\n\n* [pre-commit.ci] auto fixes from pre-commit.com hooks\n\nfor more information, see https://pre-commit.ci\n\n* unify modules into inference.py\n\n* cleaned up inaccurate documentation\n\n* clean up\n\n* clean up type hints and update InferenceLudwigModel\n\n* clean up type hint; passes test_torchscript.py\n\n* added typing to inference module for clarity\n\n* remove inference_module_file_name constant\n\n* unified predict module with postproc\n\n* removed InferencePredictor entirely\n\n* add back the old inference module\n\n* add back training set metadata\n\n* revert change to predict module, move feature filtering to postproc\n\n* cleanup inference_module_v0\n\n* cleanup\n\n* adds device placement to InferenceLudwigModel\n\n* adds ability to save/load torchscript on particular devices\n\n* [pre-commit.ci] auto fixes from pre-commit.com hooks\n\nfor more information, see https://pre-commit.ci\n\n* allows saving torchscript with dict of devices from api.py\n\n* [pre-commit.ci] auto fixes from pre-commit.com hooks\n\nfor more information, see https://pre-commit.ci\n\n* correct device inputs\n\n* refactor to expose inference stages (prep for triton refactor)\n\n* [pre-commit.ci] auto fixes from pre-commit.com hooks\n\nfor more information, see https://pre-commit.ci\n\n* remove magic 'cpu' string\n\n* remove extraneous constants\n\n* [pre-commit.ci] auto fixes from pre-commit.com hooks\n\nfor more information, see https://pre-commit.ci\n\n* add from_directory classmethod for e2e users\n\n* merge\n\n* merge InferenceModule and InferenceLudwigModel\n\n* add comment\n\n* revert small change\n\n* cleanup\n\n* add to_torchscript functionality\n\n* cleanup\n\n* pushes device logic down into inference stages\n\n* [pre-commit.ci] auto fixes from pre-commit.com hooks\n\nfor more information, see https://pre-commit.ci\n\n* move device placement upstream to inference module to ensure stage modules are performant\n\n* adds logs for device placement experiments\n\n* removes logs\n\n* [pre-commit.ci] auto fixes from pre-commit.com hooks\n\nfor more information, see https://pre-commit.ci\n\n* remove stage_to_dict\n\n* clean up how we get input device in predictor_forward\n\n* first commit\n\n* wip\n\n* updated interfaces\n\n* postproc GPU\n\n* add intelligent device placement\n\n* clean up device api\n\n* revert flatten op in inference_module_v0\n\n* remove dtype workaround\n\n* benchmarking code\n\n* add DEVICE constant as good default for loading/saving\n\n* added helpful logging and style\n\n* cleanup\n\n* cleanup, adding docstrings\n\n* [pre-commit.ci] auto fixes from pre-commit.com hooks\n\nfor more information, see https://pre-commit.ci\n\n* docstring\n\nCo-authored-by: Geoffrey Angus <geoffrey@predibase.com>\nCo-authored-by: pre-commit-ci[bot] <66853113+pre-commit-ci[bot]@users.noreply.github.com>\n",
        "label": "",
        "answer": "no",
        "change": [
            "class AudioFeatureMixin(BaseFeatureMixin):",
            "",
            "feature_length = audio_feature.shape[0]",
            "broadcast_feature_length = min(feature_length, max_length)",
            "-        audio_feature_padded = torch.full((max_length, feature_dim), padding_value, dtype=torch.float32)",
            "+        audio_feature_padded = torch.full(",
            "+            (max_length, feature_dim), padding_value, dtype=torch.float32, device=audio_feature.device",
            "+        )",
            "audio_feature_padded[:broadcast_feature_length, :] = audio_feature[:max_length, :]",
            "",
            "return audio_feature_padded"
        ]
    },
    {
        "number": 9648,
        "comments": "",
        "commit_message": "Fix doc errors and typos across the board (#8139)\n\n* Fix doc errors and typos across the board\n\n* Fix a typo\n\n* Fix the CI\n\n* Fix more typos\n\n* Fix CI\n\n* More fixes\n\n* Fix CI\n\n* More fixes\n\n* More fixes\n",
        "label": "",
        "answer": "no",
        "change": [
            "class Transformer(nn.Module):",
            "attn_mask: torch.tensor(bs, seq_length) Attention mask on the sequence.",
            "",
            "Returns:",
            "-            hidden_state: torch.tensor(bs, seq_length, dim) Sequence of hiddens states in the last (top)",
            "+            hidden_state: torch.tensor(bs, seq_length, dim) Sequence of hidden states in the last (top)",
            "layer all_hidden_states: Tuple[torch.tensor(bs, seq_length, dim)]",
            "Tuple of length n_layers with the hidden states from each layer.",
            "Optional: only if output_hidden_states=True"
        ]
    },
    {
        "number": 9650,
        "comments": "",
        "commit_message": "improved global tensor handling, various other fixes\n\n",
        "label": "",
        "answer": "no",
        "change": [
            "class LineSearch(Iterative):",
            "# Trivial operation to enforce control dependency",
            "return tf.less(x=value, y=value)  # == False",
            "",
            "-        improved = tf.cond(",
            "+        improved = self.cond(",
            "pred=(improvement > last_improvement),",
            "true_fn=(lambda: True),",
            "false_fn=undo_deltas"
        ]
    },
    {
        "number": 9655,
        "comments": "",
        "commit_message": "improved global tensor handling, various other fixes\n\n",
        "label": "",
        "answer": "no",
        "change": [
            "class PrioritizedReplay(Memory):",
            "value=tf.zeros(shape=tf.shape(self.batch_indices), dtype=tf.int32)",
            ")",
            "with tf.control_dependencies(control_inputs=(assignment,)):",
            "-            priority_indices = tf.cond(",
            "+            priority_indices = self.cond(",
            "pred=num_priority_elements > 0,",
            "true_fn=sampling_fn,",
            "false_fn=lambda: tf.zeros(shape=(num_priority_elements,), dtype=tf.int32)"
        ]
    },
    {
        "number": 9664,
        "comments": "",
        "commit_message": "Fix float zeros format (#5491)\n\n* Fix float zeros format\n\n* 255 to integer\n",
        "label": "",
        "answer": "no",
        "change": [
            "class LoadImagesAndLabels(Dataset):",
            "n = len(shapes) // 4",
            "img4, label4, path4, shapes4 = [], [], path[:n], shapes[:n]",
            "",
            "-        ho = torch.tensor([[0., 0, 0, 1, 0, 0]])",
            "-        wo = torch.tensor([[0., 0, 1, 0, 0, 0]])",
            "-        s = torch.tensor([[1, 1, .5, .5, .5, .5]])  # scale",
            "+        ho = torch.tensor([[0.0, 0, 0, 1, 0, 0]])",
            "+        wo = torch.tensor([[0.0, 0, 1, 0, 0, 0]])",
            "+        s = torch.tensor([[1, 1, 0.5, 0.5, 0.5, 0.5]])  # scale",
            "for i in range(n):  # zidane torch.zeros(16,3,720,1280)  # BCHW",
            "i *= 4",
            "if random.random() < 0.5:",
            "-                im = F.interpolate(img[i].unsqueeze(0).float(), scale_factor=2., mode='bilinear', align_corners=False)[",
            "+                im = F.interpolate(img[i].unsqueeze(0).float(), scale_factor=2.0, mode='bilinear', align_corners=False)[",
            "0].type(img[i].type())",
            "l = label[i]",
            "else:"
        ]
    },
    {
        "number": 9665,
        "comments": "",
        "commit_message": "fixed wrong sum axis\n\n",
        "label": "",
        "answer": "no",
        "change": [
            "class Energy(AbsFeatsExtract):",
            "",
            "# input_stft: (..., F, 2) -> (..., F)",
            "input_power = input_stft[..., 0] ** 2 + input_stft[..., 1] ** 2",
            "-        energy = torch.sqrt(torch.clamp(input_power.sum(dim=1), min=1.0e-10))",
            "+        # sum over frequency (B, N, F) -> (B, N)",
            "+        energy = torch.sqrt(torch.clamp(input_power.sum(dim=2), min=1.0e-10))",
            "",
            "# (Optional): Adjust length to match with the mel-spectrogram",
            "if feats_lengths is not None:"
        ]
    },
    {
        "number": 9671,
        "comments": "",
        "commit_message": "Fix the wrong calculation of pred_ctr_y\n\n",
        "label": "",
        "answer": "no",
        "change": [
            "def bbox_transform_inv_tf(boxes, deltas):",
            "dh = deltas[:, 3]",
            "",
            "pred_ctr_x = tf.add(tf.multiply(dx, widths), ctr_x)",
            "-  pred_ctr_y = tf.add(tf.multiply(dy, widths), ctr_y)",
            "+  pred_ctr_y = tf.add(tf.multiply(dy, heights), ctr_y)",
            "pred_w = tf.multiply(tf.exp(dw), widths)",
            "pred_h = tf.multiply(tf.exp(dh), heights)"
        ]
    },
    {
        "number": 9675,
        "comments": "",
        "commit_message": "Replace Distribution+TorchDistribution with a thin Distribution mixin (#769)\n\n* Sketch Distribution class as mixin\n\n* Remove TorchDistribution class\n\n* Simplify TransformedDistribution\n\n* Update torch wrappers for most distributions\n\n* Fix docs\n\n* Use dist.Reshape() to set extra_event_dims\n\n* Fix bugs in Reshape distribution\n\n* Fix rejector tests\n\n* Update _Subsample distribution\n\n* Use .reshape() method for extra_event_dims and sample_shape\n\n* Refactor Distribution -> TorchDistribution class hierarchy\n\n* Update docs\n\n* Fix json error in air.ipynb\n\n* Fix bugs in air.ipynb and abstract_infer.py\n\n* Fix distributions docs\n\n",
        "label": "",
        "answer": "no",
        "change": [
            "class NaiveBeta(Beta):",
            "alpha_beta = torch.stack([alpha, beta], -1)",
            "self._gamma = Gamma(alpha_beta, torch.ones_like(alpha_beta))",
            "",
            "-    def sample(self, sample_shape=torch.Size()):",
            "-        gammas = self._gamma.sample(sample_shape)",
            "+    def rsample(self, sample_shape=torch.Size()):",
            "+        gammas = self._gamma.rsample(sample_shape)",
            "probs = gammas / gammas.sum(-1, True)",
            "return probs[..., 0]"
        ]
    },
    {
        "number": 9676,
        "comments": "",
        "commit_message": "Fix mypy typing errors in optimizer loop (#9317)\n\n\n",
        "label": "",
        "answer": "no",
        "change": [
            "class LightningModule(",
            "def __to_tensor(self, value: numbers.Number) -> torch.Tensor:",
            "return torch.tensor(value, device=self.device)",
            "",
            "-    def log_grad_norm(self, grad_norm_dict: Dict[str, torch.Tensor]) -> None:",
            "+    def log_grad_norm(self, grad_norm_dict: Dict[str, float]) -> None:",
            "\"\"\"Override this method to change the default behaviour of ``log_grad_norm``.",
            "",
            "Args:"
        ]
    },
    {
        "number": 9683,
        "comments": "",
        "commit_message": "Correct shape for default grid_sizes\n\nSummary: Small fix for omitting this argument.\n\nReviewed By: nikhilaravi\n\nDifferential Revision: D29548610\n\nfbshipit-source-id: f25032fab3faa2f09006f5fcf8628138555f2f20\n\n",
        "label": "",
        "answer": "no",
        "change": [
            "def add_points_features_to_volume_densities_features(",
            "",
            "# init the volumetric grid sizes if uninitialized",
            "if grid_sizes is None:",
            "-        grid_sizes = torch.LongTensor(list(volume_densities.shape[2:])).to(",
            "-            volume_densities",
            "+        # grid sizes shape (minibatch, 3)",
            "+        grid_sizes = (",
            "+            torch.LongTensor(list(volume_densities.shape[2:]))",
            "+            .to(volume_densities)",
            "+            .expand(volume_densities.shape[0], 3)",
            ")",
            "",
            "# flatten densities and features"
        ]
    },
    {
        "number": 9686,
        "comments": "",
        "commit_message": "improved global tensor handling, various other fixes\n\n",
        "label": "",
        "answer": "no",
        "change": [
            "class RunningStandardize(Preprocessor):",
            "# Standardize tensor",
            "return (tensor - mean_estimate) / tf.maximum(x=tf.sqrt(x=variance_estimate), y=util.epsilon)",
            "",
            "-            return tf.cond(pred=(count > 1.0), true_fn=later_run, false_fn=first_run)",
            "+            return self.cond(pred=(count > 1.0), true_fn=later_run, false_fn=first_run)"
        ]
    },
    {
        "number": 9689,
        "comments": "",
        "commit_message": "Reinforcement learning fix opt (#999)\n\n* change readme\n\n* Add files via upload\n\n* fix opt and make format\n\n* readme\n\n",
        "label": "",
        "answer": "no",
        "change": [
            "class PPO(object):",
            "advantage = tfdc_r - self.critic(s)",
            "closs = tf.reduce_mean(tf.square(advantage))",
            "grad = tape.gradient(closs, self.critic.trainable_weights)",
            "-        tf.optimizers.Adam(C_LR).apply_gradients(zip(grad, self.critic.trainable_weights))",
            "+        self.critic_opt.apply_gradients(zip(grad, self.critic.trainable_weights))",
            "",
            "def cal_adv(self, tfs, tfdc_r):",
            "'''"
        ]
    },
    {
        "number": 9692,
        "comments": "",
        "commit_message": "Fixed general problems with variable handling and various related changes, removed DDQN\n\n",
        "label": "",
        "answer": "no",
        "change": [
            "class NaturalGradient(Optimizer):",
            "# Solve the following system for delta' via the conjugate gradient solver.",
            "# [delta' * F] * delta' = -grad(loss)",
            "# --> delta'  (= lambda * delta)",
            "-        deltas = self.solver.solve(fn_x=fisher_matrix_product, x_init=None, b=[-grad for grad in loss_gradients], f_args=())",
            "+        deltas = self.solver.solve(fn_x=fisher_matrix_product, x_init=None, b=[-grad for grad in loss_gradients])",
            "",
            "# delta' * F",
            "delta_fisher_matrix_product = fisher_matrix_product(deltas=deltas)"
        ]
    },
    {
        "number": 9696,
        "comments": "",
        "commit_message": "Fix typos discovered by codespell (#1214)\n\n\n",
        "label": "",
        "answer": "no",
        "change": [
            "def random_crop_size_generator(",
            "# Element-wise w, h condition",
            "cond = ((0 < w) * (w < size[0]) * (0 < h) * (h < size[1])).int()",
            "",
            "-    # torch.argmax is not reproducible accross devices: https://github.com/pytorch/pytorch/issues/17738",
            "-    # Here, we will select the first occurance of the duplicated elements.",
            "+    # torch.argmax is not reproducible across devices: https://github.com/pytorch/pytorch/issues/17738",
            "+    # Here, we will select the first occurrence of the duplicated elements.",
            "cond_bool, argmax_dim1 = ((cond.cumsum(1) == 1) & cond.bool()).max(1)",
            "h_out = w[torch.arange(0, batch_size, device=device, dtype=torch.long), argmax_dim1]",
            "w_out = h[torch.arange(0, batch_size, device=device, dtype=torch.long), argmax_dim1]"
        ]
    },
    {
        "number": 9698,
        "comments": "",
        "commit_message": "Removed arrays_to_variables (#580)\n\n* Removed arrays_to_variables\n\n* Fix merged tests\n\n",
        "label": "",
        "answer": "yes",
        "change": [
            "class TestElmo(AllenNlpTestCase):",
            "dataset = Dataset(instances)",
            "vocab = Vocabulary()",
            "dataset.index_instances(vocab)",
            "-        character_ids = dataset.as_array_dict()['elmo']['character_ids']",
            "+        character_ids = dataset.as_tensor_dict()['elmo']['character_ids']",
            "",
            "-        output = elmo(Variable(torch.from_numpy(character_ids)))",
            "+        output = elmo(character_ids)",
            "elmo_representations = output['elmo_representations']",
            "mask = output['mask']"
        ]
    },
    {
        "number": 9700,
        "comments": "",
        "commit_message": "Scope TokenIndexer output by indexer name (#3597)\n\n* Indexer tests are now passing, at least\n\n* Fixed some masking issues, and padding keys for one config file\n\n* TextFieldEmbedder tests pass\n\n* Fixing fixtures, some more tests passing\n\n* Fixed weird ordering bug\n\n* All TokenEmbedder tests passing?\n\n* Update fixtures\n\n* Fix more hard-coded references\n\n* fix field tests\n\n* fix dataset reader tests\n\n* Fix iterator tests\n\n* More tests passing\n\n* fix hotflip and some other tests\n\n* more tests\n\n* more test fixes\n\n* more tests\n\n* most tests passing; I think the remaining ones are spacy model changes\n\n* hard-code POS tag test\n\n* last test, I think\n\n* black\n\n* updated black\n\n* flake8\n\n* mypy\n\n* black again\n\n* fix training configs\n\n* remove reference to embedder_to_indexer_map\n\n* Other fixes from PR comments\n\n* fix breakage from incorrect merge during rebase\n\n* flake, some docstring formatting\n\n",
        "label": "",
        "answer": "no",
        "change": [
            "class CrfTagger(Model):",
            "\"\"\"",
            "# Parameters",
            "",
            "-        tokens : ``Dict[str, torch.LongTensor]``, required",
            "+        tokens : ``TextFieldTensors``, required",
            "The output of ``TextField.as_array()``, which should typically be passed directly to a",
            "``TextFieldEmbedder``. This output is a dictionary mapping keys to ``TokenIndexer``",
            "tensors.  At its most basic, using a ``SingleIdTokenIndexer`` this is : ``{\"tokens\":"
        ]
    },
    {
        "number": 9704,
        "comments": "",
        "commit_message": "some tutorial improvements (#667)\n\n* some tutorial improvements\n\n* minor fix\n\n",
        "label": "",
        "answer": "no",
        "change": [
            "\"\\n\",",
            "\"```python\\n\",",
            "\"data = Variable(torch.zeros(10, 1))\\n\",",
            "-    \"data[0:6, 0].data = torch.ones(6)  # 6 heads and 4 tails\\n\",",
            "+    \"data.data[0:6, 0] = torch.ones(6)  # 6 heads and 4 tails\\n\",",
            "\"```\\n\",",
            "\"\\n\",",
            "\"Then we have:\\n\","
        ]
    },
    {
        "number": 9705,
        "comments": "",
        "commit_message": "Improve compatibility to tensorflow 2.3 (#1487)\n\n* fix gfile not found error occurring with tensorflow 2.3\n\n* fix as_list() not found error occurring with tensorflow 2.3\n\nCo-authored-by: Philipp Werner <pw_post@gmx.de>\n",
        "label": "",
        "answer": "no",
        "change": [
            "class AutoResumeTrainConfig(TrainConfig):",
            "if not dir:",
            "return None",
            "path = os.path.join(dir, 'checkpoint')",
            "-        if not tf.gfile.Exists(path):",
            "+        if not tfv1.gfile.Exists(path):",
            "return None",
            "return SaverRestore(path)"
        ]
    },
    {
        "number": 9707,
        "comments": "",
        "commit_message": "Fix squared distance for CPU impl. (#83)\n\nSummary:\n`PointLineDistanceForward()` should return squared distance. However, it seems that it returned non-squared distance when `v0` was near by `v1` in CPU implementation.\nPull Request resolved: https://github.com/facebookresearch/pytorch3d/pull/83\n\nReviewed By: bottler\n\nDifferential Revision: D20097181\n\nPulled By: nikhilaravi\n\nfbshipit-source-id: 7ea851c0837ab89364e42d283c999df21ff5ff02\n\n",
        "label": "",
        "answer": "no",
        "change": [
            "def point_line_distance(p, v0, v1):",
            "",
            "v1v0 = v1 - v0",
            "l2 = v1v0.dot(v1v0)  # |v1 - v0|^2",
            "-    if l2 == 0.0:",
            "-        return torch.sqrt((p - v1).dot(p - v1))  # v0 == v1",
            "+    if l2 <= kEpsilon:",
            "+        return (p - v1).dot(p - v1)  # v0 == v1",
            "",
            "t = (v1v0).dot(p - v0) / l2",
            "t = torch.clamp(t, min=0.0, max=1.0)"
        ]
    },
    {
        "number": 9709,
        "comments": "",
        "commit_message": "Fix/Enable all schedulers for in-painting (#1331)\n\n* inpaint fix k lms\n\n* onnox as well\n\n* up\n",
        "label": "",
        "answer": "no",
        "change": [
            "class StableDiffusionInpaintPipeline(DiffusionPipeline):",
            "latent_model_input = torch.cat([latents] * 2) if do_classifier_free_guidance else latents",
            "",
            "# concat latents, mask, masked_image_latents in the channel dimension",
            "-            latent_model_input = torch.cat([latent_model_input, mask, masked_image_latents], dim=1)",
            "-",
            "latent_model_input = self.scheduler.scale_model_input(latent_model_input, t)",
            "+            latent_model_input = torch.cat([latent_model_input, mask, masked_image_latents], dim=1)",
            "",
            "# predict the noise residual",
            "noise_pred = self.unet(latent_model_input, t, encoder_hidden_states=text_embeddings).sample"
        ]
    }
]